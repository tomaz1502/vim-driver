/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const TERMINFO: u32 = 1;
pub const HAVE_OSPEED: u32 = 1;
pub const HAVE_UP_BC_PC: u32 = 1;
pub const HAVE_DATE_TIME: u32 = 1;
pub const HAVE_ATTRIBUTE_UNUSED: u32 = 1;
pub const UNIX: u32 = 1;
pub const VIM_SIZEOF_INT: u32 = 4;
pub const VIM_SIZEOF_LONG: u32 = 8;
pub const SIZEOF_OFF_T: u32 = 8;
pub const SIZEOF_TIME_T: u32 = 8;
pub const USEMEMMOVE: u32 = 1;
pub const USEMAN_S: u32 = 1;
pub const TIME_WITH_SYS_TIME: u32 = 1;
pub const SYS_SELECT_WITH_SYS_TIME: u32 = 1;
pub const HAVE_SVR4_PTYS: u32 = 1;
pub const HAVE_SIGCONTEXT: u32 = 1;
pub const TGETENT_ZERO_ERR: u32 = 0;
pub const HAVE_FCHDIR: u32 = 1;
pub const HAVE_FCHOWN: u32 = 1;
pub const HAVE_FCHMOD: u32 = 1;
pub const HAVE_FLOAT_FUNCS: u32 = 1;
pub const HAVE_FSEEKO: u32 = 1;
pub const HAVE_FSYNC: u32 = 1;
pub const HAVE_FTRUNCATE: u32 = 1;
pub const HAVE_GETCWD: u32 = 1;
pub const HAVE_GETPGID: u32 = 1;
pub const HAVE_GETPWENT: u32 = 1;
pub const HAVE_GETPWNAM: u32 = 1;
pub const HAVE_GETPWUID: u32 = 1;
pub const HAVE_GETRLIMIT: u32 = 1;
pub const HAVE_GETTIMEOFDAY: u32 = 1;
pub const HAVE_ICONV: u32 = 1;
pub const HAVE_LOCALTIME_R: u32 = 1;
pub const HAVE_LSTAT: u32 = 1;
pub const HAVE_MEMSET: u32 = 1;
pub const HAVE_MKDTEMP: u32 = 1;
pub const HAVE_NANOSLEEP: u32 = 1;
pub const HAVE_NL_LANGINFO_CODESET: u32 = 1;
pub const HAVE_OPENDIR: u32 = 1;
pub const HAVE_POSIX_OPENPT: u32 = 1;
pub const HAVE_PUTENV: u32 = 1;
pub const HAVE_QSORT: u32 = 1;
pub const HAVE_READLINK: u32 = 1;
pub const HAVE_RENAME: u32 = 1;
pub const HAVE_SELECT: u32 = 1;
pub const HAVE_SETENV: u32 = 1;
pub const HAVE_SETPGID: u32 = 1;
pub const HAVE_SETSID: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_SIGALTSTACK: u32 = 1;
pub const HAVE_SIGSET: u32 = 1;
pub const HAVE_SIGSTACK: u32 = 1;
pub const HAVE_SIGPROCMASK: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_STRERROR: u32 = 1;
pub const HAVE_STRFTIME: u32 = 1;
pub const HAVE_STRNCASECMP: u32 = 1;
pub const HAVE_STRPBRK: u32 = 1;
pub const HAVE_STRTOL: u32 = 1;
pub const HAVE_ST_BLKSIZE: u32 = 1;
pub const HAVE_SYSCONF: u32 = 1;
pub const HAVE_SYSINFO: u32 = 1;
pub const HAVE_SYSINFO_MEM_UNIT: u32 = 1;
pub const HAVE_TGETENT: u32 = 1;
pub const HAVE_TOWLOWER: u32 = 1;
pub const HAVE_TOWUPPER: u32 = 1;
pub const HAVE_ISWUPPER: u32 = 1;
pub const HAVE_UNSETENV: u32 = 1;
pub const HAVE_USLEEP: u32 = 1;
pub const HAVE_UTIME: u32 = 1;
pub const HAVE_MBLEN: u32 = 1;
pub const HAVE_UTIMES: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_ERRNO_H: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_ICONV_H: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LIBGEN_H: u32 = 1;
pub const HAVE_LIBINTL_H: u32 = 1;
pub const HAVE_LOCALE_H: u32 = 1;
pub const HAVE_MATH_H: u32 = 1;
pub const HAVE_POLL_H: u32 = 1;
pub const HAVE_PWD_H: u32 = 1;
pub const HAVE_SETJMP_H: u32 = 1;
pub const HAVE_SGTTY_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_SYS_IOCTL_H: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_POLL_H: u32 = 1;
pub const HAVE_SYS_RESOURCE_H: u32 = 1;
pub const HAVE_SYS_SELECT_H: u32 = 1;
pub const HAVE_SYS_STATFS_H: u32 = 1;
pub const HAVE_SYS_SYSINFO_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_UTSNAME_H: u32 = 1;
pub const HAVE_TERMCAP_H: u32 = 1;
pub const HAVE_TERMIOS_H: u32 = 1;
pub const HAVE_TERMIO_H: u32 = 1;
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_WCTYPE_H: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UTIME_H: u32 = 1;
pub const HAVE_X11_SM_SMLIB_H: u32 = 1;
pub const HAVE_SYS_WAIT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const FEAT_HUGE: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_DLOPEN: u32 = 1;
pub const HAVE_DLSYM: u32 = 1;
pub const FEAT_NETBEANS_INTG: u32 = 1;
pub const FEAT_JOB_CHANNEL: u32 = 1;
pub const FEAT_TERMINAL: u32 = 1;
pub const USE_XSMP_INTERACT: u32 = 1;
pub const HAVE_FD_CLOEXEC: u32 = 1;
pub const PROC_EXE_LINK: &[u8; 15usize] = b"/proc/self/exe\0";
pub const HAVE_ISINF: u32 = 1;
pub const HAVE_ISNAN: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const ROOT_UID: u32 = 0;
pub const MAX_MSG_HIST_LEN: u32 = 200;
pub const STARTUPTIME: u32 = 1;
pub const SESSION_FILE: &[u8; 12usize] = b"Session.vim\0";
pub const SYS_OPTWIN_FILE: &[u8; 23usize] = b"$VIMRUNTIME/optwin.vim\0";
pub const RUNTIME_DIRNAME: &[u8; 8usize] = b"runtime\0";
pub const VIMPACKAGE: &[u8; 4usize] = b"vim\0";
pub const _CTYPE_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _SYS_STAT_H: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SYS_PARAM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGIOT: u32 = 6;
pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const SIGBUS: u32 = 7;
pub const SIGSYS: u32 = 31;
pub const SIGURG: u32 = 23;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGCONT: u32 = 18;
pub const SIGCHLD: u32 = 17;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 29;
pub const SIGXFSZ: u32 = 25;
pub const SIGXCPU: u32 = 24;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 10;
pub const SIGUSR2: u32 = 12;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGCLD: u32 = 17;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const _NSIG: u32 = 65;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 65;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const MAXSYMLINKS: u32 = 20;
pub const NOFILE: u32 = 256;
pub const NCARGS: u32 = 131072;
pub const NGROUPS: u32 = 65536;
pub const CANBSIZ: u32 = 255;
pub const MAXPATHLEN: u32 = 4096;
pub const DEV_BSIZE: u32 = 512;
pub const SIGDUMMYARG: u32 = 0;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const MAXNAMLEN: u32 = 255;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const BASENAMELEN: u32 = 250;
pub const _PWD_H: u32 = 1;
pub const NSS_BUFLEN_PASSWD: u32 = 1024;
pub const SYS_VIMRC_FILE: &[u8; 11usize] = b"$VIM/vimrc\0";
pub const SYS_GVIMRC_FILE: &[u8; 12usize] = b"$VIM/gvimrc\0";
pub const DFLT_HELPFILE: &[u8; 25usize] = b"$VIMRUNTIME/doc/help.txt\0";
pub const FILETYPE_FILE: &[u8; 13usize] = b"filetype.vim\0";
pub const FTPLUGIN_FILE: &[u8; 13usize] = b"ftplugin.vim\0";
pub const INDENT_FILE: &[u8; 11usize] = b"indent.vim\0";
pub const FTOFF_FILE: &[u8; 10usize] = b"ftoff.vim\0";
pub const FTPLUGOF_FILE: &[u8; 13usize] = b"ftplugof.vim\0";
pub const INDOFF_FILE: &[u8; 11usize] = b"indoff.vim\0";
pub const SYS_MENU_FILE: &[u8; 21usize] = b"$VIMRUNTIME/menu.vim\0";
pub const USR_EXRC_FILE: &[u8; 12usize] = b"$HOME/.exrc\0";
pub const USR_VIMRC_FILE: &[u8; 13usize] = b"$HOME/.vimrc\0";
pub const USR_VIMRC_FILE2: &[u8; 13usize] = b"~/.vim/vimrc\0";
pub const USR_GVIMRC_FILE: &[u8; 14usize] = b"$HOME/.gvimrc\0";
pub const USR_GVIMRC_FILE2: &[u8; 14usize] = b"~/.vim/gvimrc\0";
pub const VIM_DEFAULTS_FILE: &[u8; 25usize] = b"$VIMRUNTIME/defaults.vim\0";
pub const EVIM_FILE: &[u8; 21usize] = b"$VIMRUNTIME/evim.vim\0";
pub const VIMINFO_FILE: &[u8; 15usize] = b"$HOME/.viminfo\0";
pub const EXRC_FILE: &[u8; 6usize] = b".exrc\0";
pub const VIMRC_FILE: &[u8; 7usize] = b".vimrc\0";
pub const SYNTAX_FNAME: &[u8; 26usize] = b"$VIMRUNTIME/syntax/%s.vim\0";
pub const DFLT_BDIR: &[u8; 11usize] = b".,~/tmp,~/\0";
pub const DFLT_DIR: &[u8; 22usize] = b".,~/tmp,/var/tmp,/tmp\0";
pub const DFLT_VDIR: &[u8; 16usize] = b"$HOME/.vim/view\0";
pub const DFLT_ERRORFILE: &[u8; 11usize] = b"errors.err\0";
pub const DFLT_RUNTIMEPATH: &[u8; 66usize] =
    b"~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,~/.vim/after\0";
pub const CLEAN_RUNTIMEPATH: &[u8; 46usize] = b"$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after\0";
pub const TEMPNAMELEN: u32 = 256;
pub const SPECIAL_WILDCHAR: &[u8; 4usize] = b"`'{\0";
pub const CMDBUFFSIZE: u32 = 1024;
pub const MAXPATHL: u32 = 4096;
pub const DFLT_MAXMEM: u32 = 5120;
pub const DFLT_MAXMEMTOT: u32 = 10240;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const NUMBUFLEN: u32 = 65;
pub const STR2NR_BIN: u32 = 1;
pub const STR2NR_OCT: u32 = 2;
pub const STR2NR_HEX: u32 = 4;
pub const STR2NR_ALL: u32 = 7;
pub const STR2NR_FORCE: u32 = 8;
pub const SCANF_HEX_LONG_U: &[u8; 4usize] = b"%lx\0";
pub const SCANF_DECIMAL_LONG_U: &[u8; 4usize] = b"%lu\0";
pub const PRINTF_HEX_LONG_U: &[u8; 6usize] = b"0x%lx\0";
pub const PRINTF_DECIMAL_LONG_U: &[u8; 4usize] = b"%lu\0";
pub const MAX_TYPENR: u32 = 65535;
pub const NUL: u8 = 0u8;
pub const BELL: u8 = 7u8;
pub const BS: u8 = 8u8;
pub const TAB: u8 = 9u8;
pub const NL: u8 = 10u8;
pub const FF: u8 = 12u8;
pub const CAR: u8 = 13u8;
pub const ESC: u8 = 27u8;
pub const ESC_STR_nc: &[u8; 2usize] = b"\x1B\0";
pub const DEL: u32 = 127;
pub const POUND: u32 = 163;
pub const CTRL_F_STR: &[u8; 2usize] = b"\x06\0";
pub const CTRL_H_STR: &[u8; 2usize] = b"\x08\0";
pub const CTRL_V_STR: &[u8; 2usize] = b"\x16\0";
pub const Ctrl_AT: u32 = 0;
pub const Ctrl_A: u32 = 1;
pub const Ctrl_B: u32 = 2;
pub const Ctrl_C: u32 = 3;
pub const Ctrl_D: u32 = 4;
pub const Ctrl_E: u32 = 5;
pub const Ctrl_F: u32 = 6;
pub const Ctrl_G: u32 = 7;
pub const Ctrl_H: u32 = 8;
pub const Ctrl_I: u32 = 9;
pub const Ctrl_J: u32 = 10;
pub const Ctrl_K: u32 = 11;
pub const Ctrl_L: u32 = 12;
pub const Ctrl_M: u32 = 13;
pub const Ctrl_N: u32 = 14;
pub const Ctrl_O: u32 = 15;
pub const Ctrl_P: u32 = 16;
pub const Ctrl_Q: u32 = 17;
pub const Ctrl_R: u32 = 18;
pub const Ctrl_S: u32 = 19;
pub const Ctrl_T: u32 = 20;
pub const Ctrl_U: u32 = 21;
pub const Ctrl_V: u32 = 22;
pub const Ctrl_W: u32 = 23;
pub const Ctrl_X: u32 = 24;
pub const Ctrl_Y: u32 = 25;
pub const Ctrl_Z: u32 = 26;
pub const Ctrl_BSL: u32 = 28;
pub const Ctrl_RSB: u32 = 29;
pub const Ctrl_HAT: u32 = 30;
pub const Ctrl__: u32 = 31;
pub const CSI: u32 = 155;
pub const CSI_STR: [u8; 2usize] = [155u8, 0u8];
pub const DCS: u32 = 144;
pub const OSC: u32 = 157;
pub const STERM: u32 = 156;
pub const PATHSEP: u8 = 47u8;
pub const PATHSEPSTR: &[u8; 2usize] = b"/\0";
pub const K_NUL: u32 = 206;
pub const K_SPECIAL: u32 = 128;
pub const ABBR_OFF: u32 = 256;
pub const KS_ZERO: u32 = 255;
pub const KS_SPECIAL: u32 = 254;
pub const KS_EXTRA: u32 = 253;
pub const KS_MODIFIER: u32 = 252;
pub const KS_MOUSE: u32 = 251;
pub const KS_MENU: u32 = 250;
pub const KS_VER_SCROLLBAR: u32 = 249;
pub const KS_HOR_SCROLLBAR: u32 = 248;
pub const KS_NETTERM_MOUSE: u32 = 247;
pub const KS_DEC_MOUSE: u32 = 246;
pub const KS_SELECT: u32 = 245;
pub const KS_TEAROFF: u32 = 244;
pub const KS_JSBTERM_MOUSE: u32 = 243;
pub const KS_KEY: u32 = 242;
pub const KS_PTERM_MOUSE: u32 = 241;
pub const KS_TABLINE: u32 = 240;
pub const KS_TABMENU: u32 = 239;
pub const KS_URXVT_MOUSE: u32 = 238;
pub const KS_SGR_MOUSE: u32 = 237;
pub const KS_SGR_MOUSE_RELEASE: u32 = 236;
pub const KS_GPM_MOUSE: u32 = 235;
pub const KE_FILLER: u8 = 88u8;
pub const MOD_MASK_SHIFT: u32 = 2;
pub const MOD_MASK_CTRL: u32 = 4;
pub const MOD_MASK_ALT: u32 = 8;
pub const MOD_MASK_META: u32 = 16;
pub const MOD_MASK_2CLICK: u32 = 32;
pub const MOD_MASK_3CLICK: u32 = 64;
pub const MOD_MASK_4CLICK: u32 = 96;
pub const MOD_MASK_CMD: u32 = 128;
pub const MOD_MASK_MULTI_CLICK: u32 = 96;
pub const MAX_KEY_NAME_LEN: u32 = 32;
pub const MAX_KEY_CODE_LEN: u32 = 6;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const NOT_IN_POPUP_WINDOW: u32 = 0;
pub const TMODE_COOK: u32 = 0;
pub const TMODE_SLEEP: u32 = 1;
pub const TMODE_RAW: u32 = 2;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _ASSERT_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2usize] = b"l\0";
pub const PRId8: &[u8; 2usize] = b"d\0";
pub const PRId16: &[u8; 2usize] = b"d\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &[u8; 2usize] = b"d\0";
pub const PRIdFAST16: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &[u8; 3usize] = b"ld\0";
pub const PRIi8: &[u8; 2usize] = b"i\0";
pub const PRIi16: &[u8; 2usize] = b"i\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 3usize] = b"li\0";
pub const PRIiFAST8: &[u8; 2usize] = b"i\0";
pub const PRIiFAST16: &[u8; 3usize] = b"li\0";
pub const PRIiFAST32: &[u8; 3usize] = b"li\0";
pub const PRIiFAST64: &[u8; 3usize] = b"li\0";
pub const PRIo8: &[u8; 2usize] = b"o\0";
pub const PRIo16: &[u8; 2usize] = b"o\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &[u8; 2usize] = b"o\0";
pub const PRIoFAST16: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &[u8; 3usize] = b"lo\0";
pub const PRIu8: &[u8; 2usize] = b"u\0";
pub const PRIu16: &[u8; 2usize] = b"u\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &[u8; 2usize] = b"u\0";
pub const PRIuFAST16: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &[u8; 3usize] = b"lu\0";
pub const PRIx8: &[u8; 2usize] = b"x\0";
pub const PRIx16: &[u8; 2usize] = b"x\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &[u8; 2usize] = b"x\0";
pub const PRIxFAST16: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &[u8; 3usize] = b"lx\0";
pub const PRIX8: &[u8; 2usize] = b"X\0";
pub const PRIX16: &[u8; 2usize] = b"X\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &[u8; 2usize] = b"X\0";
pub const PRIXFAST16: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"ld\0";
pub const PRIiMAX: &[u8; 3usize] = b"li\0";
pub const PRIoMAX: &[u8; 3usize] = b"lo\0";
pub const PRIuMAX: &[u8; 3usize] = b"lu\0";
pub const PRIxMAX: &[u8; 3usize] = b"lx\0";
pub const PRIXMAX: &[u8; 3usize] = b"lX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &[u8; 3usize] = b"ld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 3usize] = b"li\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3usize] = b"li\0";
pub const SCNiFAST32: &[u8; 3usize] = b"li\0";
pub const SCNiFAST64: &[u8; 3usize] = b"li\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &[u8; 3usize] = b"lu\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &[u8; 3usize] = b"lo\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"ld\0";
pub const SCNiMAX: &[u8; 3usize] = b"li\0";
pub const SCNoMAX: &[u8; 3usize] = b"lo\0";
pub const SCNuMAX: &[u8; 3usize] = b"lu\0";
pub const SCNxMAX: &[u8; 3usize] = b"lx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const _WCTYPE_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
pub const VALID_NO_UPDATE: u32 = 5;
pub const VALID: u32 = 10;
pub const INVERTED: u32 = 20;
pub const INVERTED_ALL: u32 = 25;
pub const REDRAW_TOP: u32 = 30;
pub const SOME_VALID: u32 = 35;
pub const NOT_VALID: u32 = 40;
pub const CLEAR: u32 = 50;
pub const VALID_WROW: u32 = 1;
pub const VALID_WCOL: u32 = 2;
pub const VALID_VIRTCOL: u32 = 4;
pub const VALID_CHEIGHT: u32 = 8;
pub const VALID_CROW: u32 = 16;
pub const VALID_BOTLINE: u32 = 32;
pub const VALID_BOTLINE_AP: u32 = 64;
pub const VALID_TOPLINE: u32 = 128;
pub const POPF_HIDDEN: u32 = 1;
pub const POPF_HANDLED: u32 = 2;
pub const HL_NORMAL: u32 = 0;
pub const HL_INVERSE: u32 = 1;
pub const HL_BOLD: u32 = 2;
pub const HL_ITALIC: u32 = 4;
pub const HL_UNDERLINE: u32 = 8;
pub const HL_UNDERCURL: u32 = 16;
pub const HL_STANDOUT: u32 = 32;
pub const HL_NOCOMBINE: u32 = 64;
pub const HL_STRIKETHROUGH: u32 = 128;
pub const HL_ALL: u32 = 255;
pub const MSG_HIST: u32 = 4096;
pub const NORMAL: u32 = 1;
pub const VISUAL: u32 = 2;
pub const OP_PENDING: u32 = 4;
pub const CMDLINE: u32 = 8;
pub const INSERT: u32 = 16;
pub const LANGMAP: u32 = 32;
pub const REPLACE_FLAG: u32 = 64;
pub const REPLACE: u32 = 80;
pub const VREPLACE_FLAG: u32 = 128;
pub const VREPLACE: u32 = 208;
pub const LREPLACE: u32 = 96;
pub const NORMAL_BUSY: u32 = 257;
pub const HITRETURN: u32 = 513;
pub const ASKMORE: u32 = 768;
pub const SETWSIZE: u32 = 1024;
pub const ABBREV: u32 = 1280;
pub const EXTERNCMD: u32 = 1536;
pub const SHOWMATCH: u32 = 1808;
pub const CONFIRM: u32 = 2048;
pub const SELECTMODE: u32 = 4096;
pub const TERMINAL: u32 = 8192;
pub const MAP_ALL_MODES: u32 = 12351;
pub const FORWARD: u32 = 1;
pub const BACKWARD: i32 = -1;
pub const FORWARD_FILE: u32 = 3;
pub const BACKWARD_FILE: i32 = -3;
pub const OK: u32 = 1;
pub const FAIL: u32 = 0;
pub const NOTDONE: u32 = 2;
pub const BF_RECOVERED: u32 = 1;
pub const BF_CHECK_RO: u32 = 2;
pub const BF_NEVERLOADED: u32 = 4;
pub const BF_NOTEDITED: u32 = 8;
pub const BF_NEW: u32 = 16;
pub const BF_NEW_W: u32 = 32;
pub const BF_READERR: u32 = 64;
pub const BF_DUMMY: u32 = 128;
pub const BF_PRESERVED: u32 = 256;
pub const BF_WRITE_MASK: u32 = 88;
pub const EXPAND_UNSUCCESSFUL: i32 = -2;
pub const EXPAND_OK: i32 = -1;
pub const EXPAND_NOTHING: u32 = 0;
pub const EXPAND_COMMANDS: u32 = 1;
pub const EXPAND_FILES: u32 = 2;
pub const EXPAND_DIRECTORIES: u32 = 3;
pub const EXPAND_SETTINGS: u32 = 4;
pub const EXPAND_BOOL_SETTINGS: u32 = 5;
pub const EXPAND_TAGS: u32 = 6;
pub const EXPAND_OLD_SETTING: u32 = 7;
pub const EXPAND_HELP: u32 = 8;
pub const EXPAND_BUFFERS: u32 = 9;
pub const EXPAND_EVENTS: u32 = 10;
pub const EXPAND_MENUS: u32 = 11;
pub const EXPAND_SYNTAX: u32 = 12;
pub const EXPAND_HIGHLIGHT: u32 = 13;
pub const EXPAND_AUGROUP: u32 = 14;
pub const EXPAND_USER_VARS: u32 = 15;
pub const EXPAND_MAPPINGS: u32 = 16;
pub const EXPAND_TAGS_LISTFILES: u32 = 17;
pub const EXPAND_FUNCTIONS: u32 = 18;
pub const EXPAND_USER_FUNC: u32 = 19;
pub const EXPAND_EXPRESSION: u32 = 20;
pub const EXPAND_MENUNAMES: u32 = 21;
pub const EXPAND_USER_COMMANDS: u32 = 22;
pub const EXPAND_USER_CMD_FLAGS: u32 = 23;
pub const EXPAND_USER_NARGS: u32 = 24;
pub const EXPAND_USER_COMPLETE: u32 = 25;
pub const EXPAND_ENV_VARS: u32 = 26;
pub const EXPAND_LANGUAGE: u32 = 27;
pub const EXPAND_COLORS: u32 = 28;
pub const EXPAND_COMPILER: u32 = 29;
pub const EXPAND_USER_DEFINED: u32 = 30;
pub const EXPAND_USER_LIST: u32 = 31;
pub const EXPAND_SHELLCMD: u32 = 32;
pub const EXPAND_CSCOPE: u32 = 33;
pub const EXPAND_SIGN: u32 = 34;
pub const EXPAND_PROFILE: u32 = 35;
pub const EXPAND_BEHAVE: u32 = 36;
pub const EXPAND_FILETYPE: u32 = 37;
pub const EXPAND_FILES_IN_PATH: u32 = 38;
pub const EXPAND_OWNSYNTAX: u32 = 39;
pub const EXPAND_LOCALES: u32 = 40;
pub const EXPAND_HISTORY: u32 = 41;
pub const EXPAND_USER: u32 = 42;
pub const EXPAND_SYNTIME: u32 = 43;
pub const EXPAND_USER_ADDR_TYPE: u32 = 44;
pub const EXPAND_PACKADD: u32 = 45;
pub const EXPAND_MESSAGES: u32 = 46;
pub const EXPAND_MAPCLEAR: u32 = 47;
pub const EXPAND_ARGLIST: u32 = 48;
pub const EXMODE_NORMAL: u32 = 1;
pub const EXMODE_VIM: u32 = 2;
pub const WILD_FREE: u32 = 1;
pub const WILD_EXPAND_FREE: u32 = 2;
pub const WILD_EXPAND_KEEP: u32 = 3;
pub const WILD_NEXT: u32 = 4;
pub const WILD_PREV: u32 = 5;
pub const WILD_ALL: u32 = 6;
pub const WILD_LONGEST: u32 = 7;
pub const WILD_ALL_KEEP: u32 = 8;
pub const WILD_LIST_NOTFOUND: u32 = 1;
pub const WILD_HOME_REPLACE: u32 = 2;
pub const WILD_USE_NL: u32 = 4;
pub const WILD_NO_BEEP: u32 = 8;
pub const WILD_ADD_SLASH: u32 = 16;
pub const WILD_KEEP_ALL: u32 = 32;
pub const WILD_SILENT: u32 = 64;
pub const WILD_ESCAPE: u32 = 128;
pub const WILD_ICASE: u32 = 256;
pub const WILD_ALLLINKS: u32 = 512;
pub const EW_DIR: u32 = 1;
pub const EW_FILE: u32 = 2;
pub const EW_NOTFOUND: u32 = 4;
pub const EW_ADDSLASH: u32 = 8;
pub const EW_KEEPALL: u32 = 16;
pub const EW_SILENT: u32 = 32;
pub const EW_EXEC: u32 = 64;
pub const EW_PATH: u32 = 128;
pub const EW_ICASE: u32 = 256;
pub const EW_NOERROR: u32 = 512;
pub const EW_NOTWILD: u32 = 1024;
pub const EW_KEEPDOLLAR: u32 = 2048;
pub const EW_ALLLINKS: u32 = 4096;
pub const EW_SHELLCMD: u32 = 8192;
pub const EW_DODOT: u32 = 16384;
pub const EW_EMPTYOK: u32 = 32768;
pub const EW_NOTENV: u32 = 65536;
pub const FINDFILE_FILE: u32 = 0;
pub const FINDFILE_DIR: u32 = 1;
pub const FINDFILE_BOTH: u32 = 2;
pub const FIND_ANY: u32 = 1;
pub const FIND_DEFINE: u32 = 2;
pub const CHECK_PATH: u32 = 3;
pub const ACTION_SHOW: u32 = 1;
pub const ACTION_GOTO: u32 = 2;
pub const ACTION_SPLIT: u32 = 3;
pub const ACTION_SHOW_ALL: u32 = 4;
pub const SEARCH_REV: u32 = 1;
pub const SEARCH_ECHO: u32 = 2;
pub const SEARCH_MSG: u32 = 12;
pub const SEARCH_NFMSG: u32 = 8;
pub const SEARCH_OPT: u32 = 16;
pub const SEARCH_HIS: u32 = 32;
pub const SEARCH_END: u32 = 64;
pub const SEARCH_NOOF: u32 = 128;
pub const SEARCH_START: u32 = 256;
pub const SEARCH_MARK: u32 = 512;
pub const SEARCH_KEEP: u32 = 1024;
pub const SEARCH_PEEK: u32 = 2048;
pub const SEARCH_COL: u32 = 4096;
pub const FIND_IDENT: u32 = 1;
pub const FIND_STRING: u32 = 2;
pub const FIND_EVAL: u32 = 4;
pub const FIND_NOERROR: u32 = 8;
pub const FNAME_MESS: u32 = 1;
pub const FNAME_EXP: u32 = 2;
pub const FNAME_HYP: u32 = 4;
pub const FNAME_INCL: u32 = 8;
pub const FNAME_REL: u32 = 16;
pub const FNAME_UNESC: u32 = 32;
pub const GETF_SETMARK: u32 = 1;
pub const GETF_ALT: u32 = 2;
pub const GETF_SWITCH: u32 = 4;
pub const GETFILE_ERROR: u32 = 1;
pub const GETFILE_NOT_WRITTEN: u32 = 2;
pub const GETFILE_SAME_FILE: u32 = 0;
pub const GETFILE_OPEN_OTHER: i32 = -1;
pub const GETFILE_UNUSED: u32 = 8;
pub const BLN_CURBUF: u32 = 1;
pub const BLN_LISTED: u32 = 2;
pub const BLN_DUMMY: u32 = 4;
pub const BLN_NEW: u32 = 8;
pub const BLN_NOOPT: u32 = 16;
pub const BLN_DUMMY_OK: u32 = 32;
pub const KEY_OPEN_FORW: u32 = 257;
pub const KEY_OPEN_BACK: u32 = 258;
pub const KEY_COMPLETE: u32 = 259;
pub const REMAP_YES: u32 = 0;
pub const REMAP_NONE: i32 = -1;
pub const REMAP_SCRIPT: i32 = -2;
pub const REMAP_SKIP: i32 = -3;
pub const SHELL_FILTER: u32 = 1;
pub const SHELL_EXPAND: u32 = 2;
pub const SHELL_COOKED: u32 = 4;
pub const SHELL_DOOUT: u32 = 8;
pub const SHELL_SILENT: u32 = 16;
pub const SHELL_READ: u32 = 32;
pub const SHELL_WRITE: u32 = 64;
pub const NODE_NORMAL: u32 = 0;
pub const NODE_WRITABLE: u32 = 1;
pub const NODE_OTHER: u32 = 2;
pub const READ_NEW: u32 = 1;
pub const READ_FILTER: u32 = 2;
pub const READ_STDIN: u32 = 4;
pub const READ_BUFFER: u32 = 8;
pub const READ_DUMMY: u32 = 16;
pub const READ_KEEP_UNDO: u32 = 32;
pub const READ_FIFO: u32 = 64;
pub const INDENT_SET: u32 = 1;
pub const INDENT_INC: u32 = 2;
pub const INDENT_DEC: u32 = 3;
pub const FM_BACKWARD: u32 = 1;
pub const FM_FORWARD: u32 = 2;
pub const FM_BLOCKSTOP: u32 = 4;
pub const FM_SKIPCOMM: u32 = 8;
pub const DOBUF_GOTO: u32 = 0;
pub const DOBUF_SPLIT: u32 = 1;
pub const DOBUF_UNLOAD: u32 = 2;
pub const DOBUF_DEL: u32 = 3;
pub const DOBUF_WIPE: u32 = 4;
pub const DOBUF_CURRENT: u32 = 0;
pub const DOBUF_FIRST: u32 = 1;
pub const DOBUF_LAST: u32 = 2;
pub const DOBUF_MOD: u32 = 3;
pub const RE_SEARCH: u32 = 0;
pub const RE_SUBST: u32 = 1;
pub const RE_BOTH: u32 = 2;
pub const RE_LAST: u32 = 2;
pub const RE_MAGIC: u32 = 1;
pub const RE_STRING: u32 = 2;
pub const RE_STRICT: u32 = 4;
pub const RE_AUTO: u32 = 8;
pub const FPC_SAME: u32 = 1;
pub const FPC_DIFF: u32 = 2;
pub const FPC_NOTX: u32 = 4;
pub const FPC_DIFFX: u32 = 6;
pub const FPC_SAMEX: u32 = 7;
pub const ECMD_HIDE: u32 = 1;
pub const ECMD_SET_HELP: u32 = 2;
pub const ECMD_OLDBUF: u32 = 4;
pub const ECMD_FORCEIT: u32 = 8;
pub const ECMD_ADDBUF: u32 = 16;
pub const DOCMD_VERBOSE: u32 = 1;
pub const DOCMD_NOWAIT: u32 = 2;
pub const DOCMD_REPEAT: u32 = 4;
pub const DOCMD_KEYTYPED: u32 = 8;
pub const DOCMD_EXCRESET: u32 = 16;
pub const DOCMD_KEEPLINE: u32 = 32;
pub const BL_WHITE: u32 = 1;
pub const BL_SOL: u32 = 2;
pub const BL_FIX: u32 = 4;
pub const MFS_ALL: u32 = 1;
pub const MFS_STOP: u32 = 2;
pub const MFS_FLUSH: u32 = 4;
pub const MFS_ZERO: u32 = 8;
pub const BCO_ENTER: u32 = 1;
pub const BCO_ALWAYS: u32 = 2;
pub const BCO_NOHELP: u32 = 4;
pub const PUT_FIXINDENT: u32 = 1;
pub const PUT_CURSEND: u32 = 2;
pub const PUT_CURSLINE: u32 = 4;
pub const PUT_LINE: u32 = 8;
pub const PUT_LINE_SPLIT: u32 = 16;
pub const PUT_LINE_FORWARD: u32 = 32;
pub const SIN_CHANGED: u32 = 1;
pub const SIN_INSERT: u32 = 2;
pub const SIN_UNDO: u32 = 4;
pub const INSCHAR_FORMAT: u32 = 1;
pub const INSCHAR_DO_COM: u32 = 2;
pub const INSCHAR_CTRLV: u32 = 4;
pub const INSCHAR_NO_FEX: u32 = 8;
pub const INSCHAR_COM_LIST: u32 = 16;
pub const OPENLINE_DELSPACES: u32 = 1;
pub const OPENLINE_DO_COM: u32 = 2;
pub const OPENLINE_KEEPTRAIL: u32 = 4;
pub const OPENLINE_MARKFIX: u32 = 8;
pub const OPENLINE_COM_LIST: u32 = 16;
pub const HIST_CMD: u32 = 0;
pub const HIST_SEARCH: u32 = 1;
pub const HIST_EXPR: u32 = 2;
pub const HIST_INPUT: u32 = 3;
pub const HIST_DEBUG: u32 = 4;
pub const HIST_COUNT: u32 = 5;
pub const BARTYPE_VERSION: u32 = 1;
pub const BARTYPE_HISTORY: u32 = 2;
pub const BARTYPE_REGISTER: u32 = 3;
pub const BARTYPE_MARK: u32 = 4;
pub const VIMINFO_VERSION: u32 = 4;
pub const VIMINFO_VERSION_WITH_HISTORY: u32 = 2;
pub const VIMINFO_VERSION_WITH_REGISTERS: u32 = 3;
pub const VIMINFO_VERSION_WITH_MARKS: u32 = 4;
pub const DT_TAG: u32 = 1;
pub const DT_POP: u32 = 2;
pub const DT_NEXT: u32 = 3;
pub const DT_PREV: u32 = 4;
pub const DT_FIRST: u32 = 5;
pub const DT_LAST: u32 = 6;
pub const DT_SELECT: u32 = 7;
pub const DT_HELP: u32 = 8;
pub const DT_JUMP: u32 = 9;
pub const DT_CSCOPE: u32 = 10;
pub const DT_LTAG: u32 = 11;
pub const DT_FREE: u32 = 99;
pub const TAG_HELP: u32 = 1;
pub const TAG_NAMES: u32 = 2;
pub const TAG_REGEXP: u32 = 4;
pub const TAG_NOIC: u32 = 8;
pub const TAG_VERBOSE: u32 = 32;
pub const TAG_INS_COMP: u32 = 64;
pub const TAG_KEEP_LANG: u32 = 128;
pub const TAG_NO_TAGFUNC: u32 = 256;
pub const TAG_MANY: u32 = 300;
pub const VIM_GENERIC: u32 = 0;
pub const VIM_ERROR: u32 = 1;
pub const VIM_WARNING: u32 = 2;
pub const VIM_INFO: u32 = 3;
pub const VIM_QUESTION: u32 = 4;
pub const VIM_LAST_TYPE: u32 = 4;
pub const VIM_YES: u32 = 2;
pub const VIM_NO: u32 = 3;
pub const VIM_CANCEL: u32 = 4;
pub const VIM_ALL: u32 = 5;
pub const VIM_DISCARDALL: u32 = 6;
pub const WSP_ROOM: u32 = 1;
pub const WSP_VERT: u32 = 2;
pub const WSP_TOP: u32 = 4;
pub const WSP_BOT: u32 = 8;
pub const WSP_HELP: u32 = 16;
pub const WSP_BELOW: u32 = 32;
pub const WSP_ABOVE: u32 = 64;
pub const WSP_NEWLOC: u32 = 128;
pub const RESIZE_VERT: u32 = 1;
pub const RESIZE_HOR: u32 = 2;
pub const RESIZE_BOTH: u32 = 15;
pub const CCGD_AW: u32 = 1;
pub const CCGD_MULTWIN: u32 = 2;
pub const CCGD_FORCEIT: u32 = 4;
pub const CCGD_ALLBUF: u32 = 8;
pub const CCGD_EXCMD: u32 = 16;
pub const OPT_FREE: u32 = 1;
pub const OPT_GLOBAL: u32 = 2;
pub const OPT_LOCAL: u32 = 4;
pub const OPT_MODELINE: u32 = 8;
pub const OPT_WINONLY: u32 = 16;
pub const OPT_NOWIN: u32 = 32;
pub const DLG_BUTTON_SEP: u8 = 10u8;
pub const DLG_HOTKEY_CHAR: u8 = 38u8;
pub const NO_SCREEN: u32 = 2;
pub const NO_BUFFERS: u32 = 1;
pub const SEA_NONE: u32 = 0;
pub const SEA_DIALOG: u32 = 1;
pub const SEA_QUIT: u32 = 2;
pub const SEA_RECOVER: u32 = 3;
pub const MIN_SWAP_PAGE_SIZE: u32 = 1048;
pub const MAX_SWAP_PAGE_SIZE: u32 = 50000;
pub const SID_MODELINE: i32 = -1;
pub const SID_CMDARG: i32 = -2;
pub const SID_CARG: i32 = -3;
pub const SID_ENV: i32 = -4;
pub const SID_ERROR: i32 = -5;
pub const SID_NONE: i32 = -6;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const MAYBE: u32 = 2;
pub const OP_NOP: u32 = 0;
pub const OP_DELETE: u32 = 1;
pub const OP_YANK: u32 = 2;
pub const OP_CHANGE: u32 = 3;
pub const OP_LSHIFT: u32 = 4;
pub const OP_RSHIFT: u32 = 5;
pub const OP_FILTER: u32 = 6;
pub const OP_TILDE: u32 = 7;
pub const OP_INDENT: u32 = 8;
pub const OP_FORMAT: u32 = 9;
pub const OP_COLON: u32 = 10;
pub const OP_UPPER: u32 = 11;
pub const OP_LOWER: u32 = 12;
pub const OP_JOIN: u32 = 13;
pub const OP_JOIN_NS: u32 = 14;
pub const OP_ROT13: u32 = 15;
pub const OP_REPLACE: u32 = 16;
pub const OP_INSERT: u32 = 17;
pub const OP_APPEND: u32 = 18;
pub const OP_FOLD: u32 = 19;
pub const OP_FOLDOPEN: u32 = 20;
pub const OP_FOLDOPENREC: u32 = 21;
pub const OP_FOLDCLOSE: u32 = 22;
pub const OP_FOLDCLOSEREC: u32 = 23;
pub const OP_FOLDDEL: u32 = 24;
pub const OP_FOLDDELREC: u32 = 25;
pub const OP_FORMAT2: u32 = 26;
pub const OP_FUNCTION: u32 = 27;
pub const OP_NR_ADD: u32 = 28;
pub const OP_NR_SUB: u32 = 29;
pub const OP_COMMENT: u32 = 30;
pub const MCHAR: u32 = 0;
pub const MLINE: u32 = 1;
pub const MBLOCK: u32 = 2;
pub const MAUTO: u32 = 255;
pub const MIN_COLUMNS: u32 = 12;
pub const MIN_LINES: u32 = 2;
pub const STATUS_HEIGHT: u32 = 1;
pub const QF_WINHEIGHT: u32 = 10;
pub const LSIZE: u32 = 512;
pub const IOSIZE: u32 = 1025;
pub const DIALOG_MSG_SIZE: u32 = 1000;
pub const MSG_BUF_LEN: u32 = 480;
pub const MSG_BUF_CLEN: u32 = 80;
pub const FOLD_TEXT_LEN: u32 = 51;
pub const TBUFSZ: u32 = 2048;
pub const MAXMAPLEN: u32 = 50;
pub const UNDO_HASH_SIZE: u32 = 32;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const WRITEBIN: &[u8; 2usize] = b"w\0";
pub const READBIN: &[u8; 2usize] = b"r\0";
pub const APPENDBIN: &[u8; 2usize] = b"a\0";
pub const O_EXTRA: u32 = 0;
pub const SHOWCMD_COLS: u32 = 10;
pub const STL_MAX_ITEM: u32 = 80;
pub const MAX_MCO: u32 = 6;
pub const MB_MAXBYTES: u32 = 21;
pub const DFLT_EFM : & [u8 ; 607usize] = b"%*[^\"]\"%f\"%*\\D%l: %m,\"%f\"%*\\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\, line %l%*\\D%c%*[^ ] %m,%D%*\\a[%*\\d]: Entering directory %*[`']%f',%X%*\\a[%*\\d]: Leaving directory %*[`']%f',%D%*\\a: Entering directory %*[`']%f',%X%*\\a: Leaving directory %*[`']%f',%DMaking %*\\a in %f,%f|%l| %m\0" ;
pub const DFLT_GREPFORMAT: &[u8; 26usize] = b"%f:%l:%m,%f:%l%m,%f  %l%m\0";
pub const FF_DOS: &[u8; 4usize] = b"dos\0";
pub const FF_MAC: &[u8; 4usize] = b"mac\0";
pub const FF_UNIX: &[u8; 5usize] = b"unix\0";
pub const DFLT_FF: &[u8; 5usize] = b"unix\0";
pub const DFLT_FFS_VIM: &[u8; 9usize] = b"unix,dos\0";
pub const DFLT_FFS_VI: &[u8; 1usize] = b"\0";
pub const DFLT_TEXTAUTO: u32 = 0;
pub const ENC_UCSBOM: &[u8; 8usize] = b"ucs-bom\0";
pub const ENC_DFLT: &[u8; 6usize] = b"utf-8\0";
pub const EOL_UNKNOWN: i32 = -1;
pub const EOL_UNIX: u32 = 0;
pub const EOL_DOS: u32 = 1;
pub const EOL_MAC: u32 = 2;
pub const FO_WRAP: u8 = 116u8;
pub const FO_WRAP_COMS: u8 = 99u8;
pub const FO_RET_COMS: u8 = 114u8;
pub const FO_OPEN_COMS: u8 = 111u8;
pub const FO_Q_COMS: u8 = 113u8;
pub const FO_Q_NUMBER: u8 = 110u8;
pub const FO_Q_SECOND: u8 = 50u8;
pub const FO_INS_VI: u8 = 118u8;
pub const FO_INS_LONG: u8 = 108u8;
pub const FO_INS_BLANK: u8 = 98u8;
pub const FO_MBYTE_BREAK: u8 = 109u8;
pub const FO_MBYTE_JOIN: u8 = 77u8;
pub const FO_MBYTE_JOIN2: u8 = 66u8;
pub const FO_ONE_LETTER: u8 = 49u8;
pub const FO_WHITE_PAR: u8 = 119u8;
pub const FO_AUTO: u8 = 97u8;
pub const FO_REMOVE_COMS: u8 = 106u8;
pub const FO_PERIOD_ABBR: u8 = 112u8;
pub const DFLT_FO_VI: &[u8; 3usize] = b"vt\0";
pub const DFLT_FO_VIM: &[u8; 4usize] = b"tcq\0";
pub const FO_ALL: &[u8; 20usize] = b"tcroq2vlb1mMBn,awjp\0";
pub const CPO_ALTREAD: u8 = 97u8;
pub const CPO_ALTWRITE: u8 = 65u8;
pub const CPO_BAR: u8 = 98u8;
pub const CPO_BSLASH: u8 = 66u8;
pub const CPO_SEARCH: u8 = 99u8;
pub const CPO_CONCAT: u8 = 67u8;
pub const CPO_DOTTAG: u8 = 100u8;
pub const CPO_DIGRAPH: u8 = 68u8;
pub const CPO_EXECBUF: u8 = 101u8;
pub const CPO_EMPTYREGION: u8 = 69u8;
pub const CPO_FNAMER: u8 = 102u8;
pub const CPO_FNAMEW: u8 = 70u8;
pub const CPO_GOTO1: u8 = 103u8;
pub const CPO_INSEND: u8 = 72u8;
pub const CPO_INTMOD: u8 = 105u8;
pub const CPO_INDENT: u8 = 73u8;
pub const CPO_JOINSP: u8 = 106u8;
pub const CPO_ENDOFSENT: u8 = 74u8;
pub const CPO_KEYCODE: u8 = 107u8;
pub const CPO_KOFFSET: u8 = 75u8;
pub const CPO_LITERAL: u8 = 108u8;
pub const CPO_LISTWM: u8 = 76u8;
pub const CPO_SHOWMATCH: u8 = 109u8;
pub const CPO_MATCHBSL: u8 = 77u8;
pub const CPO_NUMCOL: u8 = 110u8;
pub const CPO_LINEOFF: u8 = 111u8;
pub const CPO_OVERNEW: u8 = 79u8;
pub const CPO_LISP: u8 = 112u8;
pub const CPO_FNAMEAPP: u8 = 80u8;
pub const CPO_JOINCOL: u8 = 113u8;
pub const CPO_REDO: u8 = 114u8;
pub const CPO_REMMARK: u8 = 82u8;
pub const CPO_BUFOPT: u8 = 115u8;
pub const CPO_BUFOPTGLOB: u8 = 83u8;
pub const CPO_TAGPAT: u8 = 116u8;
pub const CPO_UNDO: u8 = 117u8;
pub const CPO_BACKSPACE: u8 = 118u8;
pub const CPO_CW: u8 = 119u8;
pub const CPO_FWRITE: u8 = 87u8;
pub const CPO_ESC: u8 = 120u8;
pub const CPO_REPLCNT: u8 = 88u8;
pub const CPO_YANK: u8 = 121u8;
pub const CPO_KEEPRO: u8 = 90u8;
pub const CPO_DOLLAR: u8 = 36u8;
pub const CPO_FILTER: u8 = 33u8;
pub const CPO_MATCH: u8 = 37u8;
pub const CPO_STAR: u8 = 42u8;
pub const CPO_PLUS: u8 = 43u8;
pub const CPO_MINUS: u8 = 45u8;
pub const CPO_SPECI: u8 = 60u8;
pub const CPO_REGAPPEND: u8 = 62u8;
pub const CPO_HASH: u8 = 35u8;
pub const CPO_PARA: u8 = 123u8;
pub const CPO_TSIZE: u8 = 124u8;
pub const CPO_PRESERVE: u8 = 38u8;
pub const CPO_SUBPERCENT: u8 = 47u8;
pub const CPO_BACKSL: u8 = 92u8;
pub const CPO_CHDIR: u8 = 46u8;
pub const CPO_SCOLON: u8 = 59u8;
pub const CPO_VIM: &[u8; 8usize] = b"aABceFs\0";
pub const CPO_VI: &[u8; 53usize] = b"aAbBcCdDeEfFgHiIjJkKlLmMnoOpPqrRsStuvwWxXyZ$!%*-+<>;\0";
pub const CPO_ALL: &[u8; 60usize] =
    b"aAbBcCdDeEfFgHiIjJkKlLmMnoOpPqrRsStuvwWxXyZ$!%*-+<>#{|&/\\.;\0";
pub const WW_ALL: &[u8; 11usize] = b"bshl<>[],~\0";
pub const MOUSE_NORMAL: u8 = 110u8;
pub const MOUSE_VISUAL: u8 = 118u8;
pub const MOUSE_INSERT: u8 = 105u8;
pub const MOUSE_COMMAND: u8 = 99u8;
pub const MOUSE_HELP: u8 = 104u8;
pub const MOUSE_RETURN: u8 = 114u8;
pub const MOUSE_A: &[u8; 6usize] = b"nvich\0";
pub const MOUSE_ALL: &[u8; 8usize] = b"anvichr\0";
pub const MOUSE_NONE: u8 = 32u8;
pub const MOUSE_NONEF: u8 = 120u8;
pub const COCU_ALL: &[u8; 5usize] = b"nvic\0";
pub const SHM_RO: u8 = 114u8;
pub const SHM_MOD: u8 = 109u8;
pub const SHM_FILE: u8 = 102u8;
pub const SHM_LAST: u8 = 105u8;
pub const SHM_TEXT: u8 = 120u8;
pub const SHM_LINES: u8 = 108u8;
pub const SHM_NEW: u8 = 110u8;
pub const SHM_WRI: u8 = 119u8;
pub const SHM_A: &[u8; 9usize] = b"rmfixlnw\0";
pub const SHM_WRITE: u8 = 87u8;
pub const SHM_TRUNC: u8 = 116u8;
pub const SHM_TRUNCALL: u8 = 84u8;
pub const SHM_OVER: u8 = 111u8;
pub const SHM_OVERALL: u8 = 79u8;
pub const SHM_SEARCH: u8 = 115u8;
pub const SHM_ATTENTION: u8 = 65u8;
pub const SHM_INTRO: u8 = 73u8;
pub const SHM_COMPLETIONMENU: u8 = 99u8;
pub const SHM_RECORDING: u8 = 113u8;
pub const SHM_FILEINFO: u8 = 70u8;
pub const SHM_SEARCHCOUNT: u8 = 83u8;
pub const SHM_POSIX: &[u8; 3usize] = b"AS\0";
pub const SHM_ALL: &[u8; 22usize] = b"rmfixlnwaWtToOsAIcqFS\0";
pub const GO_TERMINAL: u8 = 33u8;
pub const GO_ASEL: u8 = 97u8;
pub const GO_ASELML: u8 = 65u8;
pub const GO_BOT: u8 = 98u8;
pub const GO_CONDIALOG: u8 = 99u8;
pub const GO_TABLINE: u8 = 101u8;
pub const GO_FORG: u8 = 102u8;
pub const GO_GREY: u8 = 103u8;
pub const GO_HORSCROLL: u8 = 104u8;
pub const GO_ICON: u8 = 105u8;
pub const GO_LEFT: u8 = 108u8;
pub const GO_VLEFT: u8 = 76u8;
pub const GO_MENUS: u8 = 109u8;
pub const GO_NOSYSMENU: u8 = 77u8;
pub const GO_POINTER: u8 = 112u8;
pub const GO_ASELPLUS: u8 = 80u8;
pub const GO_RIGHT: u8 = 114u8;
pub const GO_VRIGHT: u8 = 82u8;
pub const GO_TEAROFF: u8 = 116u8;
pub const GO_TOOLBAR: u8 = 84u8;
pub const GO_FOOTER: u8 = 70u8;
pub const GO_VERTICAL: u8 = 118u8;
pub const GO_KEEPWINSIZE: u8 = 107u8;
pub const GO_ALL: &[u8; 21usize] = b"!aAbcefFghilmMprtTvk\0";
pub const COM_NEST: u8 = 110u8;
pub const COM_BLANK: u8 = 98u8;
pub const COM_START: u8 = 115u8;
pub const COM_MIDDLE: u8 = 109u8;
pub const COM_END: u8 = 101u8;
pub const COM_AUTO_END: u8 = 120u8;
pub const COM_FIRST: u8 = 102u8;
pub const COM_LEFT: u8 = 108u8;
pub const COM_RIGHT: u8 = 114u8;
pub const COM_NOBACK: u8 = 79u8;
pub const COM_ALL: &[u8; 11usize] = b"nbsmexflrO\0";
pub const COM_MAX_LEN: u32 = 50;
pub const STL_FILEPATH: u8 = 102u8;
pub const STL_FULLPATH: u8 = 70u8;
pub const STL_FILENAME: u8 = 116u8;
pub const STL_COLUMN: u8 = 99u8;
pub const STL_VIRTCOL: u8 = 118u8;
pub const STL_VIRTCOL_ALT: u8 = 86u8;
pub const STL_LINE: u8 = 108u8;
pub const STL_NUMLINES: u8 = 76u8;
pub const STL_BUFNO: u8 = 110u8;
pub const STL_KEYMAP: u8 = 107u8;
pub const STL_OFFSET: u8 = 111u8;
pub const STL_OFFSET_X: u8 = 79u8;
pub const STL_BYTEVAL: u8 = 98u8;
pub const STL_BYTEVAL_X: u8 = 66u8;
pub const STL_ROFLAG: u8 = 114u8;
pub const STL_ROFLAG_ALT: u8 = 82u8;
pub const STL_HELPFLAG: u8 = 104u8;
pub const STL_HELPFLAG_ALT: u8 = 72u8;
pub const STL_FILETYPE: u8 = 121u8;
pub const STL_FILETYPE_ALT: u8 = 89u8;
pub const STL_PREVIEWFLAG: u8 = 119u8;
pub const STL_PREVIEWFLAG_ALT: u8 = 87u8;
pub const STL_MODIFIED: u8 = 109u8;
pub const STL_MODIFIED_ALT: u8 = 77u8;
pub const STL_QUICKFIX: u8 = 113u8;
pub const STL_PERCENTAGE: u8 = 112u8;
pub const STL_ALTPERCENT: u8 = 80u8;
pub const STL_ARGLISTSTAT: u8 = 97u8;
pub const STL_PAGENUM: u8 = 78u8;
pub const STL_VIM_EXPR: u8 = 123u8;
pub const STL_MIDDLEMARK: u8 = 61u8;
pub const STL_TRUNCMARK: u8 = 60u8;
pub const STL_USER_HL: u8 = 42u8;
pub const STL_HIGHLIGHT: u8 = 35u8;
pub const STL_TABPAGENR: u8 = 84u8;
pub const STL_TABCLOSENR: u8 = 88u8;
pub const WIM_FULL: u32 = 1;
pub const WIM_LONGEST: u32 = 2;
pub const WIM_LIST: u32 = 4;
pub const BS_INDENT: u8 = 105u8;
pub const BS_EOL: u8 = 111u8;
pub const BS_START: u8 = 115u8;
pub const LISPWORD_VALUE : & [u8 ; 746usize] = b"defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object\0" ;
pub const BKC_YES: u32 = 1;
pub const BKC_AUTO: u32 = 2;
pub const BKC_NO: u32 = 4;
pub const BKC_BREAKSYMLINK: u32 = 8;
pub const BKC_BREAKHARDLINK: u32 = 16;
pub const BO_ALL: u32 = 1;
pub const BO_BS: u32 = 2;
pub const BO_CRSR: u32 = 4;
pub const BO_COMPL: u32 = 8;
pub const BO_COPY: u32 = 16;
pub const BO_CTRLG: u32 = 32;
pub const BO_ERROR: u32 = 64;
pub const BO_ESC: u32 = 128;
pub const BO_EX: u32 = 256;
pub const BO_HANGUL: u32 = 512;
pub const BO_IM: u32 = 1024;
pub const BO_LANG: u32 = 2048;
pub const BO_MESS: u32 = 4096;
pub const BO_MATCH: u32 = 8192;
pub const BO_OPER: u32 = 16384;
pub const BO_REG: u32 = 32768;
pub const BO_SH: u32 = 65536;
pub const BO_SPELL: u32 = 131072;
pub const BO_WILD: u32 = 262144;
pub const CMP_INTERNAL: u32 = 1;
pub const CMP_KEEPASCII: u32 = 2;
pub const DY_LASTLINE: u32 = 1;
pub const DY_TRUNCATE: u32 = 2;
pub const DY_UHEX: u32 = 4;
pub const FDO_ALL: u32 = 1;
pub const FDO_BLOCK: u32 = 2;
pub const FDO_HOR: u32 = 4;
pub const FDO_MARK: u32 = 8;
pub const FDO_PERCENT: u32 = 16;
pub const FDO_QUICKFIX: u32 = 32;
pub const FDO_SEARCH: u32 = 64;
pub const FDO_TAG: u32 = 128;
pub const FDO_INSERT: u32 = 256;
pub const FDO_UNDO: u32 = 512;
pub const FDO_JUMP: u32 = 1024;
pub const SSOP_BUFFERS: u32 = 1;
pub const SSOP_WINPOS: u32 = 2;
pub const SSOP_RESIZE: u32 = 4;
pub const SSOP_WINSIZE: u32 = 8;
pub const SSOP_LOCALOPTIONS: u32 = 16;
pub const SSOP_OPTIONS: u32 = 32;
pub const SSOP_HELP: u32 = 64;
pub const SSOP_BLANK: u32 = 128;
pub const SSOP_GLOBALS: u32 = 256;
pub const SSOP_SLASH: u32 = 512;
pub const SSOP_UNIX: u32 = 1024;
pub const SSOP_SESDIR: u32 = 2048;
pub const SSOP_CURDIR: u32 = 4096;
pub const SSOP_FOLDS: u32 = 8192;
pub const SSOP_CURSOR: u32 = 16384;
pub const SSOP_TABPAGES: u32 = 32768;
pub const SSOP_TERMINAL: u32 = 65536;
pub const SWB_USEOPEN: u32 = 1;
pub const SWB_USETAB: u32 = 2;
pub const SWB_SPLIT: u32 = 4;
pub const SWB_NEWTAB: u32 = 8;
pub const SWB_VSPLIT: u32 = 16;
pub const TC_FOLLOWIC: u32 = 1;
pub const TC_IGNORE: u32 = 2;
pub const TC_MATCH: u32 = 4;
pub const TC_FOLLOWSCS: u32 = 8;
pub const TC_SMART: u32 = 16;
pub const VE_BLOCK: u32 = 5;
pub const VE_INSERT: u32 = 6;
pub const VE_ALL: u32 = 4;
pub const VE_ONEMORE: u32 = 8;
pub const NO_LOCAL_UNDOLEVEL: i32 = -123456;
pub const SDS_MAX_PREALLOC: u32 = 1048576;
pub const SDS_TYPE_5: u32 = 0;
pub const SDS_TYPE_8: u32 = 1;
pub const SDS_TYPE_16: u32 = 2;
pub const SDS_TYPE_32: u32 = 3;
pub const SDS_TYPE_64: u32 = 4;
pub const SDS_TYPE_MASK: u32 = 7;
pub const SDS_TYPE_BITS: u32 = 3;
pub const NSUBEXP: u32 = 10;
pub const NFA_MAX_BRACES: u32 = 20;
pub const NFA_MAX_STATES: u32 = 100000;
pub const NFA_TOO_EXPENSIVE: i32 = -1;
pub const AUTOMATIC_ENGINE: u32 = 0;
pub const BACKTRACKING_ENGINE: u32 = 1;
pub const NFA_ENGINE: u32 = 2;
pub const JUMPLISTSIZE: u32 = 100;
pub const TAGSTACKSIZE: u32 = 20;
pub const UH_CHANGED: u32 = 1;
pub const UH_EMPTYBUF: u32 = 2;
pub const MHT_INIT_SIZE: u32 = 64;
pub const BH_DIRTY: u32 = 1;
pub const BH_LOCKED: u32 = 2;
pub const XP_BS_NONE: u32 = 0;
pub const XP_BS_ONE: u32 = 1;
pub const XP_BS_THREE: u32 = 2;
pub const MF_SEED_LEN: u32 = 8;
pub const ML_CHNK_ADDLINE: u32 = 1;
pub const ML_CHNK_DELLINE: u32 = 2;
pub const ML_CHNK_UPDLINE: u32 = 3;
pub const ML_EMPTY: u32 = 1;
pub const ML_LINE_DIRTY: u32 = 2;
pub const ML_LOCKED_DIRTY: u32 = 4;
pub const ML_LOCKED_POS: u32 = 8;
pub const TP_FLAG_CONT_NEXT: u32 = 1;
pub const TP_FLAG_CONT_PREV: u32 = 2;
pub const PT_FLAG_INS_START_INCL: u32 = 1;
pub const PT_FLAG_INS_END_INCL: u32 = 2;
pub const PT_FLAG_COMBINE: u32 = 4;
pub const SIGN_DEF_PRIO: u32 = 10;
pub const SIGN_ANY: u32 = 0;
pub const SIGN_LINEHL: u32 = 1;
pub const SIGN_ICON: u32 = 2;
pub const SIGN_TEXT: u32 = 3;
pub const CSTACK_LEN: u32 = 50;
pub const CSF_TRUE: u32 = 1;
pub const CSF_ACTIVE: u32 = 2;
pub const CSF_ELSE: u32 = 4;
pub const CSF_WHILE: u32 = 8;
pub const CSF_FOR: u32 = 16;
pub const CSF_TRY: u32 = 256;
pub const CSF_FINALLY: u32 = 512;
pub const CSF_THROWN: u32 = 1024;
pub const CSF_CAUGHT: u32 = 2048;
pub const CSF_SILENT: u32 = 4096;
pub const CSTP_NONE: u32 = 0;
pub const CSTP_ERROR: u32 = 1;
pub const CSTP_INTERRUPT: u32 = 2;
pub const CSTP_THROW: u32 = 4;
pub const CSTP_BREAK: u32 = 8;
pub const CSTP_CONTINUE: u32 = 16;
pub const CSTP_RETURN: u32 = 24;
pub const CSTP_FINISH: u32 = 32;
pub const CSL_HAD_LOOP: u32 = 1;
pub const CSL_HAD_ENDLOOP: u32 = 2;
pub const CSL_HAD_CONT: u32 = 4;
pub const CSL_HAD_FINA: u32 = 8;
pub const _ICONV_H: u32 = 1;
pub const CONV_NONE: u32 = 0;
pub const CONV_TO_UTF8: u32 = 1;
pub const CONV_9_TO_UTF8: u32 = 2;
pub const CONV_TO_LATIN1: u32 = 3;
pub const CONV_TO_LATIN9: u32 = 4;
pub const CONV_ICONV: u32 = 5;
pub const HT_INIT_SIZE: u32 = 16;
pub const VAR_SCOPE: u32 = 1;
pub const VAR_DEF_SCOPE: u32 = 2;
pub const VAR_LOCKED: u32 = 1;
pub const VAR_FIXED: u32 = 2;
pub const DI_FLAGS_RO: u32 = 1;
pub const DI_FLAGS_RO_SBX: u32 = 2;
pub const DI_FLAGS_FIX: u32 = 4;
pub const DI_FLAGS_LOCK: u32 = 8;
pub const DI_FLAGS_ALLOC: u32 = 16;
pub const MAX_FUNC_ARGS: u32 = 20;
pub const VAR_SHORT_LEN: u32 = 20;
pub const FIXVAR_CNT: u32 = 12;
pub const INVALID_FD: i32 = -1;
pub const JO_MODE: u32 = 1;
pub const JO_IN_MODE: u32 = 2;
pub const JO_OUT_MODE: u32 = 4;
pub const JO_ERR_MODE: u32 = 8;
pub const JO_CALLBACK: u32 = 16;
pub const JO_OUT_CALLBACK: u32 = 32;
pub const JO_ERR_CALLBACK: u32 = 64;
pub const JO_CLOSE_CALLBACK: u32 = 128;
pub const JO_WAITTIME: u32 = 256;
pub const JO_TIMEOUT: u32 = 512;
pub const JO_OUT_TIMEOUT: u32 = 1024;
pub const JO_ERR_TIMEOUT: u32 = 2048;
pub const JO_PART: u32 = 4096;
pub const JO_ID: u32 = 8192;
pub const JO_STOPONEXIT: u32 = 16384;
pub const JO_EXIT_CB: u32 = 32768;
pub const JO_OUT_IO: u32 = 65536;
pub const JO_ERR_IO: u32 = 131072;
pub const JO_IN_IO: u32 = 262144;
pub const JO_OUT_NAME: u32 = 524288;
pub const JO_ERR_NAME: u32 = 1048576;
pub const JO_IN_NAME: u32 = 2097152;
pub const JO_IN_TOP: u32 = 4194304;
pub const JO_IN_BOT: u32 = 8388608;
pub const JO_OUT_BUF: u32 = 16777216;
pub const JO_ERR_BUF: u32 = 33554432;
pub const JO_IN_BUF: u32 = 67108864;
pub const JO_CHANNEL: u32 = 134217728;
pub const JO_BLOCK_WRITE: u32 = 268435456;
pub const JO_OUT_MODIFIABLE: u32 = 536870912;
pub const JO_ERR_MODIFIABLE: u32 = 1073741824;
pub const JO_ALL: u32 = 2147483647;
pub const JO2_OUT_MSG: u32 = 1;
pub const JO2_ERR_MSG: u32 = 2;
pub const JO2_TERM_NAME: u32 = 4;
pub const JO2_TERM_FINISH: u32 = 8;
pub const JO2_ENV: u32 = 16;
pub const JO2_CWD: u32 = 32;
pub const JO2_TERM_ROWS: u32 = 64;
pub const JO2_TERM_COLS: u32 = 128;
pub const JO2_VERTICAL: u32 = 256;
pub const JO2_CURWIN: u32 = 512;
pub const JO2_HIDDEN: u32 = 1024;
pub const JO2_TERM_OPENCMD: u32 = 2048;
pub const JO2_EOF_CHARS: u32 = 4096;
pub const JO2_NORESTORE: u32 = 8192;
pub const JO2_TERM_KILL: u32 = 16384;
pub const JO2_ANSI_COLORS: u32 = 32768;
pub const JO2_TTY_TYPE: u32 = 65536;
pub const JO_MODE_ALL: u32 = 15;
pub const JO_CB_ALL: u32 = 240;
pub const JO_TIMEOUT_ALL: u32 = 3584;
pub const SYNSPL_DEFAULT: u32 = 0;
pub const SYNSPL_TOP: u32 = 1;
pub const SYNSPL_NOTOP: u32 = 2;
pub const B_IMODE_USE_INSERT: i32 = -1;
pub const B_IMODE_NONE: u32 = 0;
pub const B_IMODE_LMAP: u32 = 1;
pub const B_IMODE_IM: u32 = 2;
pub const B_IMODE_LAST: u32 = 2;
pub const KEYMAP_INIT: u32 = 1;
pub const KEYMAP_LOADED: u32 = 2;
pub const BUF_HAS_QF_ENTRY: u32 = 1;
pub const BUF_HAS_LL_ENTRY: u32 = 2;
pub const DB_COUNT: u32 = 8;
pub const SNAP_HELP_IDX: u32 = 0;
pub const SNAP_AUCMD_IDX: u32 = 1;
pub const SNAP_COUNT: u32 = 2;
pub const FR_LEAF: u32 = 0;
pub const FR_ROW: u32 = 1;
pub const FR_COL: u32 = 2;
pub const MAXPOSMATCH: u32 = 8;
pub const CA_COMMAND_BUSY: u32 = 1;
pub const CA_NO_ADJ_OP_END: u32 = 2;
pub const PRINT_NUMBER_WIDTH: u32 = 8;
pub const MAX_ARG_CMDS: u32 = 10;
pub const WIN_HOR: u32 = 1;
pub const WIN_VER: u32 = 2;
pub const WIN_TABS: u32 = 3;
pub const PROF_NONE: u32 = 0;
pub const PROF_YES: u32 = 1;
pub const PROF_PAUSED: u32 = 2;
pub const VALID_PATH: u32 = 1;
pub const VALID_HEAD: u32 = 2;
pub const VV_COUNT: u32 = 0;
pub const VV_COUNT1: u32 = 1;
pub const VV_PREVCOUNT: u32 = 2;
pub const VV_ERRMSG: u32 = 3;
pub const VV_WARNINGMSG: u32 = 4;
pub const VV_STATUSMSG: u32 = 5;
pub const VV_SHELL_ERROR: u32 = 6;
pub const VV_THIS_SESSION: u32 = 7;
pub const VV_VERSION: u32 = 8;
pub const VV_LNUM: u32 = 9;
pub const VV_TERMRESPONSE: u32 = 10;
pub const VV_FNAME: u32 = 11;
pub const VV_LANG: u32 = 12;
pub const VV_LC_TIME: u32 = 13;
pub const VV_CTYPE: u32 = 14;
pub const VV_CC_FROM: u32 = 15;
pub const VV_CC_TO: u32 = 16;
pub const VV_FNAME_IN: u32 = 17;
pub const VV_FNAME_OUT: u32 = 18;
pub const VV_FNAME_NEW: u32 = 19;
pub const VV_FNAME_DIFF: u32 = 20;
pub const VV_CMDARG: u32 = 21;
pub const VV_FOLDSTART: u32 = 22;
pub const VV_FOLDEND: u32 = 23;
pub const VV_FOLDDASHES: u32 = 24;
pub const VV_FOLDLEVEL: u32 = 25;
pub const VV_PROGNAME: u32 = 26;
pub const VV_SEND_SERVER: u32 = 27;
pub const VV_DYING: u32 = 28;
pub const VV_EXCEPTION: u32 = 29;
pub const VV_THROWPOINT: u32 = 30;
pub const VV_REG: u32 = 31;
pub const VV_CMDBANG: u32 = 32;
pub const VV_INSERTMODE: u32 = 33;
pub const VV_VAL: u32 = 34;
pub const VV_KEY: u32 = 35;
pub const VV_PROFILING: u32 = 36;
pub const VV_FCS_REASON: u32 = 37;
pub const VV_FCS_CHOICE: u32 = 38;
pub const VV_BEVAL_BUFNR: u32 = 39;
pub const VV_BEVAL_WINNR: u32 = 40;
pub const VV_BEVAL_WINID: u32 = 41;
pub const VV_BEVAL_LNUM: u32 = 42;
pub const VV_BEVAL_COL: u32 = 43;
pub const VV_BEVAL_TEXT: u32 = 44;
pub const VV_SCROLLSTART: u32 = 45;
pub const VV_SWAPNAME: u32 = 46;
pub const VV_SWAPCHOICE: u32 = 47;
pub const VV_SWAPCOMMAND: u32 = 48;
pub const VV_CHAR: u32 = 49;
pub const VV_MOUSE_WIN: u32 = 50;
pub const VV_MOUSE_WINID: u32 = 51;
pub const VV_MOUSE_LNUM: u32 = 52;
pub const VV_MOUSE_COL: u32 = 53;
pub const VV_OP: u32 = 54;
pub const VV_SEARCHFORWARD: u32 = 55;
pub const VV_HLSEARCH: u32 = 56;
pub const VV_OLDFILES: u32 = 57;
pub const VV_WINDOWID: u32 = 58;
pub const VV_PROGPATH: u32 = 59;
pub const VV_COMPLETED_ITEM: u32 = 60;
pub const VV_OPTION_NEW: u32 = 61;
pub const VV_OPTION_OLD: u32 = 62;
pub const VV_OPTION_TYPE: u32 = 63;
pub const VV_ERRORS: u32 = 64;
pub const VV_FALSE: u32 = 65;
pub const VV_TRUE: u32 = 66;
pub const VV_NULL: u32 = 67;
pub const VV_NONE: u32 = 68;
pub const VV_VIM_DID_ENTER: u32 = 69;
pub const VV_TESTING: u32 = 70;
pub const VV_TYPE_NUMBER: u32 = 71;
pub const VV_TYPE_STRING: u32 = 72;
pub const VV_TYPE_FUNC: u32 = 73;
pub const VV_TYPE_LIST: u32 = 74;
pub const VV_TYPE_DICT: u32 = 75;
pub const VV_TYPE_FLOAT: u32 = 76;
pub const VV_TYPE_BOOL: u32 = 77;
pub const VV_TYPE_NONE: u32 = 78;
pub const VV_TYPE_JOB: u32 = 79;
pub const VV_TYPE_CHANNEL: u32 = 80;
pub const VV_TYPE_BLOB: u32 = 81;
pub const VV_TERMRFGRESP: u32 = 82;
pub const VV_TERMRBGRESP: u32 = 83;
pub const VV_TERMU7RESP: u32 = 84;
pub const VV_TERMSTYLERESP: u32 = 85;
pub const VV_TERMBLINKRESP: u32 = 86;
pub const VV_EVENT: u32 = 87;
pub const VV_LEN: u32 = 88;
pub const VVAL_FALSE: u32 = 0;
pub const VVAL_TRUE: u32 = 1;
pub const VVAL_NONE: u32 = 2;
pub const VVAL_NULL: u32 = 3;
pub const VAR_TYPE_NUMBER: u32 = 0;
pub const VAR_TYPE_STRING: u32 = 1;
pub const VAR_TYPE_FUNC: u32 = 2;
pub const VAR_TYPE_LIST: u32 = 3;
pub const VAR_TYPE_DICT: u32 = 4;
pub const VAR_TYPE_FLOAT: u32 = 5;
pub const VAR_TYPE_BOOL: u32 = 6;
pub const VAR_TYPE_NONE: u32 = 7;
pub const VAR_TYPE_JOB: u32 = 8;
pub const VAR_TYPE_CHANNEL: u32 = 9;
pub const VAR_TYPE_BLOB: u32 = 10;
pub const RANGE: u32 = 1;
pub const BANG: u32 = 2;
pub const EXTRA: u32 = 4;
pub const XFILE: u32 = 8;
pub const NOSPC: u32 = 16;
pub const DFLALL: u32 = 32;
pub const WHOLEFOLD: u32 = 64;
pub const NEEDARG: u32 = 128;
pub const TRLBAR: u32 = 256;
pub const REGSTR: u32 = 512;
pub const COUNT: u32 = 1024;
pub const NOTRLCOM: u32 = 2048;
pub const ZEROR: u32 = 4096;
pub const USECTRLV: u32 = 8192;
pub const EDITCMD: u32 = 16384;
pub const BUFNAME: u32 = 32768;
pub const BUFUNL: u32 = 65536;
pub const ARGOPT: u32 = 131072;
pub const SBOXOK: u32 = 262144;
pub const CMDWIN: u32 = 524288;
pub const MODIFY: u32 = 1048576;
pub const EXFLAGS: u32 = 2097152;
pub const RESTRICT: u32 = 4194304;
pub const FILES: u32 = 12;
pub const WORD1: u32 = 20;
pub const FILE1: u32 = 28;
pub const FORCE_BIN: u32 = 1;
pub const FORCE_NOBIN: u32 = 2;
pub const EXFLAG_LIST: u32 = 1;
pub const EXFLAG_NR: u32 = 2;
pub const EXFLAG_PRINT: u32 = 4;
pub const CLIP_UNNAMED: u32 = 1;
pub const CLIP_UNNAMED_PLUS: u32 = 2;
pub const DBCS_JPN: u32 = 932;
pub const DBCS_JPNU: u32 = 9932;
pub const DBCS_KOR: u32 = 949;
pub const DBCS_KORU: u32 = 9949;
pub const DBCS_CHS: u32 = 936;
pub const DBCS_CHSU: u32 = 9936;
pub const DBCS_CHT: u32 = 950;
pub const DBCS_CHTU: u32 = 9950;
pub const DBCS_2BYTE: u32 = 1;
pub const DBCS_DEBUG: i32 = -1;
pub const NSCRIPT: u32 = 15;
pub const ENC_8BIT: u32 = 1;
pub const ENC_DBCS: u32 = 2;
pub const ENC_UNICODE: u32 = 4;
pub const ENC_ENDIAN_B: u32 = 16;
pub const ENC_ENDIAN_L: u32 = 32;
pub const ENC_2BYTE: u32 = 64;
pub const ENC_4BYTE: u32 = 128;
pub const ENC_2WORD: u32 = 256;
pub const ENC_LATIN1: u32 = 512;
pub const ENC_LATIN9: u32 = 1024;
pub const ENC_MACROMAN: u32 = 2048;
pub const ICONV_E2BIG: u32 = 7;
pub const ICONV_EINVAL: u32 = 22;
pub const ICONV_EILSEQ: u32 = 84;
pub const SIGN_BYTE: u32 = 1;
pub const SIGNAL_BLOCK: i32 = -1;
pub const SIGNAL_UNBLOCK: i32 = -2;
pub const VGR_GLOBAL: u32 = 1;
pub const VGR_NOJUMP: u32 = 2;
pub const BAD_REPLACE: u8 = 63u8;
pub const BAD_KEEP: i32 = -1;
pub const BAD_DROP: i32 = -2;
pub const DOSO_NONE: u32 = 0;
pub const DOSO_VIMRC: u32 = 1;
pub const DOSO_GVIMRC: u32 = 2;
pub const VIF_WANT_INFO: u32 = 1;
pub const VIF_WANT_MARKS: u32 = 2;
pub const VIF_FORCEIT: u32 = 4;
pub const VIF_GET_OLDFILES: u32 = 8;
pub const BFA_DEL: u32 = 1;
pub const BFA_WIPE: u32 = 2;
pub const BFA_KEEP_UNDO: u32 = 4;
pub const MSCR_DOWN: u32 = 0;
pub const MSCR_UP: u32 = 1;
pub const MSCR_LEFT: i32 = -1;
pub const MSCR_RIGHT: i32 = -2;
pub const KEYLEN_PART_KEY: i32 = -1;
pub const KEYLEN_PART_MAP: i32 = -2;
pub const KEYLEN_REMOVED: u32 = 9999;
pub const FILEINFO_OK: u32 = 0;
pub const FILEINFO_ENC_FAIL: u32 = 1;
pub const FILEINFO_READ_FAIL: u32 = 2;
pub const FILEINFO_INFO_FAIL: u32 = 3;
pub const SOPT_BOOL: u32 = 1;
pub const SOPT_NUM: u32 = 2;
pub const SOPT_STRING: u32 = 4;
pub const SOPT_GLOBAL: u32 = 8;
pub const SOPT_WIN: u32 = 16;
pub const SOPT_BUF: u32 = 32;
pub const SOPT_UNSET: u32 = 64;
pub const SREQ_GLOBAL: u32 = 0;
pub const SREQ_WIN: u32 = 1;
pub const SREQ_BUF: u32 = 2;
pub const GREG_NO_EXPR: u32 = 1;
pub const GREG_EXPR_SRC: u32 = 2;
pub const GREG_LIST: u32 = 4;
pub const AUTOLOAD_CHAR: u8 = 35u8;
pub const MAX_OPEN_CHANNELS: u32 = 10;
pub const JSON_JS: u32 = 1;
pub const JSON_NO_NONE: u32 = 2;
pub const JSON_NL: u32 = 4;
pub const DIP_ALL: u32 = 1;
pub const DIP_DIR: u32 = 2;
pub const DIP_ERR: u32 = 4;
pub const DIP_START: u32 = 8;
pub const DIP_OPT: u32 = 16;
pub const DIP_NORTP: u32 = 32;
pub const DIP_NOAFTER: u32 = 64;
pub const DIP_AFTER: u32 = 128;
pub const LOWEST_WIN_ID: u32 = 1000;
pub const COPYID_INC: u32 = 2;
pub const COPYID_MASK: i32 = -2;
pub const TFN_INT: u32 = 1;
pub const TFN_QUIET: u32 = 2;
pub const TFN_NO_AUTOLOAD: u32 = 4;
pub const TFN_NO_DEREF: u32 = 8;
pub const TFN_READ_ONLY: u32 = 16;
pub const GLV_QUIET: u32 = 2;
pub const GLV_NO_AUTOLOAD: u32 = 4;
pub const GLV_READ_ONLY: u32 = 16;
pub const DO_NOT_FREE_CNT: u32 = 99999;
pub const ERROR_UNKNOWN: u32 = 0;
pub const ERROR_TOOMANY: u32 = 1;
pub const ERROR_TOOFEW: u32 = 2;
pub const ERROR_SCRIPT: u32 = 3;
pub const ERROR_DICT: u32 = 4;
pub const ERROR_NONE: u32 = 5;
pub const ERROR_OTHER: u32 = 6;
pub const ERROR_DELETED: u32 = 7;
pub const FNE_INCL_BR: u32 = 1;
pub const FNE_CHECK_START: u32 = 2;
pub const REPLACE_CR_NCHAR: i32 = -1;
pub const REPLACE_NL_NCHAR: i32 = -2;
pub const TERM_START_NOJOB: u32 = 1;
pub const TERM_START_FORCEIT: u32 = 2;
pub const TERM_START_SYSTEM: u32 = 4;
pub const SAVE_RESTORE_TITLE: u32 = 1;
pub const SAVE_RESTORE_ICON: u32 = 2;
pub const SAVE_RESTORE_BOTH: u32 = 3;
pub const APC_SAVE_FOR_UNDO: u32 = 1;
pub const APC_SUBSTITUTE: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type ino_t = __ino_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_2 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_2 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_2 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_2 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_2 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_2 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_2 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_2 = 7;
pub const _PC_VDISABLE: _bindgen_ty_2 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_2 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_2 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_2 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_2 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_2 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_2 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_2 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_2 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_2 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_2 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_2 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_2 = 20;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_3 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_3 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_3 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_3 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_3 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_3 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_3 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_3 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_3 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_3 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_3 = 10;
pub const _SC_TIMERS: _bindgen_ty_3 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_3 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_3 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_3 = 14;
pub const _SC_FSYNC: _bindgen_ty_3 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_3 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_3 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_3 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_3 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_3 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_3 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_3 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_3 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_3 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_3 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_3 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_3 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_3 = 28;
pub const _SC_VERSION: _bindgen_ty_3 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_3 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_3 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_3 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_3 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_3 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_3 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_3 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_3 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_3 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_3 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_3 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_3 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_3 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_3 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_3 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_3 = 45;
pub const _SC_2_VERSION: _bindgen_ty_3 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_3 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_3 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_3 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_3 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_3 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_3 = 52;
pub const _SC_PII: _bindgen_ty_3 = 53;
pub const _SC_PII_XTI: _bindgen_ty_3 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_3 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_3 = 56;
pub const _SC_PII_OSI: _bindgen_ty_3 = 57;
pub const _SC_POLL: _bindgen_ty_3 = 58;
pub const _SC_SELECT: _bindgen_ty_3 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_3 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_3 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_3 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_3 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_3 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_3 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_3 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_3 = 66;
pub const _SC_THREADS: _bindgen_ty_3 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_3 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_3 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_3 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_3 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_3 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_3 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_3 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_3 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_3 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_3 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_3 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_3 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_3 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_3 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_3 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_3 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_3 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_3 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_3 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_3 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_3 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_3 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_3 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_3 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_3 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_3 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_3 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_3 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_3 = 96;
pub const _SC_2_UPE: _bindgen_ty_3 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_3 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_3 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_3 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_3 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_3 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_3 = 103;
pub const _SC_INT_MAX: _bindgen_ty_3 = 104;
pub const _SC_INT_MIN: _bindgen_ty_3 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_3 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_3 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_3 = 108;
pub const _SC_NZERO: _bindgen_ty_3 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_3 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_3 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_3 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_3 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_3 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_3 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_3 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_3 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_3 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_3 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_3 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_3 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_3 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_3 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_3 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_3 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_3 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_3 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_3 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_3 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_3 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_3 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_3 = 132;
pub const _SC_BARRIERS: _bindgen_ty_3 = 133;
pub const _SC_BASE: _bindgen_ty_3 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_3 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_3 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_3 = 137;
pub const _SC_CPUTIME: _bindgen_ty_3 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_3 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_3 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_3 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_3 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_3 = 143;
pub const _SC_FIFO: _bindgen_ty_3 = 144;
pub const _SC_PIPE: _bindgen_ty_3 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_3 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_3 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_3 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_3 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_3 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_3 = 151;
pub const _SC_NETWORKING: _bindgen_ty_3 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_3 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_3 = 154;
pub const _SC_REGEXP: _bindgen_ty_3 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_3 = 156;
pub const _SC_SHELL: _bindgen_ty_3 = 157;
pub const _SC_SIGNALS: _bindgen_ty_3 = 158;
pub const _SC_SPAWN: _bindgen_ty_3 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_3 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_3 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_3 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_3 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_3 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_3 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_3 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_3 = 167;
pub const _SC_2_PBS: _bindgen_ty_3 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_3 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_3 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_3 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_3 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_3 = 173;
pub const _SC_STREAMS: _bindgen_ty_3 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_3 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_3 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_3 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_3 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_3 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_3 = 180;
pub const _SC_TRACE: _bindgen_ty_3 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_3 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_3 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_3 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_3 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_3 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_3 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_3 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_3 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_3 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_3 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_3 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_3 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_3 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_3 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_3 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_3 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_3 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_3 = 199;
pub const _SC_IPV6: _bindgen_ty_3 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_3 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_3 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_3 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_3 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_3 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_3 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_3 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_3 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_3 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_3 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_3 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_3 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_3 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_3 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_3 = 250;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_4 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_4 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_4 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_4 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_4 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_4 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_4 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_4 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_4 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_4 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_4 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_4 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_4 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_4 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_4 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_4 = 1149;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lower) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._upper) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr_lsb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_5 = -60;
pub const SI_DETHREAD: _bindgen_ty_5 = -7;
pub const SI_TKILL: _bindgen_ty_5 = -6;
pub const SI_SIGIO: _bindgen_ty_5 = -5;
pub const SI_ASYNCIO: _bindgen_ty_5 = -4;
pub const SI_MESGQ: _bindgen_ty_5 = -3;
pub const SI_TIMER: _bindgen_ty_5 = -2;
pub const SI_QUEUE: _bindgen_ty_5 = -1;
pub const SI_USER: _bindgen_ty_5 = 0;
pub const SI_KERNEL: _bindgen_ty_5 = 128;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_6 = 1;
pub const ILL_ILLOPN: _bindgen_ty_6 = 2;
pub const ILL_ILLADR: _bindgen_ty_6 = 3;
pub const ILL_ILLTRP: _bindgen_ty_6 = 4;
pub const ILL_PRVOPC: _bindgen_ty_6 = 5;
pub const ILL_PRVREG: _bindgen_ty_6 = 6;
pub const ILL_COPROC: _bindgen_ty_6 = 7;
pub const ILL_BADSTK: _bindgen_ty_6 = 8;
pub const ILL_BADIADDR: _bindgen_ty_6 = 9;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_7 = 1;
pub const FPE_INTOVF: _bindgen_ty_7 = 2;
pub const FPE_FLTDIV: _bindgen_ty_7 = 3;
pub const FPE_FLTOVF: _bindgen_ty_7 = 4;
pub const FPE_FLTUND: _bindgen_ty_7 = 5;
pub const FPE_FLTRES: _bindgen_ty_7 = 6;
pub const FPE_FLTINV: _bindgen_ty_7 = 7;
pub const FPE_FLTSUB: _bindgen_ty_7 = 8;
pub const FPE_FLTUNK: _bindgen_ty_7 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_7 = 15;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_8 = 1;
pub const SEGV_ACCERR: _bindgen_ty_8 = 2;
pub const SEGV_BNDERR: _bindgen_ty_8 = 3;
pub const SEGV_PKUERR: _bindgen_ty_8 = 4;
pub const SEGV_ACCADI: _bindgen_ty_8 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_8 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_8 = 7;
pub const SEGV_MTEAERR: _bindgen_ty_8 = 8;
pub const SEGV_MTESERR: _bindgen_ty_8 = 9;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_9 = 1;
pub const BUS_ADRERR: _bindgen_ty_9 = 2;
pub const BUS_OBJERR: _bindgen_ty_9 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_9 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_9 = 5;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_10 = 1;
pub const CLD_KILLED: _bindgen_ty_10 = 2;
pub const CLD_DUMPED: _bindgen_ty_10 = 3;
pub const CLD_TRAPPED: _bindgen_ty_10 = 4;
pub const CLD_STOPPED: _bindgen_ty_10 = 5;
pub const CLD_CONTINUED: _bindgen_ty_10 = 6;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_11 = 1;
pub const POLL_OUT: _bindgen_ty_11 = 2;
pub const POLL_MSG: _bindgen_ty_11 = 3;
pub const POLL_ERR: _bindgen_ty_11 = 4;
pub const POLL_PRI: _bindgen_ty_11 = 5;
pub const POLL_HUP: _bindgen_ty_11 = 6;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_un) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_12 = 0;
pub const SIGEV_NONE: _bindgen_ty_12 = 1;
pub const SIGEV_THREAD: _bindgen_ty_12 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_12 = 4;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_restorer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    const UNINIT: ::std::mem::MaybeUninit<_fpx_sw_bytes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extended_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_bv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    const UNINIT: ::std::mem::MaybeUninit<_fpreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).significand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    const UNINIT: ::std::mem::MaybeUninit<_fpxreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).significand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    const UNINIT: ::std::mem::MaybeUninit<_xmmreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    const UNINIT: ::std::mem::MaybeUninit<_fpstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcr_mask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._st) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._xmm) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpstate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpstate_word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r9) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r10) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r12) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r13) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r14) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r15) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsi) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbx) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdx) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rax) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcx) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gs) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trapno) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldmask) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<_xsave_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_bv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    const UNINIT: ::std::mem::MaybeUninit<_ymmh_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymmh_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    const UNINIT: ::std::mem::MaybeUninit<_xstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpstate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_hdr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymmh) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<stack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_fpxreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).significand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_xmmreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_fpstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcr_mask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._st) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._xmm) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<mcontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpregs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<ucontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        968usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpregs_mem) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__fpregs_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ssp) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__ssp)
        )
    );
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_13 = 1;
pub const SS_DISABLE: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_14 = 0;
pub const DT_FIFO: _bindgen_ty_14 = 1;
pub const DT_CHR: _bindgen_ty_14 = 2;
pub const DT_DIR: _bindgen_ty_14 = 4;
pub const DT_BLK: _bindgen_ty_14 = 6;
pub const DT_REG: _bindgen_ty_14 = 8;
pub const DT_LNK: _bindgen_ty_14 = 10;
pub const DT_SOCK: _bindgen_ty_14 = 12;
pub const DT_WHT: _bindgen_ty_14 = 14;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    const UNINIT: ::std::mem::MaybeUninit<passwd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        48usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_passwd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gecos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_dir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_shell) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(
        __uid: __uid_t,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(
        __stream: *mut FILE,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            func: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn _Xmblen(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    const UNINIT: ::std::mem::MaybeUninit<lconv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimal_point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thousands_sep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grouping) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_curr_symbol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_decimal_point) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_thousands_sep) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_grouping) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive_sign) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative_sign) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_frac_digits) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frac_digits) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_cs_precedes) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sep_by_space) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_cs_precedes) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sep_by_space) as usize - ptr as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sign_posn) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sign_posn) as usize - ptr as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_cs_precedes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sep_by_space) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_cs_precedes) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sep_by_space) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sign_posn) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sign_posn) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub type char_u = ::std::os::raw::c_uchar;
pub type short_u = ::std::os::raw::c_ushort;
pub type int_u = ::std::os::raw::c_uint;
pub type long_long_T = ::std::os::raw::c_longlong;
pub type long_long_u_T = ::std::os::raw::c_ulonglong;
pub type long_u = ::std::os::raw::c_ulong;
pub type long_i = ::std::os::raw::c_long;
pub type off_T = off_t;
pub type schar_T = char_u;
pub type sattr_T = ::std::os::raw::c_ushort;
pub type u8char_T = ::std::os::raw::c_uint;
pub const key_extra_KE_NAME: key_extra = 3;
pub const key_extra_KE_S_UP: key_extra = 4;
pub const key_extra_KE_S_DOWN: key_extra = 5;
pub const key_extra_KE_S_F1: key_extra = 6;
pub const key_extra_KE_S_F2: key_extra = 7;
pub const key_extra_KE_S_F3: key_extra = 8;
pub const key_extra_KE_S_F4: key_extra = 9;
pub const key_extra_KE_S_F5: key_extra = 10;
pub const key_extra_KE_S_F6: key_extra = 11;
pub const key_extra_KE_S_F7: key_extra = 12;
pub const key_extra_KE_S_F8: key_extra = 13;
pub const key_extra_KE_S_F9: key_extra = 14;
pub const key_extra_KE_S_F10: key_extra = 15;
pub const key_extra_KE_S_F11: key_extra = 16;
pub const key_extra_KE_S_F12: key_extra = 17;
pub const key_extra_KE_S_F13: key_extra = 18;
pub const key_extra_KE_S_F14: key_extra = 19;
pub const key_extra_KE_S_F15: key_extra = 20;
pub const key_extra_KE_S_F16: key_extra = 21;
pub const key_extra_KE_S_F17: key_extra = 22;
pub const key_extra_KE_S_F18: key_extra = 23;
pub const key_extra_KE_S_F19: key_extra = 24;
pub const key_extra_KE_S_F20: key_extra = 25;
pub const key_extra_KE_S_F21: key_extra = 26;
pub const key_extra_KE_S_F22: key_extra = 27;
pub const key_extra_KE_S_F23: key_extra = 28;
pub const key_extra_KE_S_F24: key_extra = 29;
pub const key_extra_KE_S_F25: key_extra = 30;
pub const key_extra_KE_S_F26: key_extra = 31;
pub const key_extra_KE_S_F27: key_extra = 32;
pub const key_extra_KE_S_F28: key_extra = 33;
pub const key_extra_KE_S_F29: key_extra = 34;
pub const key_extra_KE_S_F30: key_extra = 35;
pub const key_extra_KE_S_F31: key_extra = 36;
pub const key_extra_KE_S_F32: key_extra = 37;
pub const key_extra_KE_S_F33: key_extra = 38;
pub const key_extra_KE_S_F34: key_extra = 39;
pub const key_extra_KE_S_F35: key_extra = 40;
pub const key_extra_KE_S_F36: key_extra = 41;
pub const key_extra_KE_S_F37: key_extra = 42;
pub const key_extra_KE_MOUSE: key_extra = 43;
pub const key_extra_KE_LEFTMOUSE: key_extra = 44;
pub const key_extra_KE_LEFTDRAG: key_extra = 45;
pub const key_extra_KE_LEFTRELEASE: key_extra = 46;
pub const key_extra_KE_MIDDLEMOUSE: key_extra = 47;
pub const key_extra_KE_MIDDLEDRAG: key_extra = 48;
pub const key_extra_KE_MIDDLERELEASE: key_extra = 49;
pub const key_extra_KE_RIGHTMOUSE: key_extra = 50;
pub const key_extra_KE_RIGHTDRAG: key_extra = 51;
pub const key_extra_KE_RIGHTRELEASE: key_extra = 52;
pub const key_extra_KE_IGNORE: key_extra = 53;
pub const key_extra_KE_TAB: key_extra = 54;
pub const key_extra_KE_S_TAB_OLD: key_extra = 55;
pub const key_extra_KE_SNIFF_UNUSED: key_extra = 56;
pub const key_extra_KE_XF1: key_extra = 57;
pub const key_extra_KE_XF2: key_extra = 58;
pub const key_extra_KE_XF3: key_extra = 59;
pub const key_extra_KE_XF4: key_extra = 60;
pub const key_extra_KE_XEND: key_extra = 61;
pub const key_extra_KE_ZEND: key_extra = 62;
pub const key_extra_KE_XHOME: key_extra = 63;
pub const key_extra_KE_ZHOME: key_extra = 64;
pub const key_extra_KE_XUP: key_extra = 65;
pub const key_extra_KE_XDOWN: key_extra = 66;
pub const key_extra_KE_XLEFT: key_extra = 67;
pub const key_extra_KE_XRIGHT: key_extra = 68;
pub const key_extra_KE_LEFTMOUSE_NM: key_extra = 69;
pub const key_extra_KE_LEFTRELEASE_NM: key_extra = 70;
pub const key_extra_KE_S_XF1: key_extra = 71;
pub const key_extra_KE_S_XF2: key_extra = 72;
pub const key_extra_KE_S_XF3: key_extra = 73;
pub const key_extra_KE_S_XF4: key_extra = 74;
pub const key_extra_KE_MOUSEDOWN: key_extra = 75;
pub const key_extra_KE_MOUSEUP: key_extra = 76;
pub const key_extra_KE_MOUSELEFT: key_extra = 77;
pub const key_extra_KE_MOUSERIGHT: key_extra = 78;
pub const key_extra_KE_KINS: key_extra = 79;
pub const key_extra_KE_KDEL: key_extra = 80;
pub const key_extra_KE_CSI: key_extra = 81;
pub const key_extra_KE_SNR: key_extra = 82;
pub const key_extra_KE_PLUG: key_extra = 83;
pub const key_extra_KE_CMDWIN: key_extra = 84;
pub const key_extra_KE_C_LEFT: key_extra = 85;
pub const key_extra_KE_C_RIGHT: key_extra = 86;
pub const key_extra_KE_C_HOME: key_extra = 87;
pub const key_extra_KE_C_END: key_extra = 88;
pub const key_extra_KE_X1MOUSE: key_extra = 89;
pub const key_extra_KE_X1DRAG: key_extra = 90;
pub const key_extra_KE_X1RELEASE: key_extra = 91;
pub const key_extra_KE_X2MOUSE: key_extra = 92;
pub const key_extra_KE_X2DRAG: key_extra = 93;
pub const key_extra_KE_X2RELEASE: key_extra = 94;
pub const key_extra_KE_DROP: key_extra = 95;
pub const key_extra_KE_CURSORHOLD: key_extra = 96;
pub const key_extra_KE_NOP: key_extra = 97;
pub const key_extra_KE_FOCUSGAINED: key_extra = 98;
pub const key_extra_KE_FOCUSLOST: key_extra = 99;
pub const key_extra_KE_MOUSEMOVE: key_extra = 100;
pub const key_extra_KE_CANCEL: key_extra = 101;
pub type key_extra = ::std::os::raw::c_uint;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
// pub const FP_NAN: _bindgen_ty_15 = 0;
// pub const FP_INFINITE: _bindgen_ty_15 = 1;
// pub const FP_ZERO: _bindgen_ty_15 = 2;
// pub const FP_SUBNORMAL: _bindgen_ty_15 = 3;
// pub const FP_NORMAL: _bindgen_ty_15 = 4;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const SpecialKey_KS_NAME: SpecialKey = 0;
pub const SpecialKey_KS_CE: SpecialKey = 1;
pub const SpecialKey_KS_AL: SpecialKey = 2;
pub const SpecialKey_KS_CAL: SpecialKey = 3;
pub const SpecialKey_KS_DL: SpecialKey = 4;
pub const SpecialKey_KS_CDL: SpecialKey = 5;
pub const SpecialKey_KS_CS: SpecialKey = 6;
pub const SpecialKey_KS_CL: SpecialKey = 7;
pub const SpecialKey_KS_CD: SpecialKey = 8;
pub const SpecialKey_KS_UT: SpecialKey = 9;
pub const SpecialKey_KS_DA: SpecialKey = 10;
pub const SpecialKey_KS_DB: SpecialKey = 11;
pub const SpecialKey_KS_VI: SpecialKey = 12;
pub const SpecialKey_KS_VE: SpecialKey = 13;
pub const SpecialKey_KS_VS: SpecialKey = 14;
pub const SpecialKey_KS_CVS: SpecialKey = 15;
pub const SpecialKey_KS_CSH: SpecialKey = 16;
pub const SpecialKey_KS_CRC: SpecialKey = 17;
pub const SpecialKey_KS_CRS: SpecialKey = 18;
pub const SpecialKey_KS_ME: SpecialKey = 19;
pub const SpecialKey_KS_MR: SpecialKey = 20;
pub const SpecialKey_KS_MD: SpecialKey = 21;
pub const SpecialKey_KS_SE: SpecialKey = 22;
pub const SpecialKey_KS_SO: SpecialKey = 23;
pub const SpecialKey_KS_CZH: SpecialKey = 24;
pub const SpecialKey_KS_CZR: SpecialKey = 25;
pub const SpecialKey_KS_UE: SpecialKey = 26;
pub const SpecialKey_KS_US: SpecialKey = 27;
pub const SpecialKey_KS_UCE: SpecialKey = 28;
pub const SpecialKey_KS_UCS: SpecialKey = 29;
pub const SpecialKey_KS_STE: SpecialKey = 30;
pub const SpecialKey_KS_STS: SpecialKey = 31;
pub const SpecialKey_KS_MS: SpecialKey = 32;
pub const SpecialKey_KS_CM: SpecialKey = 33;
pub const SpecialKey_KS_SR: SpecialKey = 34;
pub const SpecialKey_KS_CRI: SpecialKey = 35;
pub const SpecialKey_KS_VB: SpecialKey = 36;
pub const SpecialKey_KS_KS: SpecialKey = 37;
pub const SpecialKey_KS_KE: SpecialKey = 38;
pub const SpecialKey_KS_TI: SpecialKey = 39;
pub const SpecialKey_KS_TE: SpecialKey = 40;
pub const SpecialKey_KS_BC: SpecialKey = 41;
pub const SpecialKey_KS_CCS: SpecialKey = 42;
pub const SpecialKey_KS_CCO: SpecialKey = 43;
pub const SpecialKey_KS_CSF: SpecialKey = 44;
pub const SpecialKey_KS_CSB: SpecialKey = 45;
pub const SpecialKey_KS_XS: SpecialKey = 46;
pub const SpecialKey_KS_XN: SpecialKey = 47;
pub const SpecialKey_KS_MB: SpecialKey = 48;
pub const SpecialKey_KS_CAF: SpecialKey = 49;
pub const SpecialKey_KS_CAB: SpecialKey = 50;
pub const SpecialKey_KS_LE: SpecialKey = 51;
pub const SpecialKey_KS_ND: SpecialKey = 52;
pub const SpecialKey_KS_CIS: SpecialKey = 53;
pub const SpecialKey_KS_CIE: SpecialKey = 54;
pub const SpecialKey_KS_CSC: SpecialKey = 55;
pub const SpecialKey_KS_CEC: SpecialKey = 56;
pub const SpecialKey_KS_TS: SpecialKey = 57;
pub const SpecialKey_KS_FS: SpecialKey = 58;
pub const SpecialKey_KS_CWP: SpecialKey = 59;
pub const SpecialKey_KS_CGP: SpecialKey = 60;
pub const SpecialKey_KS_CWS: SpecialKey = 61;
pub const SpecialKey_KS_CRV: SpecialKey = 62;
pub const SpecialKey_KS_RFG: SpecialKey = 63;
pub const SpecialKey_KS_RBG: SpecialKey = 64;
pub const SpecialKey_KS_CSI: SpecialKey = 65;
pub const SpecialKey_KS_CEI: SpecialKey = 66;
pub const SpecialKey_KS_CSR: SpecialKey = 67;
pub const SpecialKey_KS_CSV: SpecialKey = 68;
pub const SpecialKey_KS_OP: SpecialKey = 69;
pub const SpecialKey_KS_U7: SpecialKey = 70;
pub const SpecialKey_KS_8F: SpecialKey = 71;
pub const SpecialKey_KS_8B: SpecialKey = 72;
pub const SpecialKey_KS_CBE: SpecialKey = 73;
pub const SpecialKey_KS_CBD: SpecialKey = 74;
pub const SpecialKey_KS_CPS: SpecialKey = 75;
pub const SpecialKey_KS_CPE: SpecialKey = 76;
pub const SpecialKey_KS_CST: SpecialKey = 77;
pub const SpecialKey_KS_CRT: SpecialKey = 78;
pub const SpecialKey_KS_SSI: SpecialKey = 79;
pub const SpecialKey_KS_SRI: SpecialKey = 80;
pub type SpecialKey = ::std::os::raw::c_uint;
extern "C" {
    pub static mut term_strings: [*mut char_u; 0usize];
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type wint_t = ::std::os::raw::c_uint;
pub type wctype_t = ::std::os::raw::c_ulong;
pub const __ISwupper: _bindgen_ty_16 = 0;
pub const __ISwlower: _bindgen_ty_16 = 1;
pub const __ISwalpha: _bindgen_ty_16 = 2;
pub const __ISwdigit: _bindgen_ty_16 = 3;
pub const __ISwxdigit: _bindgen_ty_16 = 4;
pub const __ISwspace: _bindgen_ty_16 = 5;
pub const __ISwprint: _bindgen_ty_16 = 6;
pub const __ISwgraph: _bindgen_ty_16 = 7;
pub const __ISwblank: _bindgen_ty_16 = 8;
pub const __ISwcntrl: _bindgen_ty_16 = 9;
pub const __ISwpunct: _bindgen_ty_16 = 10;
pub const __ISwalnum: _bindgen_ty_16 = 11;
pub const _ISwupper: _bindgen_ty_16 = 16777216;
pub const _ISwlower: _bindgen_ty_16 = 33554432;
pub const _ISwalpha: _bindgen_ty_16 = 67108864;
pub const _ISwdigit: _bindgen_ty_16 = 134217728;
pub const _ISwxdigit: _bindgen_ty_16 = 268435456;
pub const _ISwspace: _bindgen_ty_16 = 536870912;
pub const _ISwprint: _bindgen_ty_16 = 1073741824;
pub const _ISwgraph: _bindgen_ty_16 = -2147483648;
pub const _ISwblank: _bindgen_ty_16 = 65536;
pub const _ISwcntrl: _bindgen_ty_16 = 131072;
pub const _ISwpunct: _bindgen_ty_16 = 262144;
pub const _ISwalnum: _bindgen_ty_16 = 524288;
pub type _bindgen_ty_16 = ::std::os::raw::c_int;
extern "C" {
    pub fn iswalnum(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype(__property: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn iswctype(__wc: wint_t, __desc: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towlower(__wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towupper(__wc: wint_t) -> wint_t;
}
pub type wctrans_t = *const __int32_t;
extern "C" {
    pub fn wctrans(__property: *const ::std::os::raw::c_char) -> wctrans_t;
}
extern "C" {
    pub fn towctrans(__wc: wint_t, __desc: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn iswalnum_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(__property: *const ::std::os::raw::c_char, __locale: locale_t) -> wctype_t;
}
extern "C" {
    pub fn iswctype_l(__wc: wint_t, __desc: wctype_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towlower_l(__wc: wint_t, __locale: locale_t) -> wint_t;
}
extern "C" {
    pub fn towupper_l(__wc: wint_t, __locale: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(__property: *const ::std::os::raw::c_char, __locale: locale_t) -> wctrans_t;
}
extern "C" {
    pub fn towctrans_l(__wc: wint_t, __desc: wctrans_t, __locale: locale_t) -> wint_t;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const btype_T_BVAL_NR: btype_T = 0;
pub const btype_T_BVAL_STRING: btype_T = 1;
pub const btype_T_BVAL_EMPTY: btype_T = 2;
pub type btype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bval_T {
    pub bv_type: btype_T,
    pub bv_nr: ::std::os::raw::c_long,
    pub bv_string: *mut char_u,
    pub bv_len: ::std::os::raw::c_int,
    pub bv_allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bval_T() {
    const UNINIT: ::std::mem::MaybeUninit<bval_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bval_T>(),
        32usize,
        concat!("Size of: ", stringify!(bval_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bval_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bval_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_nr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_allocated) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_allocated)
        )
    );
}
pub const auto_event_EVENT_BUFADD: auto_event = 0;
pub const auto_event_EVENT_BUFDELETE: auto_event = 1;
pub const auto_event_EVENT_BUFENTER: auto_event = 2;
pub const auto_event_EVENT_BUFFILEPOST: auto_event = 3;
pub const auto_event_EVENT_BUFFILEPRE: auto_event = 4;
pub const auto_event_EVENT_BUFHIDDEN: auto_event = 5;
pub const auto_event_EVENT_BUFLEAVE: auto_event = 6;
pub const auto_event_EVENT_BUFNEW: auto_event = 7;
pub const auto_event_EVENT_BUFNEWFILE: auto_event = 8;
pub const auto_event_EVENT_BUFREADCMD: auto_event = 9;
pub const auto_event_EVENT_BUFREADPOST: auto_event = 10;
pub const auto_event_EVENT_BUFREADPRE: auto_event = 11;
pub const auto_event_EVENT_BUFUNLOAD: auto_event = 12;
pub const auto_event_EVENT_BUFWINENTER: auto_event = 13;
pub const auto_event_EVENT_BUFWINLEAVE: auto_event = 14;
pub const auto_event_EVENT_BUFWIPEOUT: auto_event = 15;
pub const auto_event_EVENT_BUFWRITECMD: auto_event = 16;
pub const auto_event_EVENT_BUFWRITEPOST: auto_event = 17;
pub const auto_event_EVENT_BUFWRITEPRE: auto_event = 18;
pub const auto_event_EVENT_CMDLINECHANGED: auto_event = 19;
pub const auto_event_EVENT_CMDLINEENTER: auto_event = 20;
pub const auto_event_EVENT_CMDLINELEAVE: auto_event = 21;
pub const auto_event_EVENT_CMDUNDEFINED: auto_event = 22;
pub const auto_event_EVENT_CMDWINENTER: auto_event = 23;
pub const auto_event_EVENT_CMDWINLEAVE: auto_event = 24;
pub const auto_event_EVENT_COLORSCHEME: auto_event = 25;
pub const auto_event_EVENT_COLORSCHEMEPRE: auto_event = 26;
pub const auto_event_EVENT_COMPLETECHANGED: auto_event = 27;
pub const auto_event_EVENT_COMPLETEDONE: auto_event = 28;
pub const auto_event_EVENT_CURSORHOLD: auto_event = 29;
pub const auto_event_EVENT_CURSORHOLDI: auto_event = 30;
pub const auto_event_EVENT_CURSORMOVED: auto_event = 31;
pub const auto_event_EVENT_CURSORMOVEDI: auto_event = 32;
pub const auto_event_EVENT_DIFFUPDATED: auto_event = 33;
pub const auto_event_EVENT_DIRCHANGED: auto_event = 34;
pub const auto_event_EVENT_ENCODINGCHANGED: auto_event = 35;
pub const auto_event_EVENT_EXITPRE: auto_event = 36;
pub const auto_event_EVENT_FILEAPPENDCMD: auto_event = 37;
pub const auto_event_EVENT_FILEAPPENDPOST: auto_event = 38;
pub const auto_event_EVENT_FILEAPPENDPRE: auto_event = 39;
pub const auto_event_EVENT_FILECHANGEDRO: auto_event = 40;
pub const auto_event_EVENT_FILECHANGEDSHELL: auto_event = 41;
pub const auto_event_EVENT_FILECHANGEDSHELLPOST: auto_event = 42;
pub const auto_event_EVENT_FILEREADCMD: auto_event = 43;
pub const auto_event_EVENT_FILEREADPOST: auto_event = 44;
pub const auto_event_EVENT_FILEREADPRE: auto_event = 45;
pub const auto_event_EVENT_FILETYPE: auto_event = 46;
pub const auto_event_EVENT_FILEWRITECMD: auto_event = 47;
pub const auto_event_EVENT_FILEWRITEPOST: auto_event = 48;
pub const auto_event_EVENT_FILEWRITEPRE: auto_event = 49;
pub const auto_event_EVENT_FILTERREADPOST: auto_event = 50;
pub const auto_event_EVENT_FILTERREADPRE: auto_event = 51;
pub const auto_event_EVENT_FILTERWRITEPOST: auto_event = 52;
pub const auto_event_EVENT_FILTERWRITEPRE: auto_event = 53;
pub const auto_event_EVENT_FOCUSGAINED: auto_event = 54;
pub const auto_event_EVENT_FOCUSLOST: auto_event = 55;
pub const auto_event_EVENT_FUNCUNDEFINED: auto_event = 56;
pub const auto_event_EVENT_GUIENTER: auto_event = 57;
pub const auto_event_EVENT_GUIFAILED: auto_event = 58;
pub const auto_event_EVENT_INSERTCHANGE: auto_event = 59;
pub const auto_event_EVENT_INSERTCHARPRE: auto_event = 60;
pub const auto_event_EVENT_INSERTENTER: auto_event = 61;
pub const auto_event_EVENT_INSERTLEAVE: auto_event = 62;
pub const auto_event_EVENT_MENUPOPUP: auto_event = 63;
pub const auto_event_EVENT_OPTIONSET: auto_event = 64;
pub const auto_event_EVENT_QUICKFIXCMDPOST: auto_event = 65;
pub const auto_event_EVENT_QUICKFIXCMDPRE: auto_event = 66;
pub const auto_event_EVENT_QUITPRE: auto_event = 67;
pub const auto_event_EVENT_REMOTEREPLY: auto_event = 68;
pub const auto_event_EVENT_SESSIONLOADPOST: auto_event = 69;
pub const auto_event_EVENT_SHELLCMDPOST: auto_event = 70;
pub const auto_event_EVENT_SHELLFILTERPOST: auto_event = 71;
pub const auto_event_EVENT_SOURCECMD: auto_event = 72;
pub const auto_event_EVENT_SOURCEPRE: auto_event = 73;
pub const auto_event_EVENT_SOURCEPOST: auto_event = 74;
pub const auto_event_EVENT_SPELLFILEMISSING: auto_event = 75;
pub const auto_event_EVENT_STDINREADPOST: auto_event = 76;
pub const auto_event_EVENT_STDINREADPRE: auto_event = 77;
pub const auto_event_EVENT_SWAPEXISTS: auto_event = 78;
pub const auto_event_EVENT_SYNTAX: auto_event = 79;
pub const auto_event_EVENT_TABCLOSED: auto_event = 80;
pub const auto_event_EVENT_TABENTER: auto_event = 81;
pub const auto_event_EVENT_TABLEAVE: auto_event = 82;
pub const auto_event_EVENT_TABNEW: auto_event = 83;
pub const auto_event_EVENT_TERMCHANGED: auto_event = 84;
pub const auto_event_EVENT_TERMINALOPEN: auto_event = 85;
pub const auto_event_EVENT_TERMRESPONSE: auto_event = 86;
pub const auto_event_EVENT_TEXTCHANGED: auto_event = 87;
pub const auto_event_EVENT_TEXTCHANGEDI: auto_event = 88;
pub const auto_event_EVENT_TEXTCHANGEDP: auto_event = 89;
pub const auto_event_EVENT_TEXTYANKPOST: auto_event = 90;
pub const auto_event_EVENT_USER: auto_event = 91;
pub const auto_event_EVENT_VIMENTER: auto_event = 92;
pub const auto_event_EVENT_VIMLEAVE: auto_event = 93;
pub const auto_event_EVENT_VIMLEAVEPRE: auto_event = 94;
pub const auto_event_EVENT_VIMRESIZED: auto_event = 95;
pub const auto_event_EVENT_WINENTER: auto_event = 96;
pub const auto_event_EVENT_WINLEAVE: auto_event = 97;
pub const auto_event_EVENT_WINNEW: auto_event = 98;
pub const auto_event_NUM_EVENTS: auto_event = 99;
pub type auto_event = ::std::os::raw::c_uint;
pub use self::auto_event as event_T;
pub const hlf_T_HLF_8: hlf_T = 0;
pub const hlf_T_HLF_EOB: hlf_T = 1;
pub const hlf_T_HLF_AT: hlf_T = 2;
pub const hlf_T_HLF_D: hlf_T = 3;
pub const hlf_T_HLF_E: hlf_T = 4;
pub const hlf_T_HLF_H: hlf_T = 5;
pub const hlf_T_HLF_I: hlf_T = 6;
pub const hlf_T_HLF_L: hlf_T = 7;
pub const hlf_T_HLF_M: hlf_T = 8;
pub const hlf_T_HLF_CM: hlf_T = 9;
pub const hlf_T_HLF_N: hlf_T = 10;
pub const hlf_T_HLF_CLN: hlf_T = 11;
pub const hlf_T_HLF_R: hlf_T = 12;
pub const hlf_T_HLF_S: hlf_T = 13;
pub const hlf_T_HLF_SNC: hlf_T = 14;
pub const hlf_T_HLF_C: hlf_T = 15;
pub const hlf_T_HLF_T: hlf_T = 16;
pub const hlf_T_HLF_V: hlf_T = 17;
pub const hlf_T_HLF_VNC: hlf_T = 18;
pub const hlf_T_HLF_W: hlf_T = 19;
pub const hlf_T_HLF_WM: hlf_T = 20;
pub const hlf_T_HLF_FL: hlf_T = 21;
pub const hlf_T_HLF_FC: hlf_T = 22;
pub const hlf_T_HLF_ADD: hlf_T = 23;
pub const hlf_T_HLF_CHD: hlf_T = 24;
pub const hlf_T_HLF_DED: hlf_T = 25;
pub const hlf_T_HLF_TXD: hlf_T = 26;
pub const hlf_T_HLF_CONCEAL: hlf_T = 27;
pub const hlf_T_HLF_SC: hlf_T = 28;
pub const hlf_T_HLF_SPB: hlf_T = 29;
pub const hlf_T_HLF_SPC: hlf_T = 30;
pub const hlf_T_HLF_SPR: hlf_T = 31;
pub const hlf_T_HLF_SPL: hlf_T = 32;
pub const hlf_T_HLF_PNI: hlf_T = 33;
pub const hlf_T_HLF_PSI: hlf_T = 34;
pub const hlf_T_HLF_PSB: hlf_T = 35;
pub const hlf_T_HLF_PST: hlf_T = 36;
pub const hlf_T_HLF_TP: hlf_T = 37;
pub const hlf_T_HLF_TPS: hlf_T = 38;
pub const hlf_T_HLF_TPF: hlf_T = 39;
pub const hlf_T_HLF_CUC: hlf_T = 40;
pub const hlf_T_HLF_CUL: hlf_T = 41;
pub const hlf_T_HLF_MC: hlf_T = 42;
pub const hlf_T_HLF_QFL: hlf_T = 43;
pub const hlf_T_HLF_ST: hlf_T = 44;
pub const hlf_T_HLF_STNC: hlf_T = 45;
pub const hlf_T_HLF_COUNT: hlf_T = 46;
pub type hlf_T = ::std::os::raw::c_uint;
pub type UINT32_T = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
pub type linenr_T = ::std::os::raw::c_long;
pub type colnr_T = ::std::os::raw::c_int;
pub type disptick_T = ::std::os::raw::c_ushort;
pub type vim_acl_T = *mut ::std::os::raw::c_void;
pub type proftime_T = timeval;
pub type time_T = time_t;
pub type sock_T = ::std::os::raw::c_int;
extern "C" {
    pub static mut p_aleph: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_acd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ambw: *mut char_u;
}
extern "C" {
    pub static mut p_emoji: *mut char_u;
}
extern "C" {
    pub static mut p_ar: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_aw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_awa: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_bs: *mut char_u;
}
extern "C" {
    pub static mut p_bg: *mut char_u;
}
extern "C" {
    pub static mut p_bk: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_bkc: *mut char_u;
}
extern "C" {
    pub static mut bkc_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_bdir: *mut char_u;
}
extern "C" {
    pub static mut p_bex: *mut char_u;
}
extern "C" {
    pub static mut p_bo: *mut char_u;
}
extern "C" {
    pub static mut bo_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_bsk: *mut char_u;
}
extern "C" {
    pub static mut p_breakat: *mut char_u;
}
extern "C" {
    pub static mut p_cmp: *mut char_u;
}
extern "C" {
    pub static mut cmp_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_enc: *mut char_u;
}
extern "C" {
    pub static mut p_deco: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ccv: *mut char_u;
}
extern "C" {
    pub static mut p_ch: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_codelens: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_cp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_cpo: *mut char_u;
}
extern "C" {
    pub static mut p_debug: *mut char_u;
}
extern "C" {
    pub static mut p_def: *mut char_u;
}
extern "C" {
    pub static mut p_inc: *mut char_u;
}
extern "C" {
    pub static mut p_dip: *mut char_u;
}
extern "C" {
    pub static mut p_dex: *mut char_u;
}
extern "C" {
    pub static mut p_dir: *mut char_u;
}
extern "C" {
    pub static mut p_dy: *mut char_u;
}
extern "C" {
    pub static mut dy_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_ed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ead: *mut char_u;
}
extern "C" {
    pub static mut p_ea: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ep: *mut char_u;
}
extern "C" {
    pub static mut p_eb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ef: *mut char_u;
}
extern "C" {
    pub static mut p_efm: *mut char_u;
}
extern "C" {
    pub static mut p_gefm: *mut char_u;
}
extern "C" {
    pub static mut p_gp: *mut char_u;
}
extern "C" {
    pub static mut p_ei: *mut char_u;
}
extern "C" {
    pub static mut p_ek: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_exrc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_fencs: *mut char_u;
}
extern "C" {
    pub static mut p_ffs: *mut char_u;
}
extern "C" {
    pub static mut p_fic: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fcl: *mut char_u;
}
extern "C" {
    pub static mut p_fdls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fdo: *mut char_u;
}
extern "C" {
    pub static mut fdo_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_fp: *mut char_u;
}
extern "C" {
    pub static mut p_fs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_gd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_guifont: *mut char_u;
}
extern "C" {
    pub static mut p_prompt: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hf: *mut char_u;
}
extern "C" {
    pub static mut p_hh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_hlg: *mut char_u;
}
extern "C" {
    pub static mut p_hid: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hl: *mut char_u;
}
extern "C" {
    pub static mut p_hls: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hi: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_hkmap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hkmapp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_arshape: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_imaf: *mut char_u;
}
extern "C" {
    pub static mut p_imsf: *mut char_u;
}
extern "C" {
    pub static mut p_imcmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_imdisable: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_is: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_im: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_isf: *mut char_u;
}
extern "C" {
    pub static mut p_isi: *mut char_u;
}
extern "C" {
    pub static mut p_isp: *mut char_u;
}
extern "C" {
    pub static mut p_js: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_keydisplay: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_kp: *mut char_u;
}
extern "C" {
    pub static mut p_km: *mut char_u;
}
extern "C" {
    pub static mut p_langmap: *mut char_u;
}
extern "C" {
    pub static mut p_lnr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_lrm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_stal: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_linespace: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_lcs: *mut char_u;
}
extern "C" {
    pub static mut p_lz: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_lpl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_magic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_menc: *mut char_u;
}
extern "C" {
    pub static mut p_mef: *mut char_u;
}
extern "C" {
    pub static mut p_mp: *mut char_u;
}
extern "C" {
    pub static mut p_scl: *mut char_u;
}
extern "C" {
    pub static mut p_mat: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mco: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mfd: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmd: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmp: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmt: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_minimap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_mle: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mouse: *mut char_u;
}
extern "C" {
    pub static mut p_mousem: *mut char_u;
}
extern "C" {
    pub static mut p_mouset: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_opfunc: *mut char_u;
}
extern "C" {
    pub static mut p_para: *mut char_u;
}
extern "C" {
    pub static mut p_paste: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_pt: *mut char_u;
}
extern "C" {
    pub static mut p_pex: *mut char_u;
}
extern "C" {
    pub static mut p_pm: *mut char_u;
}
extern "C" {
    pub static mut p_path: *mut char_u;
}
extern "C" {
    pub static mut p_cdpath: *mut char_u;
}
extern "C" {
    pub static mut p_rdt: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_remap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_re: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_report: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_pvh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ari: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ri: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_pp: *mut char_u;
}
extern "C" {
    pub static mut p_rtp: *mut char_u;
}
extern "C" {
    pub static mut p_sj: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_so: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_sbo: *mut char_u;
}
extern "C" {
    pub static mut p_sections: *mut char_u;
}
extern "C" {
    pub static mut p_secure: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sel: *mut char_u;
}
extern "C" {
    pub static mut p_slm: *mut char_u;
}
extern "C" {
    pub static mut p_ssop: *mut char_u;
}
extern "C" {
    pub static mut ssop_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_sh: *mut char_u;
}
extern "C" {
    pub static mut p_shcf: *mut char_u;
}
extern "C" {
    pub static mut p_sp: *mut char_u;
}
extern "C" {
    pub static mut p_shq: *mut char_u;
}
extern "C" {
    pub static mut p_sxq: *mut char_u;
}
extern "C" {
    pub static mut p_sxe: *mut char_u;
}
extern "C" {
    pub static mut p_srr: *mut char_u;
}
extern "C" {
    pub static mut p_stmp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_shm: *mut char_u;
}
extern "C" {
    pub static mut p_sbr: *mut char_u;
}
extern "C" {
    pub static mut p_sft: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_smd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ss: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_siso: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_scs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sta: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_smoothscroll: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tpm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_spr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_su: *mut char_u;
}
extern "C" {
    pub static mut p_sws: *mut char_u;
}
extern "C" {
    pub static mut p_swb: *mut char_u;
}
extern "C" {
    pub static mut swb_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_tbs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tc: *mut char_u;
}
extern "C" {
    pub static mut tc_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_tl: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_tr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tags: *mut char_u;
}
extern "C" {
    pub static mut p_tgst: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tbidi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tenc: *mut char_u;
}
extern "C" {
    pub static mut p_termfont: *mut char_u;
}
extern "C" {
    pub static mut p_terse: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ta: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_to: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_timeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ttimeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ttm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_tbi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tf: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ttyscroll: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_udir: *mut char_u;
}
extern "C" {
    pub static mut p_ul: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ur: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_uc: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ut: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fcs: *mut char_u;
}
extern "C" {
    pub static mut p_vcp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_viminfo: *mut char_u;
}
extern "C" {
    pub static mut p_viminfofile: *mut char_u;
}
extern "C" {
    pub static mut p_vdir: *mut char_u;
}
extern "C" {
    pub static mut p_vop: *mut char_u;
}
extern "C" {
    pub static mut vop_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_vb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ve: *mut char_u;
}
extern "C" {
    pub static mut ve_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_verbose: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_vfile: *mut char_u;
}
extern "C" {
    pub static mut p_warn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wop: *mut char_u;
}
extern "C" {
    pub static mut p_window: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wig: *mut char_u;
}
extern "C" {
    pub static mut p_wiv: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ww: *mut char_u;
}
extern "C" {
    pub static mut p_wc: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wcm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wic: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wim: *mut char_u;
}
extern "C" {
    pub static mut p_wh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wmh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wmw: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wiw: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ws: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_write: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wa: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wd: ::std::os::raw::c_long;
}
pub const BV_AI: _bindgen_ty_17 = 0;
pub const BV_AR: _bindgen_ty_17 = 1;
pub const BV_BH: _bindgen_ty_17 = 2;
pub const BV_BKC: _bindgen_ty_17 = 3;
pub const BV_BT: _bindgen_ty_17 = 4;
pub const BV_EFM: _bindgen_ty_17 = 5;
pub const BV_GP: _bindgen_ty_17 = 6;
pub const BV_MP: _bindgen_ty_17 = 7;
pub const BV_BIN: _bindgen_ty_17 = 8;
pub const BV_BL: _bindgen_ty_17 = 9;
pub const BV_BOMB: _bindgen_ty_17 = 10;
pub const BV_CI: _bindgen_ty_17 = 11;
pub const BV_CM: _bindgen_ty_17 = 12;
pub const BV_CMS: _bindgen_ty_17 = 13;
pub const BV_COM: _bindgen_ty_17 = 14;
pub const BV_DEF: _bindgen_ty_17 = 15;
pub const BV_INC: _bindgen_ty_17 = 16;
pub const BV_EOL: _bindgen_ty_17 = 17;
pub const BV_FIXEOL: _bindgen_ty_17 = 18;
pub const BV_EP: _bindgen_ty_17 = 19;
pub const BV_ET: _bindgen_ty_17 = 20;
pub const BV_FENC: _bindgen_ty_17 = 21;
pub const BV_FP: _bindgen_ty_17 = 22;
pub const BV_BEXPR: _bindgen_ty_17 = 23;
pub const BV_FEX: _bindgen_ty_17 = 24;
pub const BV_FF: _bindgen_ty_17 = 25;
pub const BV_FLP: _bindgen_ty_17 = 26;
pub const BV_FO: _bindgen_ty_17 = 27;
pub const BV_FT: _bindgen_ty_17 = 28;
pub const BV_IMI: _bindgen_ty_17 = 29;
pub const BV_IMS: _bindgen_ty_17 = 30;
pub const BV_INDE: _bindgen_ty_17 = 31;
pub const BV_INDK: _bindgen_ty_17 = 32;
pub const BV_INEX: _bindgen_ty_17 = 33;
pub const BV_INF: _bindgen_ty_17 = 34;
pub const BV_ISK: _bindgen_ty_17 = 35;
pub const BV_KMAP: _bindgen_ty_17 = 36;
pub const BV_KP: _bindgen_ty_17 = 37;
pub const BV_MENC: _bindgen_ty_17 = 38;
pub const BV_MA: _bindgen_ty_17 = 39;
pub const BV_ML: _bindgen_ty_17 = 40;
pub const BV_MOD: _bindgen_ty_17 = 41;
pub const BV_MPS: _bindgen_ty_17 = 42;
pub const BV_NF: _bindgen_ty_17 = 43;
pub const BV_PATH: _bindgen_ty_17 = 44;
pub const BV_PI: _bindgen_ty_17 = 45;
pub const BV_QE: _bindgen_ty_17 = 46;
pub const BV_RO: _bindgen_ty_17 = 47;
pub const BV_SN: _bindgen_ty_17 = 48;
pub const BV_STS: _bindgen_ty_17 = 49;
pub const BV_SUA: _bindgen_ty_17 = 50;
pub const BV_SW: _bindgen_ty_17 = 51;
pub const BV_SWF: _bindgen_ty_17 = 52;
pub const BV_TFU: _bindgen_ty_17 = 53;
pub const BV_TAGS: _bindgen_ty_17 = 54;
pub const BV_TC: _bindgen_ty_17 = 55;
pub const BV_TS: _bindgen_ty_17 = 56;
pub const BV_TW: _bindgen_ty_17 = 57;
pub const BV_TX: _bindgen_ty_17 = 58;
pub const BV_UDF: _bindgen_ty_17 = 59;
pub const BV_UL: _bindgen_ty_17 = 60;
pub const BV_WM: _bindgen_ty_17 = 61;
pub const BV_VSTS: _bindgen_ty_17 = 62;
pub const BV_VTS: _bindgen_ty_17 = 63;
pub const BV_COUNT: _bindgen_ty_17 = 64;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const WV_LIST: _bindgen_ty_18 = 0;
pub const WV_ARAB: _bindgen_ty_18 = 1;
pub const WV_CRBIND: _bindgen_ty_18 = 2;
pub const WV_BRI: _bindgen_ty_18 = 3;
pub const WV_BRIOPT: _bindgen_ty_18 = 4;
pub const WV_WCR: _bindgen_ty_18 = 5;
pub const WV_DIFF: _bindgen_ty_18 = 6;
pub const WV_FDC: _bindgen_ty_18 = 7;
pub const WV_FEN: _bindgen_ty_18 = 8;
pub const WV_FDI: _bindgen_ty_18 = 9;
pub const WV_FDL: _bindgen_ty_18 = 10;
pub const WV_FDM: _bindgen_ty_18 = 11;
pub const WV_FML: _bindgen_ty_18 = 12;
pub const WV_FDN: _bindgen_ty_18 = 13;
pub const WV_FDE: _bindgen_ty_18 = 14;
pub const WV_FDT: _bindgen_ty_18 = 15;
pub const WV_FMR: _bindgen_ty_18 = 16;
pub const WV_LBR: _bindgen_ty_18 = 17;
pub const WV_NU: _bindgen_ty_18 = 18;
pub const WV_RNU: _bindgen_ty_18 = 19;
pub const WV_NUW: _bindgen_ty_18 = 20;
pub const WV_PVW: _bindgen_ty_18 = 21;
pub const WV_RL: _bindgen_ty_18 = 22;
pub const WV_RLC: _bindgen_ty_18 = 23;
pub const WV_SCBIND: _bindgen_ty_18 = 24;
pub const WV_SCROLL: _bindgen_ty_18 = 25;
pub const WV_SISO: _bindgen_ty_18 = 26;
pub const WV_SO: _bindgen_ty_18 = 27;
pub const WV_WFH: _bindgen_ty_18 = 28;
pub const WV_WFW: _bindgen_ty_18 = 29;
pub const WV_WRAP: _bindgen_ty_18 = 30;
pub const WV_SCL: _bindgen_ty_18 = 31;
pub const WV_COUNT: _bindgen_ty_18 = 32;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut SDS_NOINIT: *const ::std::os::raw::c_char;
}
pub type sds = *mut ::std::os::raw::c_char;
#[repr(C, packed)]
pub struct sdshdr5 {
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr5() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr5>(),
        1usize,
        concat!("Size of: ", stringify!(sdshdr5))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr5>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr5),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr5),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr8 {
    pub len: u8,
    pub alloc: u8,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr8() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr8>(),
        3usize,
        concat!("Size of: ", stringify!(sdshdr8))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr8>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr16 {
    pub len: u16,
    pub alloc: u16,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr16() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr16>(),
        5usize,
        concat!("Size of: ", stringify!(sdshdr16))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr16>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr32 {
    pub len: u32,
    pub alloc: u32,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr32() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr32>(),
        9usize,
        concat!("Size of: ", stringify!(sdshdr32))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr32>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr64 {
    pub len: u64,
    pub alloc: u64,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr64() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr64>(),
        17usize,
        concat!("Size of: ", stringify!(sdshdr64))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr64>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    pub fn sdsnewlen(init: *const ::std::os::raw::c_void, initlen: usize) -> sds;
}
extern "C" {
    pub fn sdsnew(init: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdsempty() -> sds;
}
extern "C" {
    pub fn sdsdup(s: sds) -> sds;
}
extern "C" {
    pub fn sdsfree(s: sds);
}
extern "C" {
    pub fn sdsgrowzero(s: sds, len: usize) -> sds;
}
extern "C" {
    pub fn sdscatlen(s: sds, t: *const ::std::os::raw::c_void, len: usize) -> sds;
}
extern "C" {
    pub fn sdscat(s: sds, t: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdscatsds(s: sds, t: sds) -> sds;
}
extern "C" {
    pub fn sdscpylen(s: sds, t: *const ::std::os::raw::c_char, len: usize) -> sds;
}
extern "C" {
    pub fn sdscpy(s: sds, t: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdscatvprintf(s: sds, fmt: *const ::std::os::raw::c_char, ap: *mut __va_list_tag)
        -> sds;
}
extern "C" {
    pub fn sdscatprintf(s: sds, fmt: *const ::std::os::raw::c_char, ...) -> sds;
}
extern "C" {
    pub fn sdscatfmt(s: sds, fmt: *const ::std::os::raw::c_char, ...) -> sds;
}
extern "C" {
    pub fn sdstrim(s: sds, cset: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdsrange(s: sds, start: isize, end: isize);
}
extern "C" {
    pub fn sdsupdatelen(s: sds);
}
extern "C" {
    pub fn sdsclear(s: sds);
}
extern "C" {
    pub fn sdscmp(s1: sds, s2: sds) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdssplitlen(
        s: *const ::std::os::raw::c_char,
        len: isize,
        sep: *const ::std::os::raw::c_char,
        seplen: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut sds;
}
extern "C" {
    pub fn sdsfreesplitres(tokens: *mut sds, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdstolower(s: sds);
}
extern "C" {
    pub fn sdstoupper(s: sds);
}
extern "C" {
    pub fn sdsfromlonglong(value: ::std::os::raw::c_longlong) -> sds;
}
extern "C" {
    pub fn sdscatrepr(s: sds, p: *const ::std::os::raw::c_char, len: usize) -> sds;
}
extern "C" {
    pub fn sdssplitargs(
        line: *const ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> *mut sds;
}
extern "C" {
    pub fn sdsmapchars(
        s: sds,
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        setlen: usize,
    ) -> sds;
}
extern "C" {
    pub fn sdsjoin(
        argv: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        sep: *mut ::std::os::raw::c_char,
    ) -> sds;
}
extern "C" {
    pub fn sdsjoinsds(
        argv: *mut sds,
        argc: ::std::os::raw::c_int,
        sep: *const ::std::os::raw::c_char,
        seplen: usize,
    ) -> sds;
}
extern "C" {
    pub fn sdsMakeRoomFor(s: sds, addlen: usize) -> sds;
}
extern "C" {
    pub fn sdsIncrLen(s: sds, incr: isize);
}
extern "C" {
    pub fn sdsRemoveFreeSpace(s: sds) -> sds;
}
extern "C" {
    pub fn sdsAllocSize(s: sds) -> usize;
}
extern "C" {
    pub fn sdsAllocPtr(s: sds) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_free(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
    pub coladd: colnr_T,
}
#[test]
fn bindgen_test_layout_pos_T() {
    const UNINIT: ::std::mem::MaybeUninit<pos_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pos_T>(),
        16usize,
        concat!("Size of: ", stringify!(pos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pos_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coladd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(coladd)
        )
    );
}
pub type buf_T = file_buffer;
pub const msgPriority_T_MSG_INFO: msgPriority_T = 0;
pub const msgPriority_T_MSG_WARNING: msgPriority_T = 1;
pub const msgPriority_T_MSG_ERROR: msgPriority_T = 2;
pub type msgPriority_T = ::std::os::raw::c_uint;
pub const windowSplit_T_SPLIT_HORIZONTAL: windowSplit_T = 0;
pub const windowSplit_T_SPLIT_HORIZONTAL_NEW: windowSplit_T = 1;
pub const windowSplit_T_SPLIT_VERTICAL: windowSplit_T = 2;
pub const windowSplit_T_SPLIT_VERTICAL_NEW: windowSplit_T = 3;
pub const windowSplit_T_SPLIT_TAB: windowSplit_T = 4;
pub const windowSplit_T_SPLIT_TAB_NEW: windowSplit_T = 5;
pub type windowSplit_T = ::std::os::raw::c_uint;
pub const windowMovement_T_WIN_CURSOR_LEFT: windowMovement_T = 0;
pub const windowMovement_T_WIN_CURSOR_RIGHT: windowMovement_T = 1;
pub const windowMovement_T_WIN_CURSOR_UP: windowMovement_T = 2;
pub const windowMovement_T_WIN_CURSOR_DOWN: windowMovement_T = 3;
pub const windowMovement_T_WIN_MOVE_FULL_LEFT: windowMovement_T = 4;
pub const windowMovement_T_WIN_MOVE_FULL_RIGHT: windowMovement_T = 5;
pub const windowMovement_T_WIN_MOVE_FULL_UP: windowMovement_T = 6;
pub const windowMovement_T_WIN_MOVE_FULL_DOWN: windowMovement_T = 7;
pub const windowMovement_T_WIN_CURSOR_TOP_LEFT: windowMovement_T = 8;
pub const windowMovement_T_WIN_CURSOR_BOTTOM_RIGHT: windowMovement_T = 9;
pub const windowMovement_T_WIN_CURSOR_PREVIOUS: windowMovement_T = 10;
pub const windowMovement_T_WIN_MOVE_ROTATE_DOWNWARDS: windowMovement_T = 11;
pub const windowMovement_T_WIN_MOVE_ROTATE_UPWARDS: windowMovement_T = 12;
pub type windowMovement_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exCommand_T {
    pub cmd: *mut char_u,
    pub forceit: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_exCommand_T() {
    const UNINIT: ::std::mem::MaybeUninit<exCommand_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exCommand_T>(),
        16usize,
        concat!("Size of: ", stringify!(exCommand_T))
    );
    assert_eq!(
        ::std::mem::align_of::<exCommand_T>(),
        8usize,
        concat!("Alignment of ", stringify!(exCommand_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(forceit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(regname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yankInfo_T {
    pub op_char: ::std::os::raw::c_int,
    pub extra_op_char: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub blockType: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub numLines: ::std::os::raw::c_int,
    pub lines: *mut *mut char_u,
}
#[test]
fn bindgen_test_layout_yankInfo_T() {
    const UNINIT: ::std::mem::MaybeUninit<yankInfo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<yankInfo_T>(),
        64usize,
        concat!("Size of: ", stringify!(yankInfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<yankInfo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(yankInfo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_char) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(op_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_op_char) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(extra_op_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(blockType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numLines) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(numLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(lines)
        )
    );
}
pub const gotoTarget_T_DEFINITION: gotoTarget_T = 0;
pub const gotoTarget_T_DECLARATION: gotoTarget_T = 1;
pub const gotoTarget_T_IMPLEMENTATION: gotoTarget_T = 2;
pub const gotoTarget_T_TYPEDEFINITION: gotoTarget_T = 3;
pub const gotoTarget_T_HOVER: gotoTarget_T = 4;
pub const gotoTarget_T_OUTLINE: gotoTarget_T = 5;
pub const gotoTarget_T_MESSAGES: gotoTarget_T = 6;
pub type gotoTarget_T = ::std::os::raw::c_uint;
pub const clearTarget_T_CLEAR_MESSAGES: clearTarget_T = 0;
pub type clearTarget_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clearRequest_T {
    pub count: ::std::os::raw::c_int,
    pub target: clearTarget_T,
}
#[test]
fn bindgen_test_layout_clearRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<clearRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clearRequest_T>(),
        8usize,
        concat!("Size of: ", stringify!(clearRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<clearRequest_T>(),
        4usize,
        concat!("Alignment of ", stringify!(clearRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clearRequest_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clearRequest_T),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gotoRequest_T {
    pub count: ::std::os::raw::c_int,
    pub location: pos_T,
    pub target: gotoTarget_T,
}
#[test]
fn bindgen_test_layout_gotoRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<gotoRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gotoRequest_T>(),
        32usize,
        concat!("Size of: ", stringify!(gotoRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<gotoRequest_T>(),
        8usize,
        concat!("Alignment of ", stringify!(gotoRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(target)
        )
    );
}
pub const scrollDirection_T_SCROLL_CURSOR_CENTERV: scrollDirection_T = 0;
pub const scrollDirection_T_SCROLL_CURSOR_CENTERH: scrollDirection_T = 1;
pub const scrollDirection_T_SCROLL_CURSOR_TOP: scrollDirection_T = 2;
pub const scrollDirection_T_SCROLL_CURSOR_BOTTOM: scrollDirection_T = 3;
pub const scrollDirection_T_SCROLL_CURSOR_LEFT: scrollDirection_T = 4;
pub const scrollDirection_T_SCROLL_CURSOR_RIGHT: scrollDirection_T = 5;
pub const scrollDirection_T_SCROLL_LINE_UP: scrollDirection_T = 6;
pub const scrollDirection_T_SCROLL_LINE_DOWN: scrollDirection_T = 7;
pub const scrollDirection_T_SCROLL_HALFPAGE_DOWN: scrollDirection_T = 8;
pub const scrollDirection_T_SCROLL_HALFPAGE_UP: scrollDirection_T = 9;
pub const scrollDirection_T_SCROLL_PAGE_DOWN: scrollDirection_T = 10;
pub const scrollDirection_T_SCROLL_PAGE_UP: scrollDirection_T = 11;
pub const scrollDirection_T_SCROLL_HALFPAGE_LEFT: scrollDirection_T = 12;
pub const scrollDirection_T_SCROLL_HALFPAGE_RIGHT: scrollDirection_T = 13;
pub const scrollDirection_T_SCROLL_COLUMN_LEFT: scrollDirection_T = 14;
pub const scrollDirection_T_SCROLL_COLUMN_RIGHT: scrollDirection_T = 15;
pub type scrollDirection_T = ::std::os::raw::c_uint;
pub const subMode_T_SM_NONE: subMode_T = 0;
pub const subMode_T_SM_INSERT_LITERAL: subMode_T = 1;
pub type subMode_T = ::std::os::raw::c_uint;
pub const tabPageKind_T_GOTO: tabPageKind_T = 0;
pub const tabPageKind_T_MOVE: tabPageKind_T = 1;
pub const tabPageKind_T_CLOSE: tabPageKind_T = 2;
pub const tabPageKind_T_ONLY: tabPageKind_T = 3;
pub type tabPageKind_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tabPageRequest_T {
    pub kind: tabPageKind_T,
    pub arg: ::std::os::raw::c_int,
    pub relative: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tabPageRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<tabPageRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tabPageRequest_T>(),
        12usize,
        concat!("Size of: ", stringify!(tabPageRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tabPageRequest_T>(),
        4usize,
        concat!("Alignment of ", stringify!(tabPageRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(relative)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct terminalRequest_t {
    pub cmd: *mut char_u,
    pub rows: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub curwin: ::std::os::raw::c_int,
    pub finish: ::std::os::raw::c_char,
    pub hidden: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_terminalRequest_t() {
    const UNINIT: ::std::mem::MaybeUninit<terminalRequest_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<terminalRequest_t>(),
        32usize,
        concat!("Size of: ", stringify!(terminalRequest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<terminalRequest_t>(),
        8usize,
        concat!("Alignment of ", stringify!(terminalRequest_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curwin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finish) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(hidden)
        )
    );
}
pub const formatRequestType_T_INDENTATION: formatRequestType_T = 0;
pub const formatRequestType_T_FORMATTING: formatRequestType_T = 1;
pub type formatRequestType_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct formatRequest_T {
    pub formatType: formatRequestType_T,
    pub returnCursor: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub buf: *mut buf_T,
    pub cmd: *mut char_u,
}
#[test]
fn bindgen_test_layout_formatRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<formatRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<formatRequest_T>(),
        56usize,
        concat!("Size of: ", stringify!(formatRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<formatRequest_T>(),
        8usize,
        concat!("Alignment of ", stringify!(formatRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(formatType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnCursor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(returnCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(cmd)
        )
    );
}
pub type ClipboardGetCallback = ::std::option::Option<
    unsafe extern "C" fn(
        regname: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
        blockType: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type ColorSchemeChangedCallback =
    ::std::option::Option<unsafe extern "C" fn(colorScheme: *mut char_u) -> ::std::os::raw::c_int>;
pub type CursorAddCallback = ::std::option::Option<unsafe extern "C" fn(cursor: pos_T)>;
pub type ColorSchemeCompletionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        filter: *mut char_u,
        num_colorschemes: *mut ::std::os::raw::c_int,
        colorschemes: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type FormatCallback =
    ::std::option::Option<unsafe extern "C" fn(formatRequest: *mut formatRequest_T)>;
pub type AutoIndentCallback = ::std::option::Option<
    unsafe extern "C" fn(
        lnum: ::std::os::raw::c_int,
        buf: *mut buf_T,
        prevLine: *mut char_u,
        currentLine: *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type MacroStartRecordCallback =
    ::std::option::Option<unsafe extern "C" fn(regname: ::std::os::raw::c_int)>;
pub type MacroStopRecordCallback = ::std::option::Option<
    unsafe extern "C" fn(regname: ::std::os::raw::c_int, regvalue: *mut char_u),
>;
pub type VoidCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type WindowSplitCallback =
    ::std::option::Option<unsafe extern "C" fn(splitType: windowSplit_T, fname: *mut char_u)>;
pub type WindowMovementCallback = ::std::option::Option<
    unsafe extern "C" fn(movementType: windowMovement_T, count: ::std::os::raw::c_int),
>;
pub type YankCallback = ::std::option::Option<unsafe extern "C" fn(yankInfo: *mut yankInfo_T)>;
pub type TerminalCallback =
    ::std::option::Option<unsafe extern "C" fn(terminalRequest: *mut terminalRequest_t)>;
pub type ClearCallback = ::std::option::Option<unsafe extern "C" fn(clearInfo: clearRequest_T)>;
pub type GotoCallback =
    ::std::option::Option<unsafe extern "C" fn(gotoInfo: gotoRequest_T) -> ::std::os::raw::c_int>;
pub type ScrollCallback = ::std::option::Option<
    unsafe extern "C" fn(dir: scrollDirection_T, count: ::std::os::raw::c_long),
>;
pub type TabPageCallback = ::std::option::Option<
    unsafe extern "C" fn(tabPageInfo: tabPageRequest_T) -> ::std::os::raw::c_int,
>;
pub type FunctionGetCharCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mode: ::std::os::raw::c_int,
        character: *mut ::std::os::raw::c_char,
        modMask: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const screenLineMotion_T_MOTION_H: screenLineMotion_T = 0;
pub const screenLineMotion_T_MOTION_L: screenLineMotion_T = 1;
pub const screenLineMotion_T_MOTION_M: screenLineMotion_T = 2;
pub type screenLineMotion_T = ::std::os::raw::c_uint;
pub type CursorMoveScreenLineCallback = ::std::option::Option<
    unsafe extern "C" fn(
        motion: screenLineMotion_T,
        count: ::std::os::raw::c_int,
        startLine: linenr_T,
        destLine: *mut linenr_T,
    ),
>;
pub type CursorMoveScreenPositionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        direction: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        lnum: linenr_T,
        cursor: colnr_T,
        curswant: colnr_T,
        destLnum: *mut linenr_T,
        destCol: *mut colnr_T,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_T {
    pub contents: sds,
    pub title: sds,
    pub priority: msgPriority_T,
}
#[test]
fn bindgen_test_layout_msg_T() {
    const UNINIT: ::std::mem::MaybeUninit<msg_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msg_T>(),
        24usize,
        concat!("Size of: ", stringify!(msg_T))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_T>(),
        8usize,
        concat!("Alignment of ", stringify!(msg_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(priority)
        )
    );
}
pub const executionStatus_T_HANDLED: executionStatus_T = 0;
pub const executionStatus_T_COMPLETED: executionStatus_T = 1;
pub const executionStatus_T_UNHANDLED: executionStatus_T = 2;
pub const executionStatus_T_COMPLETED_UNHANDLED: executionStatus_T = 3;
pub type executionStatus_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lpos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
}
#[test]
fn bindgen_test_layout_lpos_T() {
    const UNINIT: ::std::mem::MaybeUninit<lpos_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lpos_T>(),
        16usize,
        concat!("Size of: ", stringify!(lpos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<lpos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(lpos_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lpos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lpos_T),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct growarray {
    pub ga_len: ::std::os::raw::c_int,
    pub ga_maxlen: ::std::os::raw::c_int,
    pub ga_itemsize: ::std::os::raw::c_int,
    pub ga_growsize: ::std::os::raw::c_int,
    pub ga_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_growarray() {
    const UNINIT: ::std::mem::MaybeUninit<growarray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<growarray>(),
        24usize,
        concat!("Size of: ", stringify!(growarray))
    );
    assert_eq!(
        ::std::mem::align_of::<growarray>(),
        8usize,
        concat!("Alignment of ", stringify!(growarray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_maxlen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_maxlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_itemsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_itemsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_growsize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_growsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_data)
        )
    );
}
pub type garray_T = growarray;
pub type win_T = window_S;
pub type wininfo_T = wininfo_S;
pub type frame_T = frame_S;
pub type scid_T = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct terminal_S {
    _unused: [u8; 0],
}
pub type term_T = terminal_S;
pub type AutoCommandCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: event_T, buf: *mut buf_T)>;
pub type CustomCommandCallback =
    ::std::option::Option<unsafe extern "C" fn(eap: *mut exCommand_T) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctx_T {
    pub sc_sid: scid_T,
    pub sc_seq: ::std::os::raw::c_int,
    pub sc_lnum: linenr_T,
    pub sc_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sctx_T() {
    const UNINIT: ::std::mem::MaybeUninit<sctx_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sctx_T>(),
        24usize,
        concat!("Size of: ", stringify!(sctx_T))
    );
    assert_eq!(
        ::std::mem::align_of::<sctx_T>(),
        8usize,
        concat!("Alignment of ", stringify!(sctx_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_sid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_sid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufref_T {
    pub br_buf: *mut buf_T,
    pub br_fnum: ::std::os::raw::c_int,
    pub br_buf_free_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bufref_T() {
    const UNINIT: ::std::mem::MaybeUninit<bufref_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bufref_T>(),
        16usize,
        concat!("Size of: ", stringify!(bufref_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bufref_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bufref_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_fnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_buf_free_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_buf_free_count)
        )
    );
}
pub type regengine_T = regengine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regprog {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regprog() {
    const UNINIT: ::std::mem::MaybeUninit<regprog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regprog>(),
        24usize,
        concat!("Size of: ", stringify!(regprog))
    );
    assert_eq!(
        ::std::mem::align_of::<regprog>(),
        8usize,
        concat!("Alignment of ", stringify!(regprog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_engine) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_in_use) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_in_use)
        )
    );
}
pub type regprog_T = regprog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_regprog_T {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
    pub regstart: ::std::os::raw::c_int,
    pub reganch: char_u,
    pub regmust: *mut char_u,
    pub regmlen: ::std::os::raw::c_int,
    pub program: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_bt_regprog_T() {
    const UNINIT: ::std::mem::MaybeUninit<bt_regprog_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_regprog_T>(),
        48usize,
        concat!("Size of: ", stringify!(bt_regprog_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_regprog_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_regprog_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_engine) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_in_use) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_in_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regstart) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reganch) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regmust) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regmust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regmlen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regmlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).program) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(program)
        )
    );
}
pub type nfa_state_T = nfa_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfa_state {
    pub c: ::std::os::raw::c_int,
    pub out: *mut nfa_state_T,
    pub out1: *mut nfa_state_T,
    pub id: ::std::os::raw::c_int,
    pub lastlist: [::std::os::raw::c_int; 2usize],
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_nfa_state() {
    const UNINIT: ::std::mem::MaybeUninit<nfa_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nfa_state>(),
        40usize,
        concat!("Size of: ", stringify!(nfa_state))
    );
    assert_eq!(
        ::std::mem::align_of::<nfa_state>(),
        8usize,
        concat!("Alignment of ", stringify!(nfa_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(out1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastlist) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(lastlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfa_regprog_T {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
    pub start: *mut nfa_state_T,
    pub reganch: ::std::os::raw::c_int,
    pub regstart: ::std::os::raw::c_int,
    pub match_text: *mut char_u,
    pub has_zend: ::std::os::raw::c_int,
    pub has_backref: ::std::os::raw::c_int,
    pub pattern: *mut char_u,
    pub nsubexp: ::std::os::raw::c_int,
    pub nstate: ::std::os::raw::c_int,
    pub state: [nfa_state_T; 1usize],
}
#[test]
fn bindgen_test_layout_nfa_regprog_T() {
    const UNINIT: ::std::mem::MaybeUninit<nfa_regprog_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nfa_regprog_T>(),
        112usize,
        concat!("Size of: ", stringify!(nfa_regprog_T))
    );
    assert_eq!(
        ::std::mem::align_of::<nfa_regprog_T>(),
        8usize,
        concat!("Alignment of ", stringify!(nfa_regprog_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_engine) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_in_use) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_in_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reganch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regstart) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_text) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(match_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_zend) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(has_zend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_backref) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(has_backref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsubexp) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(nsubexp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstate) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(nstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_T {
    pub regprog: *mut regprog_T,
    pub startp: [*mut char_u; 10usize],
    pub endp: [*mut char_u; 10usize],
    pub rm_ic: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regmatch_T() {
    const UNINIT: ::std::mem::MaybeUninit<regmatch_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regmatch_T>(),
        176usize,
        concat!("Size of: ", stringify!(regmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regprog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(regprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(startp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endp) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(endp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_ic) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(rm_ic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmmatch_T {
    pub regprog: *mut regprog_T,
    pub startpos: [lpos_T; 10usize],
    pub endpos: [lpos_T; 10usize],
    pub rmm_ic: ::std::os::raw::c_int,
    pub rmm_maxcol: colnr_T,
}
#[test]
fn bindgen_test_layout_regmmatch_T() {
    const UNINIT: ::std::mem::MaybeUninit<regmmatch_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regmmatch_T>(),
        336usize,
        concat!("Size of: ", stringify!(regmmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<regmmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(regmmatch_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regprog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(regprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startpos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(startpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpos) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(endpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmm_ic) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(rmm_ic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmm_maxcol) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(rmm_maxcol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_extmatch_T {
    pub refcnt: ::std::os::raw::c_short,
    pub matches: [*mut char_u; 10usize],
}
#[test]
fn bindgen_test_layout_reg_extmatch_T() {
    const UNINIT: ::std::mem::MaybeUninit<reg_extmatch_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<reg_extmatch_T>(),
        88usize,
        concat!("Size of: ", stringify!(reg_extmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_extmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_extmatch_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_extmatch_T),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matches) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_extmatch_T),
            "::",
            stringify!(matches)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regengine {
    pub regcomp: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut char_u, arg2: ::std::os::raw::c_int) -> *mut regprog_T,
    >,
    pub regfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut regprog_T)>,
    pub regexec_nl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut regmatch_T,
            arg2: *mut char_u,
            arg3: colnr_T,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub regexec_multi: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut regmmatch_T,
            arg2: *mut win_T,
            arg3: *mut buf_T,
            arg4: linenr_T,
            arg5: colnr_T,
            arg6: *mut proftime_T,
            arg7: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
    >,
    pub expr: *mut char_u,
}
#[test]
fn bindgen_test_layout_regengine() {
    const UNINIT: ::std::mem::MaybeUninit<regengine> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regengine>(),
        40usize,
        concat!("Size of: ", stringify!(regengine))
    );
    assert_eq!(
        ::std::mem::align_of::<regengine>(),
        8usize,
        concat!("Alignment of ", stringify!(regengine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regcomp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regcomp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regfree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regexec_nl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regexec_nl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regexec_multi) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regexec_multi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(expr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct filemark {
    pub mark: pos_T,
    pub fnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_filemark() {
    const UNINIT: ::std::mem::MaybeUninit<filemark> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<filemark>(),
        24usize,
        concat!("Size of: ", stringify!(filemark))
    );
    assert_eq!(
        ::std::mem::align_of::<filemark>(),
        8usize,
        concat!("Alignment of ", stringify!(filemark))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(filemark),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(filemark),
            "::",
            stringify!(fnum)
        )
    );
}
pub type fmark_T = filemark;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xfilemark {
    pub fmark: fmark_T,
    pub fname: *mut char_u,
    pub time_set: time_T,
}
#[test]
fn bindgen_test_layout_xfilemark() {
    const UNINIT: ::std::mem::MaybeUninit<xfilemark> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<xfilemark>(),
        40usize,
        concat!("Size of: ", stringify!(xfilemark))
    );
    assert_eq!(
        ::std::mem::align_of::<xfilemark>(),
        8usize,
        concat!("Alignment of ", stringify!(xfilemark))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmark) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(fmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_set) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(time_set)
        )
    );
}
pub type xfmark_T = xfilemark;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taggy {
    pub tagname: *mut char_u,
    pub fmark: fmark_T,
    pub cur_match: ::std::os::raw::c_int,
    pub cur_fnum: ::std::os::raw::c_int,
    pub user_data: *mut char_u,
}
#[test]
fn bindgen_test_layout_taggy() {
    const UNINIT: ::std::mem::MaybeUninit<taggy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<taggy>(),
        48usize,
        concat!("Size of: ", stringify!(taggy))
    );
    assert_eq!(
        ::std::mem::align_of::<taggy>(),
        8usize,
        concat!("Alignment of ", stringify!(taggy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmark) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(fmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_match) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(cur_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_fnum) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(cur_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(user_data)
        )
    );
}
pub type taggy_T = taggy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winopt_T {
    pub wo_arab: ::std::os::raw::c_int,
    pub wo_bri: ::std::os::raw::c_int,
    pub wo_briopt: *mut char_u,
    pub wo_wcr: *mut char_u,
    pub wo_diff: ::std::os::raw::c_int,
    pub wo_fdc: ::std::os::raw::c_long,
    pub wo_fdc_save: ::std::os::raw::c_int,
    pub wo_fen: ::std::os::raw::c_int,
    pub wo_fen_save: ::std::os::raw::c_int,
    pub wo_fdi: *mut char_u,
    pub wo_fdl: ::std::os::raw::c_long,
    pub wo_fdl_save: ::std::os::raw::c_int,
    pub wo_fdm: *mut char_u,
    pub wo_fdm_save: *mut char_u,
    pub wo_fml: ::std::os::raw::c_long,
    pub wo_fdn: ::std::os::raw::c_long,
    pub wo_fde: *mut char_u,
    pub wo_fdt: *mut char_u,
    pub wo_fmr: *mut char_u,
    pub wo_lbr: ::std::os::raw::c_int,
    pub wo_list: ::std::os::raw::c_int,
    pub wo_nu: ::std::os::raw::c_int,
    pub wo_rnu: ::std::os::raw::c_int,
    pub wo_nuw: ::std::os::raw::c_long,
    pub wo_wfh: ::std::os::raw::c_int,
    pub wo_wfw: ::std::os::raw::c_int,
    pub wo_pvw: ::std::os::raw::c_int,
    pub wo_rl: ::std::os::raw::c_int,
    pub wo_rlc: *mut char_u,
    pub wo_scr: ::std::os::raw::c_long,
    pub wo_scb: ::std::os::raw::c_int,
    pub wo_diff_saved: ::std::os::raw::c_int,
    pub wo_scb_save: ::std::os::raw::c_int,
    pub wo_wrap: ::std::os::raw::c_int,
    pub wo_wrap_save: ::std::os::raw::c_int,
    pub wo_crb: ::std::os::raw::c_int,
    pub wo_crb_save: ::std::os::raw::c_int,
    pub wo_scl: *mut char_u,
    pub wo_script_ctx: [sctx_T; 32usize],
}
#[test]
fn bindgen_test_layout_winopt_T() {
    const UNINIT: ::std::mem::MaybeUninit<winopt_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<winopt_T>(),
        1000usize,
        concat!("Size of: ", stringify!(winopt_T))
    );
    assert_eq!(
        ::std::mem::align_of::<winopt_T>(),
        8usize,
        concat!("Alignment of ", stringify!(winopt_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_arab) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_arab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_bri) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_bri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_briopt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_briopt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wcr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_diff) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdc_save) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdc_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fen_save) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fen_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdi) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdl) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdl_save) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdl_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdm) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdm_save) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdm_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fml) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdn) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fde) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fde)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdt) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fmr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_lbr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_lbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_list) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_nu) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_nu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_rnu) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rnu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_nuw) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_nuw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wfh) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wfh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wfw) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wfw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_pvw) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_pvw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_rl) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_rlc) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rlc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scr) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scb) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_diff_saved) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_diff_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scb_save) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scb_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wrap) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wrap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wrap_save) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wrap_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_crb) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_crb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_crb_save) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_crb_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scl) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_script_ctx) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_script_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wininfo_S {
    pub wi_next: *mut wininfo_T,
    pub wi_prev: *mut wininfo_T,
    pub wi_win: *mut win_T,
    pub wi_fpos: pos_T,
    pub wi_optset: ::std::os::raw::c_int,
    pub wi_opt: winopt_T,
    pub wi_fold_manual: ::std::os::raw::c_int,
    pub wi_folds: garray_T,
}
#[test]
fn bindgen_test_layout_wininfo_S() {
    const UNINIT: ::std::mem::MaybeUninit<wininfo_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wininfo_S>(),
        1080usize,
        concat!("Size of: ", stringify!(wininfo_S))
    );
    assert_eq!(
        ::std::mem::align_of::<wininfo_S>(),
        8usize,
        concat!("Alignment of ", stringify!(wininfo_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_win) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_fpos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_fpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_optset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_optset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_opt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_fold_manual) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_fold_manual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_folds) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_folds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct foldinfo {
    pub fi_level: ::std::os::raw::c_int,
    pub fi_lnum: ::std::os::raw::c_int,
    pub fi_low_level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_foldinfo() {
    const UNINIT: ::std::mem::MaybeUninit<foldinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<foldinfo>(),
        12usize,
        concat!("Size of: ", stringify!(foldinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<foldinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(foldinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fi_level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fi_lnum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fi_low_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_low_level)
        )
    );
}
pub type foldinfo_T = foldinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct visualinfo_T {
    pub vi_start: pos_T,
    pub vi_end: pos_T,
    pub vi_mode: ::std::os::raw::c_int,
    pub vi_curswant: colnr_T,
}
#[test]
fn bindgen_test_layout_visualinfo_T() {
    const UNINIT: ::std::mem::MaybeUninit<visualinfo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<visualinfo_T>(),
        40usize,
        concat!("Size of: ", stringify!(visualinfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<visualinfo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(visualinfo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_curswant) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_curswant)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct undoline_T {
    pub ul_line: *mut char_u,
    pub ul_len: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_undoline_T() {
    const UNINIT: ::std::mem::MaybeUninit<undoline_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<undoline_T>(),
        16usize,
        concat!("Size of: ", stringify!(undoline_T))
    );
    assert_eq!(
        ::std::mem::align_of::<undoline_T>(),
        8usize,
        concat!("Alignment of ", stringify!(undoline_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ul_line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(undoline_T),
            "::",
            stringify!(ul_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ul_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(undoline_T),
            "::",
            stringify!(ul_len)
        )
    );
}
pub type u_entry_T = u_entry;
pub type u_header_T = u_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u_entry {
    pub ue_next: *mut u_entry_T,
    pub ue_top: linenr_T,
    pub ue_bot: linenr_T,
    pub ue_lcount: linenr_T,
    pub ue_array: *mut undoline_T,
    pub ue_size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_entry() {
    const UNINIT: ::std::mem::MaybeUninit<u_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_entry>(),
        48usize,
        concat!("Size of: ", stringify!(u_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<u_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(u_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_top) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_bot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_lcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_lcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_array) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct u_header {
    pub uh_next: u_header__bindgen_ty_1,
    pub uh_prev: u_header__bindgen_ty_2,
    pub uh_alt_next: u_header__bindgen_ty_3,
    pub uh_alt_prev: u_header__bindgen_ty_4,
    pub uh_seq: ::std::os::raw::c_long,
    pub uh_walk: ::std::os::raw::c_int,
    pub uh_entry: *mut u_entry_T,
    pub uh_getbot_entry: *mut u_entry_T,
    pub uh_cursor: pos_T,
    pub uh_cursor_vcol: ::std::os::raw::c_long,
    pub uh_flags: ::std::os::raw::c_int,
    pub uh_namedm: [pos_T; 26usize],
    pub uh_visual: visualinfo_T,
    pub uh_time: time_T,
    pub uh_save_nr: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_1 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_1),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_2 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_2),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_2),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_3 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_3),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_3),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_4 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_4),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_4),
            "::",
            stringify!(seq)
        )
    );
}
#[test]
fn bindgen_test_layout_u_header() {
    const UNINIT: ::std::mem::MaybeUninit<u_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header>(),
        568usize,
        concat!("Size of: ", stringify!(u_header))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_alt_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_alt_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_alt_prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_alt_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_seq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_walk) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_walk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_entry) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_getbot_entry) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_getbot_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_cursor) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_cursor_vcol) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_cursor_vcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_flags) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_namedm) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_namedm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_visual) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_visual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_time) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_save_nr) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_save_nr)
        )
    );
}
pub type minfo_T = m_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m_info {
    pub m_size: long_u,
    pub m_next: *mut minfo_T,
}
#[test]
fn bindgen_test_layout_m_info() {
    const UNINIT: ::std::mem::MaybeUninit<m_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m_info>(),
        16usize,
        concat!("Size of: ", stringify!(m_info))
    );
    assert_eq!(
        ::std::mem::align_of::<m_info>(),
        8usize,
        concat!("Alignment of ", stringify!(m_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m_info),
            "::",
            stringify!(m_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m_info),
            "::",
            stringify!(m_next)
        )
    );
}
pub type bhdr_T = block_hdr;
pub type memfile_T = memfile;
pub type blocknr_T = ::std::os::raw::c_long;
pub type mf_hashitem_T = mf_hashitem_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mf_hashitem_S {
    pub mhi_next: *mut mf_hashitem_T,
    pub mhi_prev: *mut mf_hashitem_T,
    pub mhi_key: blocknr_T,
}
#[test]
fn bindgen_test_layout_mf_hashitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<mf_hashitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mf_hashitem_S>(),
        24usize,
        concat!("Size of: ", stringify!(mf_hashitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<mf_hashitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(mf_hashitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mhi_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mhi_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mhi_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mf_hashtab_S {
    pub mht_mask: long_u,
    pub mht_count: long_u,
    pub mht_buckets: *mut *mut mf_hashitem_T,
    pub mht_small_buckets: [*mut mf_hashitem_T; 64usize],
    pub mht_fixed: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mf_hashtab_S() {
    const UNINIT: ::std::mem::MaybeUninit<mf_hashtab_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mf_hashtab_S>(),
        544usize,
        concat!("Size of: ", stringify!(mf_hashtab_S))
    );
    assert_eq!(
        ::std::mem::align_of::<mf_hashtab_S>(),
        8usize,
        concat!("Alignment of ", stringify!(mf_hashtab_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_buckets) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_buckets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_small_buckets) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_small_buckets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_fixed) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_fixed)
        )
    );
}
pub type mf_hashtab_T = mf_hashtab_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_hdr {
    pub bh_hashitem: mf_hashitem_T,
    pub bh_next: *mut bhdr_T,
    pub bh_prev: *mut bhdr_T,
    pub bh_data: *mut char_u,
    pub bh_page_count: ::std::os::raw::c_int,
    pub bh_flags: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_block_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<block_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<block_hdr>(),
        56usize,
        concat!("Size of: ", stringify!(block_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<block_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(block_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_hashitem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_hashitem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_page_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_flags) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_flags)
        )
    );
}
pub type NR_TRANS = nr_trans;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nr_trans {
    pub nt_hashitem: mf_hashitem_T,
    pub nt_new_bnum: blocknr_T,
}
#[test]
fn bindgen_test_layout_nr_trans() {
    const UNINIT: ::std::mem::MaybeUninit<nr_trans> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nr_trans>(),
        32usize,
        concat!("Size of: ", stringify!(nr_trans))
    );
    assert_eq!(
        ::std::mem::align_of::<nr_trans>(),
        8usize,
        concat!("Alignment of ", stringify!(nr_trans))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_hashitem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nr_trans),
            "::",
            stringify!(nt_hashitem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_new_bnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nr_trans),
            "::",
            stringify!(nt_new_bnum)
        )
    );
}
pub type buffblock_T = buffblock;
pub type buffheader_T = buffheader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffblock {
    pub b_next: *mut buffblock_T,
    pub b_str: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_buffblock() {
    const UNINIT: ::std::mem::MaybeUninit<buffblock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<buffblock>(),
        16usize,
        concat!("Size of: ", stringify!(buffblock))
    );
    assert_eq!(
        ::std::mem::align_of::<buffblock>(),
        8usize,
        concat!("Alignment of ", stringify!(buffblock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffblock),
            "::",
            stringify!(b_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_str) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(buffblock),
            "::",
            stringify!(b_str)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffheader {
    pub bh_first: buffblock_T,
    pub bh_curr: *mut buffblock_T,
    pub bh_index: ::std::os::raw::c_int,
    pub bh_space: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_buffheader() {
    const UNINIT: ::std::mem::MaybeUninit<buffheader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<buffheader>(),
        32usize,
        concat!("Size of: ", stringify!(buffheader))
    );
    assert_eq!(
        ::std::mem::align_of::<buffheader>(),
        8usize,
        concat!("Alignment of ", stringify!(buffheader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_curr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_curr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_space) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct save_redo_T {
    pub sr_redobuff: buffheader_T,
    pub sr_old_redobuff: buffheader_T,
}
#[test]
fn bindgen_test_layout_save_redo_T() {
    const UNINIT: ::std::mem::MaybeUninit<save_redo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<save_redo_T>(),
        64usize,
        concat!("Size of: ", stringify!(save_redo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<save_redo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(save_redo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sr_redobuff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(save_redo_T),
            "::",
            stringify!(sr_redobuff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sr_old_redobuff) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(save_redo_T),
            "::",
            stringify!(sr_old_redobuff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct expand {
    pub xp_context: ::std::os::raw::c_int,
    pub xp_pattern: *mut char_u,
    pub xp_pattern_len: ::std::os::raw::c_int,
    pub xp_arg: *mut char_u,
    pub xp_script_ctx: sctx_T,
    pub xp_backslash: ::std::os::raw::c_int,
    pub xp_shell: ::std::os::raw::c_int,
    pub xp_numfiles: ::std::os::raw::c_int,
    pub xp_files: *mut *mut char_u,
    pub xp_line: *mut char_u,
    pub xp_col: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_expand() {
    const UNINIT: ::std::mem::MaybeUninit<expand> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<expand>(),
        96usize,
        concat!("Size of: ", stringify!(expand))
    );
    assert_eq!(
        ::std::mem::align_of::<expand>(),
        8usize,
        concat!("Alignment of ", stringify!(expand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_pattern) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_pattern_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_pattern_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_arg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_script_ctx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_script_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_backslash) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_backslash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_shell) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_shell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_numfiles) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_numfiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_files) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_line) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_col) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_col)
        )
    );
}
pub type expand_T = expand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdline_info {
    pub cmdbuff: *mut char_u,
    pub cmdbufflen: ::std::os::raw::c_int,
    pub cmdlen: ::std::os::raw::c_int,
    pub cmdpos: ::std::os::raw::c_int,
    pub cmdfirstc: ::std::os::raw::c_int,
    pub cmdindent: ::std::os::raw::c_int,
    pub cmdprompt: *mut char_u,
    pub cmdattr: ::std::os::raw::c_int,
    pub overstrike: ::std::os::raw::c_int,
    pub xpc: *mut expand_T,
    pub xp_context: ::std::os::raw::c_int,
    pub xp_arg: *mut char_u,
    pub input_fn: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmdline_info() {
    const UNINIT: ::std::mem::MaybeUninit<cmdline_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmdline_info>(),
        80usize,
        concat!("Size of: ", stringify!(cmdline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdline_info>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdline_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdbuff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdbuff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdbufflen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdbufflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdlen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdpos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdfirstc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdfirstc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdindent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdindent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdprompt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdprompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdattr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overstrike) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(overstrike)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xpc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xpc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_context) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_arg) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xp_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_fn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(input_fn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdmod_T {
    pub hide: ::std::os::raw::c_int,
    pub browse: ::std::os::raw::c_int,
    pub split: ::std::os::raw::c_int,
    pub tab: ::std::os::raw::c_int,
    pub keepalt: ::std::os::raw::c_int,
    pub keepmarks: ::std::os::raw::c_int,
    pub keepjumps: ::std::os::raw::c_int,
    pub lockmarks: ::std::os::raw::c_int,
    pub keeppatterns: ::std::os::raw::c_int,
    pub noswapfile: ::std::os::raw::c_int,
    pub save_ei: *mut char_u,
    pub filter_regmatch: regmatch_T,
    pub filter_force: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmdmod_T() {
    const UNINIT: ::std::mem::MaybeUninit<cmdmod_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmdmod_T>(),
        232usize,
        concat!("Size of: ", stringify!(cmdmod_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdmod_T>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdmod_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hide) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(hide)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).browse) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(browse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(split)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tab) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(tab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepalt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepmarks) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepmarks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepjumps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepjumps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockmarks) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(lockmarks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keeppatterns) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keeppatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noswapfile) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(noswapfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_ei) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(save_ei)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_regmatch) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(filter_regmatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_force) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(filter_force)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memfile {
    pub mf_fname: *mut char_u,
    pub mf_ffname: *mut char_u,
    pub mf_fd: ::std::os::raw::c_int,
    pub mf_flags: ::std::os::raw::c_int,
    pub mf_reopen: ::std::os::raw::c_int,
    pub mf_free_first: *mut bhdr_T,
    pub mf_used_first: *mut bhdr_T,
    pub mf_used_last: *mut bhdr_T,
    pub mf_used_count: ::std::os::raw::c_uint,
    pub mf_used_count_max: ::std::os::raw::c_uint,
    pub mf_hash: mf_hashtab_T,
    pub mf_trans: mf_hashtab_T,
    pub mf_blocknr_max: blocknr_T,
    pub mf_blocknr_min: blocknr_T,
    pub mf_neg_count: blocknr_T,
    pub mf_infile_count: blocknr_T,
    pub mf_page_size: ::std::os::raw::c_uint,
    pub mf_dirty: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_memfile() {
    const UNINIT: ::std::mem::MaybeUninit<memfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memfile>(),
        1192usize,
        concat!("Size of: ", stringify!(memfile))
    );
    assert_eq!(
        ::std::mem::align_of::<memfile>(),
        8usize,
        concat!("Alignment of ", stringify!(memfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_ffname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_ffname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_reopen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_reopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_free_first) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_free_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_first) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_last) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_count_max) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_count_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_hash) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_trans) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_blocknr_max) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_blocknr_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_blocknr_min) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_blocknr_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_neg_count) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_neg_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_infile_count) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_infile_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_page_size) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_dirty) as usize - ptr as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_dirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct info_pointer {
    pub ip_bnum: blocknr_T,
    pub ip_low: linenr_T,
    pub ip_high: linenr_T,
    pub ip_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_info_pointer() {
    const UNINIT: ::std::mem::MaybeUninit<info_pointer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<info_pointer>(),
        32usize,
        concat!("Size of: ", stringify!(info_pointer))
    );
    assert_eq!(
        ::std::mem::align_of::<info_pointer>(),
        8usize,
        concat!("Alignment of ", stringify!(info_pointer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_bnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_bnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_low) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_high) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_index)
        )
    );
}
pub type infoptr_T = info_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ml_chunksize {
    pub mlcs_numlines: ::std::os::raw::c_int,
    pub mlcs_totalsize: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ml_chunksize() {
    const UNINIT: ::std::mem::MaybeUninit<ml_chunksize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ml_chunksize>(),
        16usize,
        concat!("Size of: ", stringify!(ml_chunksize))
    );
    assert_eq!(
        ::std::mem::align_of::<ml_chunksize>(),
        8usize,
        concat!("Alignment of ", stringify!(ml_chunksize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlcs_numlines) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ml_chunksize),
            "::",
            stringify!(mlcs_numlines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlcs_totalsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ml_chunksize),
            "::",
            stringify!(mlcs_totalsize)
        )
    );
}
pub type chunksize_T = ml_chunksize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memline {
    pub ml_line_count: linenr_T,
    pub ml_mfp: *mut memfile_T,
    pub ml_flags: ::std::os::raw::c_int,
    pub ml_stack: *mut infoptr_T,
    pub ml_stack_top: ::std::os::raw::c_int,
    pub ml_stack_size: ::std::os::raw::c_int,
    pub ml_line_lnum: linenr_T,
    pub ml_line_ptr: *mut char_u,
    pub ml_line_len: colnr_T,
    pub ml_locked: *mut bhdr_T,
    pub ml_locked_low: linenr_T,
    pub ml_locked_high: linenr_T,
    pub ml_locked_lineadd: ::std::os::raw::c_int,
    pub ml_chunksize: *mut chunksize_T,
    pub ml_numchunks: ::std::os::raw::c_int,
    pub ml_usedchunks: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_memline() {
    const UNINIT: ::std::mem::MaybeUninit<memline> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memline>(),
        112usize,
        concat!("Size of: ", stringify!(memline))
    );
    assert_eq!(
        ::std::mem::align_of::<memline>(),
        8usize,
        concat!("Alignment of ", stringify!(memline))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_mfp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_mfp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_stack) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_stack_top) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_stack_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_lnum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_ptr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_len) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked_low) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked_high) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked_lineadd) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_lineadd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_chunksize) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_chunksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_numchunks) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_numchunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_usedchunks) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_usedchunks)
        )
    );
}
pub type memline_T = memline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct textprop_S {
    pub tp_col: colnr_T,
    pub tp_len: colnr_T,
    pub tp_id: ::std::os::raw::c_int,
    pub tp_type: ::std::os::raw::c_int,
    pub tp_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_textprop_S() {
    const UNINIT: ::std::mem::MaybeUninit<textprop_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<textprop_S>(),
        20usize,
        concat!("Size of: ", stringify!(textprop_S))
    );
    assert_eq!(
        ::std::mem::align_of::<textprop_S>(),
        4usize,
        concat!("Alignment of ", stringify!(textprop_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_col) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_flags)
        )
    );
}
pub type textprop_T = textprop_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proptype_S {
    pub pt_id: ::std::os::raw::c_int,
    pub pt_type: ::std::os::raw::c_int,
    pub pt_hl_id: ::std::os::raw::c_int,
    pub pt_priority: ::std::os::raw::c_int,
    pub pt_flags: ::std::os::raw::c_int,
    pub pt_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_proptype_S() {
    const UNINIT: ::std::mem::MaybeUninit<proptype_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<proptype_S>(),
        24usize,
        concat!("Size of: ", stringify!(proptype_S))
    );
    assert_eq!(
        ::std::mem::align_of::<proptype_S>(),
        4usize,
        concat!("Alignment of ", stringify!(proptype_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_hl_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_hl_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_name)
        )
    );
}
pub type proptype_T = proptype_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signgroup_S {
    pub refcount: short_u,
    pub next_sign_id: ::std::os::raw::c_int,
    pub sg_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_signgroup_S() {
    const UNINIT: ::std::mem::MaybeUninit<signgroup_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<signgroup_S>(),
        12usize,
        concat!("Size of: ", stringify!(signgroup_S))
    );
    assert_eq!(
        ::std::mem::align_of::<signgroup_S>(),
        4usize,
        concat!("Alignment of ", stringify!(signgroup_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_sign_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(next_sign_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(sg_name)
        )
    );
}
pub type signgroup_T = signgroup_S;
pub type signlist_T = signlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signlist {
    pub id: ::std::os::raw::c_int,
    pub lnum: linenr_T,
    pub typenr: ::std::os::raw::c_int,
    pub group: *mut signgroup_T,
    pub priority: ::std::os::raw::c_int,
    pub next: *mut signlist_T,
    pub prev: *mut signlist_T,
}
#[test]
fn bindgen_test_layout_signlist() {
    const UNINIT: ::std::mem::MaybeUninit<signlist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<signlist>(),
        56usize,
        concat!("Size of: ", stringify!(signlist))
    );
    assert_eq!(
        ::std::mem::align_of::<signlist>(),
        8usize,
        concat!("Alignment of ", stringify!(signlist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typenr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(typenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arglist {
    pub al_ga: garray_T,
    pub al_refcount: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_arglist() {
    const UNINIT: ::std::mem::MaybeUninit<arglist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<arglist>(),
        32usize,
        concat!("Size of: ", stringify!(arglist))
    );
    assert_eq!(
        ::std::mem::align_of::<arglist>(),
        8usize,
        concat!("Alignment of ", stringify!(arglist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).al_ga) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(al_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).al_refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(al_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(id)
        )
    );
}
pub type alist_T = arglist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argentry {
    pub ae_fname: *mut char_u,
    pub ae_fnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_argentry() {
    const UNINIT: ::std::mem::MaybeUninit<argentry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<argentry>(),
        16usize,
        concat!("Size of: ", stringify!(argentry))
    );
    assert_eq!(
        ::std::mem::align_of::<argentry>(),
        8usize,
        concat!("Alignment of ", stringify!(argentry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argentry),
            "::",
            stringify!(ae_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_fnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argentry),
            "::",
            stringify!(ae_fnum)
        )
    );
}
pub type aentry_T = argentry;
pub type eslist_T = eslist_elem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eslist_elem {
    pub saved_emsg_silent: ::std::os::raw::c_int,
    pub next: *mut eslist_T,
}
#[test]
fn bindgen_test_layout_eslist_elem() {
    const UNINIT: ::std::mem::MaybeUninit<eslist_elem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<eslist_elem>(),
        16usize,
        concat!("Size of: ", stringify!(eslist_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<eslist_elem>(),
        8usize,
        concat!("Alignment of ", stringify!(eslist_elem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_emsg_silent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eslist_elem),
            "::",
            stringify!(saved_emsg_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eslist_elem),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct condstack {
    pub cs_flags: [::std::os::raw::c_short; 50usize],
    pub cs_pending: [::std::os::raw::c_char; 50usize],
    pub cs_pend: condstack__bindgen_ty_1,
    pub cs_forinfo: [*mut ::std::os::raw::c_void; 50usize],
    pub cs_line: [::std::os::raw::c_int; 50usize],
    pub cs_idx: ::std::os::raw::c_int,
    pub cs_looplevel: ::std::os::raw::c_int,
    pub cs_trylevel: ::std::os::raw::c_int,
    pub cs_emsg_silent_list: *mut eslist_T,
    pub cs_lflags: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union condstack__bindgen_ty_1 {
    pub csp_rv: [*mut ::std::os::raw::c_void; 50usize],
    pub csp_ex: [*mut ::std::os::raw::c_void; 50usize],
}
#[test]
fn bindgen_test_layout_condstack__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<condstack__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<condstack__bindgen_ty_1>(),
        400usize,
        concat!("Size of: ", stringify!(condstack__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<condstack__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(condstack__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csp_rv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack__bindgen_ty_1),
            "::",
            stringify!(csp_rv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csp_ex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack__bindgen_ty_1),
            "::",
            stringify!(csp_ex)
        )
    );
}
#[test]
fn bindgen_test_layout_condstack() {
    const UNINIT: ::std::mem::MaybeUninit<condstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<condstack>(),
        1184usize,
        concat!("Size of: ", stringify!(condstack))
    );
    assert_eq!(
        ::std::mem::align_of::<condstack>(),
        8usize,
        concat!("Alignment of ", stringify!(condstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_pending) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_pend) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_pend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_forinfo) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_forinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_line) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_idx) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_looplevel) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_looplevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_trylevel) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_trylevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_emsg_silent_list) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_emsg_silent_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_lflags) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_lflags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msglist {
    pub msg: *mut ::std::os::raw::c_char,
    pub throw_msg: *mut ::std::os::raw::c_char,
    pub next: *mut msglist,
}
#[test]
fn bindgen_test_layout_msglist() {
    const UNINIT: ::std::mem::MaybeUninit<msglist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msglist>(),
        24usize,
        concat!("Size of: ", stringify!(msglist))
    );
    assert_eq!(
        ::std::mem::align_of::<msglist>(),
        8usize,
        concat!("Alignment of ", stringify!(msglist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throw_msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(throw_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(next)
        )
    );
}
pub const except_type_T_ET_USER: except_type_T = 0;
pub const except_type_T_ET_ERROR: except_type_T = 1;
pub const except_type_T_ET_INTERRUPT: except_type_T = 2;
pub type except_type_T = ::std::os::raw::c_uint;
pub type except_T = vim_exception;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vim_exception {
    pub type_: except_type_T,
    pub value: *mut ::std::os::raw::c_char,
    pub messages: *mut msglist,
    pub throw_name: *mut char_u,
    pub throw_lnum: linenr_T,
    pub caught: *mut except_T,
}
#[test]
fn bindgen_test_layout_vim_exception() {
    const UNINIT: ::std::mem::MaybeUninit<vim_exception> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vim_exception>(),
        48usize,
        concat!("Size of: ", stringify!(vim_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<vim_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(vim_exception))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(messages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throw_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(throw_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throw_lnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(throw_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).caught) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(caught)
        )
    );
}
pub type cleanup_T = cleanup_stuff;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cleanup_stuff {
    pub pending: ::std::os::raw::c_int,
    pub exception: *mut except_T,
}
#[test]
fn bindgen_test_layout_cleanup_stuff() {
    const UNINIT: ::std::mem::MaybeUninit<cleanup_stuff> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cleanup_stuff>(),
        16usize,
        concat!("Size of: ", stringify!(cleanup_stuff))
    );
    assert_eq!(
        ::std::mem::align_of::<cleanup_stuff>(),
        8usize,
        concat!("Alignment of ", stringify!(cleanup_stuff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cleanup_stuff),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cleanup_stuff),
            "::",
            stringify!(exception)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attr_entry {
    pub ae_attr: ::std::os::raw::c_short,
    pub ae_u: attr_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union attr_entry__bindgen_ty_1 {
    pub term: attr_entry__bindgen_ty_1__bindgen_ty_1,
    pub cterm: attr_entry__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attr_entry__bindgen_ty_1__bindgen_ty_1 {
    pub start: *mut char_u,
    pub stop: *mut char_u,
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(stop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attr_entry__bindgen_ty_1__bindgen_ty_2 {
    pub fg_color: short_u,
    pub bg_color: short_u,
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bg_color)
        )
    );
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(attr_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(attr_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cterm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1),
            "::",
            stringify!(cterm)
        )
    );
}
#[test]
fn bindgen_test_layout_attr_entry() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry>(),
        24usize,
        concat!("Size of: ", stringify!(attr_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(attr_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry),
            "::",
            stringify!(ae_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry),
            "::",
            stringify!(ae_u)
        )
    );
}
pub type attrentry_T = attr_entry;
pub type iconv_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn iconv_open(
        __tocode: *const ::std::os::raw::c_char,
        __fromcode: *const ::std::os::raw::c_char,
    ) -> iconv_t;
}
extern "C" {
    pub fn iconv(
        __cd: iconv_t,
        __inbuf: *mut *mut ::std::os::raw::c_char,
        __inbytesleft: *mut usize,
        __outbuf: *mut *mut ::std::os::raw::c_char,
        __outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn iconv_close(__cd: iconv_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct typebuf_T {
    pub tb_buf: *mut char_u,
    pub tb_noremap: *mut char_u,
    pub tb_buflen: ::std::os::raw::c_int,
    pub tb_off: ::std::os::raw::c_int,
    pub tb_len: ::std::os::raw::c_int,
    pub tb_maplen: ::std::os::raw::c_int,
    pub tb_silent: ::std::os::raw::c_int,
    pub tb_no_abbr_cnt: ::std::os::raw::c_int,
    pub tb_change_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_typebuf_T() {
    const UNINIT: ::std::mem::MaybeUninit<typebuf_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<typebuf_T>(),
        48usize,
        concat!("Size of: ", stringify!(typebuf_T))
    );
    assert_eq!(
        ::std::mem::align_of::<typebuf_T>(),
        8usize,
        concat!("Alignment of ", stringify!(typebuf_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_noremap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_noremap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_buflen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_buflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_off) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_maplen) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_maplen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_silent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_no_abbr_cnt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_no_abbr_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_change_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_change_cnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tasave_T {
    pub save_typebuf: typebuf_T,
    pub typebuf_valid: ::std::os::raw::c_int,
    pub old_char: ::std::os::raw::c_int,
    pub old_mod_mask: ::std::os::raw::c_int,
    pub save_readbuf1: buffheader_T,
    pub save_readbuf2: buffheader_T,
    pub save_inputbuf: *mut char_u,
}
#[test]
fn bindgen_test_layout_tasave_T() {
    const UNINIT: ::std::mem::MaybeUninit<tasave_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tasave_T>(),
        136usize,
        concat!("Size of: ", stringify!(tasave_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tasave_T>(),
        8usize,
        concat!("Alignment of ", stringify!(tasave_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_typebuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_typebuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typebuf_valid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(typebuf_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_char) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(old_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_mod_mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(old_mod_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_readbuf1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_readbuf1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_readbuf2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_readbuf2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_inputbuf) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_inputbuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vimconv_T {
    pub vc_type: ::std::os::raw::c_int,
    pub vc_factor: ::std::os::raw::c_int,
    pub vc_fd: iconv_t,
    pub vc_fail: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vimconv_T() {
    const UNINIT: ::std::mem::MaybeUninit<vimconv_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vimconv_T>(),
        24usize,
        concat!("Size of: ", stringify!(vimconv_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vimconv_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vimconv_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_factor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_fail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_fail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vir_T {
    pub vir_line: *mut char_u,
    pub vir_fd: *mut FILE,
    pub vir_conv: vimconv_T,
    pub vir_version: ::std::os::raw::c_int,
    pub vir_barlines: garray_T,
}
#[test]
fn bindgen_test_layout_vir_T() {
    const UNINIT: ::std::mem::MaybeUninit<vir_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vir_T>(),
        72usize,
        concat!("Size of: ", stringify!(vir_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vir_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vir_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_conv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_conv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_barlines) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_barlines)
        )
    );
}
pub type mapblock_T = mapblock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mapblock {
    pub m_next: *mut mapblock_T,
    pub m_keys: *mut char_u,
    pub m_orig_keys: *mut char_u,
    pub m_str: *mut char_u,
    pub m_orig_str: *mut char_u,
    pub m_keylen: ::std::os::raw::c_int,
    pub m_mode: ::std::os::raw::c_int,
    pub m_noremap: ::std::os::raw::c_int,
    pub m_silent: ::std::os::raw::c_char,
    pub m_nowait: ::std::os::raw::c_char,
    pub m_expr: ::std::os::raw::c_char,
    pub m_script_ctx: sctx_T,
}
#[test]
fn bindgen_test_layout_mapblock() {
    const UNINIT: ::std::mem::MaybeUninit<mapblock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mapblock>(),
        80usize,
        concat!("Size of: ", stringify!(mapblock))
    );
    assert_eq!(
        ::std::mem::align_of::<mapblock>(),
        8usize,
        concat!("Alignment of ", stringify!(mapblock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_keys) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_orig_keys) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_orig_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_str) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_orig_str) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_orig_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_keylen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_keylen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_noremap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_noremap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_silent) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_nowait) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_nowait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_expr) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_expr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_script_ctx) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_script_ctx)
        )
    );
}
pub type InputMapCallback = ::std::option::Option<unsafe extern "C" fn(mapping: *const mapblock_T)>;
pub type InputUnmapCallback = ::std::option::Option<
    unsafe extern "C" fn(mode: ::std::os::raw::c_int, orig_lhs: *const char_u),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stl_hlrec {
    pub start: *mut char_u,
    pub userhl: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_stl_hlrec() {
    const UNINIT: ::std::mem::MaybeUninit<stl_hlrec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stl_hlrec>(),
        16usize,
        concat!("Size of: ", stringify!(stl_hlrec))
    );
    assert_eq!(
        ::std::mem::align_of::<stl_hlrec>(),
        8usize,
        concat!("Alignment of ", stringify!(stl_hlrec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stl_hlrec),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userhl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stl_hlrec),
            "::",
            stringify!(userhl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashitem_S {
    pub hi_hash: long_u,
    pub hi_key: *mut char_u,
}
#[test]
fn bindgen_test_layout_hashitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<hashitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashitem_S>(),
        16usize,
        concat!("Size of: ", stringify!(hashitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<hashitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(hashitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi_hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashitem_S),
            "::",
            stringify!(hi_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashitem_S),
            "::",
            stringify!(hi_key)
        )
    );
}
pub type hashitem_T = hashitem_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashtable_S {
    pub ht_mask: long_u,
    pub ht_used: long_u,
    pub ht_filled: long_u,
    pub ht_locked: ::std::os::raw::c_int,
    pub ht_error: ::std::os::raw::c_int,
    pub ht_array: *mut hashitem_T,
    pub ht_smallarray: [hashitem_T; 16usize],
}
#[test]
fn bindgen_test_layout_hashtable_S() {
    const UNINIT: ::std::mem::MaybeUninit<hashtable_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashtable_S>(),
        296usize,
        concat!("Size of: ", stringify!(hashtable_S))
    );
    assert_eq!(
        ::std::mem::align_of::<hashtable_S>(),
        8usize,
        concat!("Alignment of ", stringify!(hashtable_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_used) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_filled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_filled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_locked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_error) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_array) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_smallarray) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_smallarray)
        )
    );
}
pub type hashtab_T = hashtable_S;
pub type hash_T = long_u;
pub type varnumber_T = i64;
pub type uvarnumber_T = u64;
pub type float_T = f64;
pub type list_T = listvar_S;
pub type dict_T = dictvar_S;
pub type partial_T = partial_S;
pub type blob_T = blobvar_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callback_T {
    pub cb_name: *mut char_u,
    pub cb_partial: *mut partial_T,
    pub cb_free_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_callback_T() {
    const UNINIT: ::std::mem::MaybeUninit<callback_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<callback_T>(),
        24usize,
        concat!("Size of: ", stringify!(callback_T))
    );
    assert_eq!(
        ::std::mem::align_of::<callback_T>(),
        8usize,
        concat!("Alignment of ", stringify!(callback_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_partial) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_free_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_free_name)
        )
    );
}
pub type job_T = jobvar_S;
pub type readq_T = readq_S;
pub type writeq_T = writeq_S;
pub type jsonq_T = jsonq_S;
pub type cbq_T = cbq_S;
pub type channel_T = channel_S;
pub const vartype_T_VAR_UNKNOWN: vartype_T = 0;
pub const vartype_T_VAR_NUMBER: vartype_T = 1;
pub const vartype_T_VAR_STRING: vartype_T = 2;
pub const vartype_T_VAR_FUNC: vartype_T = 3;
pub const vartype_T_VAR_PARTIAL: vartype_T = 4;
pub const vartype_T_VAR_LIST: vartype_T = 5;
pub const vartype_T_VAR_DICT: vartype_T = 6;
pub const vartype_T_VAR_FLOAT: vartype_T = 7;
pub const vartype_T_VAR_SPECIAL: vartype_T = 8;
pub const vartype_T_VAR_JOB: vartype_T = 9;
pub const vartype_T_VAR_CHANNEL: vartype_T = 10;
pub const vartype_T_VAR_BLOB: vartype_T = 11;
pub type vartype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct typval_T {
    pub v_type: vartype_T,
    pub v_lock: ::std::os::raw::c_char,
    pub vval: typval_T__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typval_T__bindgen_ty_1 {
    pub v_number: varnumber_T,
    pub v_float: float_T,
    pub v_string: *mut char_u,
    pub v_list: *mut list_T,
    pub v_dict: *mut dict_T,
    pub v_partial: *mut partial_T,
    pub v_job: *mut job_T,
    pub v_channel: *mut channel_T,
    pub v_blob: *mut blob_T,
}
#[test]
fn bindgen_test_layout_typval_T__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<typval_T__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<typval_T__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(typval_T__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<typval_T__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(typval_T__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_float) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_dict) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_partial) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_job) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_job)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_blob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_blob)
        )
    );
}
#[test]
fn bindgen_test_layout_typval_T() {
    const UNINIT: ::std::mem::MaybeUninit<typval_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<typval_T>(),
        16usize,
        concat!("Size of: ", stringify!(typval_T))
    );
    assert_eq!(
        ::std::mem::align_of::<typval_T>(),
        8usize,
        concat!("Alignment of ", stringify!(typval_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(v_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_lock) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(v_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(vval)
        )
    );
}
pub type listitem_T = listitem_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct listitem_S {
    pub li_next: *mut listitem_T,
    pub li_prev: *mut listitem_T,
    pub li_tv: typval_T,
}
#[test]
fn bindgen_test_layout_listitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<listitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listitem_S>(),
        32usize,
        concat!("Size of: ", stringify!(listitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).li_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).li_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).li_tv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_tv)
        )
    );
}
pub type listwatch_T = listwatch_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listwatch_S {
    pub lw_item: *mut listitem_T,
    pub lw_next: *mut listwatch_T,
}
#[test]
fn bindgen_test_layout_listwatch_S() {
    const UNINIT: ::std::mem::MaybeUninit<listwatch_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listwatch_S>(),
        16usize,
        concat!("Size of: ", stringify!(listwatch_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listwatch_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listwatch_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lw_item) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listwatch_S),
            "::",
            stringify!(lw_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lw_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listwatch_S),
            "::",
            stringify!(lw_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listvar_S {
    pub lv_first: *mut listitem_T,
    pub lv_last: *mut listitem_T,
    pub lv_watch: *mut listwatch_T,
    pub lv_idx_item: *mut listitem_T,
    pub lv_copylist: *mut list_T,
    pub lv_used_next: *mut list_T,
    pub lv_used_prev: *mut list_T,
    pub lv_refcount: ::std::os::raw::c_int,
    pub lv_len: ::std::os::raw::c_int,
    pub lv_idx: ::std::os::raw::c_int,
    pub lv_copyID: ::std::os::raw::c_int,
    pub lv_lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_listvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<listvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listvar_S>(),
        80usize,
        concat!("Size of: ", stringify!(listvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_watch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_watch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_idx_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_idx_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_copylist) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_copylist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_used_next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_used_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_used_prev) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_used_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_refcount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_len) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_idx) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_copyID) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_lock) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_lock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct staticList10_T {
    pub sl_list: list_T,
    pub sl_items: [listitem_T; 10usize],
}
#[test]
fn bindgen_test_layout_staticList10_T() {
    const UNINIT: ::std::mem::MaybeUninit<staticList10_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<staticList10_T>(),
        400usize,
        concat!("Size of: ", stringify!(staticList10_T))
    );
    assert_eq!(
        ::std::mem::align_of::<staticList10_T>(),
        8usize,
        concat!("Alignment of ", stringify!(staticList10_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(staticList10_T),
            "::",
            stringify!(sl_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_items) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(staticList10_T),
            "::",
            stringify!(sl_items)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dictitem_S {
    pub di_tv: typval_T,
    pub di_flags: char_u,
    pub di_key: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_dictitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<dictitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dictitem_S>(),
        24usize,
        concat!("Size of: ", stringify!(dictitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_tv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_key) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_key)
        )
    );
}
pub type dictitem_T = dictitem_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dictitem16_S {
    pub di_tv: typval_T,
    pub di_flags: char_u,
    pub di_key: [char_u; 17usize],
}
#[test]
fn bindgen_test_layout_dictitem16_S() {
    const UNINIT: ::std::mem::MaybeUninit<dictitem16_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dictitem16_S>(),
        40usize,
        concat!("Size of: ", stringify!(dictitem16_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictitem16_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictitem16_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_tv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_key) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_key)
        )
    );
}
pub type dictitem16_T = dictitem16_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dictvar_S {
    pub dv_lock: ::std::os::raw::c_char,
    pub dv_scope: ::std::os::raw::c_char,
    pub dv_refcount: ::std::os::raw::c_int,
    pub dv_copyID: ::std::os::raw::c_int,
    pub dv_hashtab: hashtab_T,
    pub dv_copydict: *mut dict_T,
    pub dv_used_next: *mut dict_T,
    pub dv_used_prev: *mut dict_T,
}
#[test]
fn bindgen_test_layout_dictvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<dictvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dictvar_S>(),
        336usize,
        concat!("Size of: ", stringify!(dictvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_scope) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_scope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_refcount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_copyID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_hashtab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_hashtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_copydict) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_copydict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_used_next) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_used_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_used_prev) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_used_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blobvar_S {
    pub bv_ga: garray_T,
    pub bv_refcount: ::std::os::raw::c_int,
    pub bv_lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_blobvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<blobvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<blobvar_S>(),
        32usize,
        concat!("Size of: ", stringify!(blobvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<blobvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(blobvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_ga) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_lock) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_lock)
        )
    );
}
pub type funccall_T = funccall_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ufunc_T {
    pub uf_varargs: ::std::os::raw::c_int,
    pub uf_flags: ::std::os::raw::c_int,
    pub uf_calls: ::std::os::raw::c_int,
    pub uf_cleared: ::std::os::raw::c_int,
    pub uf_args: garray_T,
    pub uf_def_args: garray_T,
    pub uf_lines: garray_T,
    pub uf_profiling: ::std::os::raw::c_int,
    pub uf_prof_initialized: ::std::os::raw::c_int,
    pub uf_tm_count: ::std::os::raw::c_int,
    pub uf_tm_total: proftime_T,
    pub uf_tm_self: proftime_T,
    pub uf_tm_children: proftime_T,
    pub uf_tml_count: *mut ::std::os::raw::c_int,
    pub uf_tml_total: *mut proftime_T,
    pub uf_tml_self: *mut proftime_T,
    pub uf_tml_start: proftime_T,
    pub uf_tml_children: proftime_T,
    pub uf_tml_wait: proftime_T,
    pub uf_tml_idx: ::std::os::raw::c_int,
    pub uf_tml_execed: ::std::os::raw::c_int,
    pub uf_script_ctx: sctx_T,
    pub uf_refcount: ::std::os::raw::c_int,
    pub uf_scoped: *mut funccall_T,
    pub uf_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_ufunc_T() {
    const UNINIT: ::std::mem::MaybeUninit<ufunc_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ufunc_T>(),
        280usize,
        concat!("Size of: ", stringify!(ufunc_T))
    );
    assert_eq!(
        ::std::mem::align_of::<ufunc_T>(),
        8usize,
        concat!("Alignment of ", stringify!(ufunc_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_varargs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_varargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_calls) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_calls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_cleared) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_cleared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_def_args) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_def_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_lines) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_profiling) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_profiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_prof_initialized) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_prof_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_count) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_total) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_self) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_self)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_children) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_count) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_total) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_self) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_self)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_start) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_children) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_wait) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_idx) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_execed) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_execed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_script_ctx) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_script_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_refcount) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_scoped) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_scoped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_name) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct funccall_S {
    pub func: *mut ufunc_T,
    pub linenr: ::std::os::raw::c_int,
    pub returned: ::std::os::raw::c_int,
    pub fixvar: [funccall_S__bindgen_ty_1; 12usize],
    pub l_vars: dict_T,
    pub l_vars_var: dictitem_T,
    pub l_avars: dict_T,
    pub l_avars_var: dictitem_T,
    pub l_varlist: list_T,
    pub l_listitems: [listitem_T; 20usize],
    pub rettv: *mut typval_T,
    pub breakpoint: linenr_T,
    pub dbg_tick: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub prof_child: proftime_T,
    pub caller: *mut funccall_T,
    pub fc_refcount: ::std::os::raw::c_int,
    pub fc_copyID: ::std::os::raw::c_int,
    pub fc_funcs: garray_T,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct funccall_S__bindgen_ty_1 {
    pub var: dictitem_T,
    pub room: [char_u; 20usize],
}
#[test]
fn bindgen_test_layout_funccall_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<funccall_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funccall_S__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(funccall_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<funccall_S__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(funccall_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S__bindgen_ty_1),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).room) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S__bindgen_ty_1),
            "::",
            stringify!(room)
        )
    );
}
#[test]
fn bindgen_test_layout_funccall_S() {
    const UNINIT: ::std::mem::MaybeUninit<funccall_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funccall_S>(),
        2112usize,
        concat!("Size of: ", stringify!(funccall_S))
    );
    assert_eq!(
        ::std::mem::align_of::<funccall_S>(),
        8usize,
        concat!("Alignment of ", stringify!(funccall_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linenr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(linenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returned) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(returned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixvar) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fixvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_vars) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_vars_var) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_vars_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_avars) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_avars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_avars_var) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_avars_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_varlist) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_varlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_listitems) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_listitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rettv) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(rettv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breakpoint) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(breakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbg_tick) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(dbg_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prof_child) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(prof_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).caller) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(caller)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fc_refcount) as usize - ptr as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fc_copyID) as usize - ptr as usize },
        2084usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fc_funcs) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_funcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct funcdict_T {
    pub fd_dict: *mut dict_T,
    pub fd_newkey: *mut char_u,
    pub fd_di: *mut dictitem_T,
}
#[test]
fn bindgen_test_layout_funcdict_T() {
    const UNINIT: ::std::mem::MaybeUninit<funcdict_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funcdict_T>(),
        24usize,
        concat!("Size of: ", stringify!(funcdict_T))
    );
    assert_eq!(
        ::std::mem::align_of::<funcdict_T>(),
        8usize,
        concat!("Alignment of ", stringify!(funcdict_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_dict) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_newkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_newkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_di) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_di)
        )
    );
}
pub type funccal_entry_T = funccal_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct funccal_entry {
    pub top_funccal: *mut ::std::os::raw::c_void,
    pub next: *mut funccal_entry_T,
}
#[test]
fn bindgen_test_layout_funccal_entry() {
    const UNINIT: ::std::mem::MaybeUninit<funccal_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funccal_entry>(),
        16usize,
        concat!("Size of: ", stringify!(funccal_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<funccal_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(funccal_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_funccal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccal_entry),
            "::",
            stringify!(top_funccal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funccal_entry),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partial_S {
    pub pt_refcount: ::std::os::raw::c_int,
    pub pt_name: *mut char_u,
    pub pt_func: *mut ufunc_T,
    pub pt_auto: ::std::os::raw::c_int,
    pub pt_argc: ::std::os::raw::c_int,
    pub pt_argv: *mut typval_T,
    pub pt_dict: *mut dict_T,
}
#[test]
fn bindgen_test_layout_partial_S() {
    const UNINIT: ::std::mem::MaybeUninit<partial_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<partial_S>(),
        48usize,
        concat!("Size of: ", stringify!(partial_S))
    );
    assert_eq!(
        ::std::mem::align_of::<partial_S>(),
        8usize,
        concat!("Alignment of ", stringify!(partial_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_auto) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_auto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_argc) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_argv) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_dict) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_dict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttyinfo_T {
    pub backspace: ::std::os::raw::c_int,
    pub enter: ::std::os::raw::c_int,
    pub interrupt: ::std::os::raw::c_int,
    pub nl_does_cr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ttyinfo_T() {
    const UNINIT: ::std::mem::MaybeUninit<ttyinfo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ttyinfo_T>(),
        16usize,
        concat!("Size of: ", stringify!(ttyinfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<ttyinfo_T>(),
        4usize,
        concat!("Alignment of ", stringify!(ttyinfo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backspace) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(backspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(interrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nl_does_cr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(nl_does_cr)
        )
    );
}
pub const jobstatus_T_JOB_FAILED: jobstatus_T = 0;
pub const jobstatus_T_JOB_STARTED: jobstatus_T = 1;
pub const jobstatus_T_JOB_ENDED: jobstatus_T = 2;
pub const jobstatus_T_JOB_FINISHED: jobstatus_T = 3;
pub type jobstatus_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobvar_S {
    pub jv_next: *mut job_T,
    pub jv_prev: *mut job_T,
    pub jv_pid: pid_t,
    pub jv_tty_in: *mut char_u,
    pub jv_tty_out: *mut char_u,
    pub jv_status: jobstatus_T,
    pub jv_stoponexit: *mut char_u,
    pub jv_termsig: *mut char_u,
    pub jv_exitval: ::std::os::raw::c_int,
    pub jv_exit_cb: callback_T,
    pub jv_in_buf: *mut buf_T,
    pub jv_refcount: ::std::os::raw::c_int,
    pub jv_copyID: ::std::os::raw::c_int,
    pub jv_channel: *mut channel_T,
    pub jv_argv: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_jobvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<jobvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jobvar_S>(),
        128usize,
        concat!("Size of: ", stringify!(jobvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<jobvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(jobvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_tty_in) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_tty_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_tty_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_tty_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_status) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_stoponexit) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_stoponexit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_termsig) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_termsig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_exitval) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_exitval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_exit_cb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_exit_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_in_buf) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_in_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_refcount) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_copyID) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_channel) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_argv) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_argv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readq_S {
    pub rq_buffer: *mut char_u,
    pub rq_buflen: long_u,
    pub rq_next: *mut readq_T,
    pub rq_prev: *mut readq_T,
}
#[test]
fn bindgen_test_layout_readq_S() {
    const UNINIT: ::std::mem::MaybeUninit<readq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<readq_S>(),
        32usize,
        concat!("Size of: ", stringify!(readq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<readq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(readq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_buflen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_buflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct writeq_S {
    pub wq_ga: garray_T,
    pub wq_next: *mut writeq_T,
    pub wq_prev: *mut writeq_T,
}
#[test]
fn bindgen_test_layout_writeq_S() {
    const UNINIT: ::std::mem::MaybeUninit<writeq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<writeq_S>(),
        40usize,
        concat!("Size of: ", stringify!(writeq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<writeq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(writeq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_ga) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jsonq_S {
    pub jq_value: *mut typval_T,
    pub jq_next: *mut jsonq_T,
    pub jq_prev: *mut jsonq_T,
    pub jq_no_callback: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jsonq_S() {
    const UNINIT: ::std::mem::MaybeUninit<jsonq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jsonq_S>(),
        32usize,
        concat!("Size of: ", stringify!(jsonq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<jsonq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(jsonq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_no_callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_no_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cbq_S {
    pub cq_callback: callback_T,
    pub cq_seq_nr: ::std::os::raw::c_int,
    pub cq_next: *mut cbq_T,
    pub cq_prev: *mut cbq_T,
}
#[test]
fn bindgen_test_layout_cbq_S() {
    const UNINIT: ::std::mem::MaybeUninit<cbq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cbq_S>(),
        48usize,
        concat!("Size of: ", stringify!(cbq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<cbq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(cbq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_seq_nr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_seq_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_prev)
        )
    );
}
pub const ch_mode_T_MODE_NL: ch_mode_T = 0;
pub const ch_mode_T_MODE_RAW: ch_mode_T = 1;
pub const ch_mode_T_MODE_JSON: ch_mode_T = 2;
pub const ch_mode_T_MODE_JS: ch_mode_T = 3;
pub type ch_mode_T = ::std::os::raw::c_uint;
pub const job_io_T_JIO_PIPE: job_io_T = 0;
pub const job_io_T_JIO_NULL: job_io_T = 1;
pub const job_io_T_JIO_FILE: job_io_T = 2;
pub const job_io_T_JIO_BUFFER: job_io_T = 3;
pub const job_io_T_JIO_OUT: job_io_T = 4;
pub type job_io_T = ::std::os::raw::c_uint;
pub const ch_part_T_PART_SOCK: ch_part_T = 0;
pub const ch_part_T_PART_OUT: ch_part_T = 1;
pub const ch_part_T_PART_ERR: ch_part_T = 2;
pub const ch_part_T_PART_IN: ch_part_T = 3;
pub const ch_part_T_PART_COUNT: ch_part_T = 4;
pub type ch_part_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chanpart_T {
    pub ch_fd: sock_T,
    pub ch_mode: ch_mode_T,
    pub ch_io: job_io_T,
    pub ch_timeout: ::std::os::raw::c_int,
    pub ch_head: readq_T,
    pub ch_json_head: jsonq_T,
    pub ch_block_id: ::std::os::raw::c_int,
    pub ch_wait_len: usize,
    pub ch_deadline: timeval,
    pub ch_block_write: ::std::os::raw::c_int,
    pub ch_nonblocking: ::std::os::raw::c_int,
    pub ch_writeque: writeq_T,
    pub ch_cb_head: cbq_T,
    pub ch_callback: callback_T,
    pub ch_bufref: bufref_T,
    pub ch_nomodifiable: ::std::os::raw::c_int,
    pub ch_nomod_error: ::std::os::raw::c_int,
    pub ch_buf_append: ::std::os::raw::c_int,
    pub ch_buf_top: linenr_T,
    pub ch_buf_bot: linenr_T,
}
#[test]
fn bindgen_test_layout_chanpart_T() {
    const UNINIT: ::std::mem::MaybeUninit<chanpart_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<chanpart_T>(),
        280usize,
        concat!("Size of: ", stringify!(chanpart_T))
    );
    assert_eq!(
        ::std::mem::align_of::<chanpart_T>(),
        8usize,
        concat!("Alignment of ", stringify!(chanpart_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_io) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_timeout) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_head) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_json_head) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_json_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_block_id) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_block_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_wait_len) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_wait_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_deadline) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_deadline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_block_write) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_block_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nonblocking) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nonblocking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_writeque) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_writeque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_cb_head) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_cb_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_callback) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_bufref) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_bufref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nomodifiable) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nomodifiable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nomod_error) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nomod_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_buf_append) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_buf_top) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_buf_bot) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_bot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_S {
    pub ch_next: *mut channel_T,
    pub ch_prev: *mut channel_T,
    pub ch_id: ::std::os::raw::c_int,
    pub ch_last_msg_id: ::std::os::raw::c_int,
    pub ch_part: [chanpart_T; 4usize],
    pub ch_write_text_mode: ::std::os::raw::c_int,
    pub ch_hostname: *mut ::std::os::raw::c_char,
    pub ch_port: ::std::os::raw::c_int,
    pub ch_to_be_closed: ::std::os::raw::c_int,
    pub ch_to_be_freed: ::std::os::raw::c_int,
    pub ch_error: ::std::os::raw::c_int,
    pub ch_nb_close_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub ch_callback: callback_T,
    pub ch_close_cb: callback_T,
    pub ch_drop_never: ::std::os::raw::c_int,
    pub ch_keep_open: ::std::os::raw::c_int,
    pub ch_nonblock: ::std::os::raw::c_int,
    pub ch_job: *mut job_T,
    pub ch_job_killed: ::std::os::raw::c_int,
    pub ch_anonymous_pipe: ::std::os::raw::c_int,
    pub ch_killing: ::std::os::raw::c_int,
    pub ch_refcount: ::std::os::raw::c_int,
    pub ch_copyID: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_channel_S() {
    const UNINIT: ::std::mem::MaybeUninit<channel_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<channel_S>(),
        1280usize,
        concat!("Size of: ", stringify!(channel_S))
    );
    assert_eq!(
        ::std::mem::align_of::<channel_S>(),
        8usize,
        concat!("Alignment of ", stringify!(channel_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_last_msg_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_last_msg_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_part) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_write_text_mode) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_write_text_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_hostname) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_hostname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_port) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_to_be_closed) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_to_be_closed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_to_be_freed) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_to_be_freed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_error) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nb_close_cb) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_nb_close_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_callback) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_close_cb) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_close_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_drop_never) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_drop_never)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_keep_open) as usize - ptr as usize },
        1236usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_keep_open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nonblock) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_nonblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_job) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_job)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_job_killed) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_job_killed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_anonymous_pipe) as usize - ptr as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_anonymous_pipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_killing) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_killing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_refcount) as usize - ptr as usize },
        1268usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_copyID) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_copyID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobopt_T {
    pub jo_set: ::std::os::raw::c_int,
    pub jo_set2: ::std::os::raw::c_int,
    pub jo_mode: ch_mode_T,
    pub jo_in_mode: ch_mode_T,
    pub jo_out_mode: ch_mode_T,
    pub jo_err_mode: ch_mode_T,
    pub jo_noblock: ::std::os::raw::c_int,
    pub jo_io: [job_io_T; 4usize],
    pub jo_io_name_buf: [[char_u; 65usize]; 4usize],
    pub jo_io_name: [*mut char_u; 4usize],
    pub jo_io_buf: [::std::os::raw::c_int; 4usize],
    pub jo_pty: ::std::os::raw::c_int,
    pub jo_modifiable: [::std::os::raw::c_int; 4usize],
    pub jo_message: [::std::os::raw::c_int; 4usize],
    pub jo_channel: *mut channel_T,
    pub jo_in_top: linenr_T,
    pub jo_in_bot: linenr_T,
    pub jo_callback: callback_T,
    pub jo_out_cb: callback_T,
    pub jo_err_cb: callback_T,
    pub jo_close_cb: callback_T,
    pub jo_exit_cb: callback_T,
    pub jo_drop_never: ::std::os::raw::c_int,
    pub jo_waittime: ::std::os::raw::c_int,
    pub jo_timeout: ::std::os::raw::c_int,
    pub jo_out_timeout: ::std::os::raw::c_int,
    pub jo_err_timeout: ::std::os::raw::c_int,
    pub jo_block_write: ::std::os::raw::c_int,
    pub jo_part: ::std::os::raw::c_int,
    pub jo_id: ::std::os::raw::c_int,
    pub jo_soe_buf: [char_u; 65usize],
    pub jo_stoponexit: *mut char_u,
    pub jo_env: *mut dict_T,
    pub jo_cwd_buf: [char_u; 65usize],
    pub jo_cwd: *mut char_u,
    pub jo_term_rows: ::std::os::raw::c_int,
    pub jo_term_cols: ::std::os::raw::c_int,
    pub jo_vertical: ::std::os::raw::c_int,
    pub jo_curwin: ::std::os::raw::c_int,
    pub jo_hidden: ::std::os::raw::c_int,
    pub jo_term_norestore: ::std::os::raw::c_int,
    pub jo_term_name: *mut char_u,
    pub jo_term_opencmd: *mut char_u,
    pub jo_term_finish: ::std::os::raw::c_int,
    pub jo_eof_chars: *mut char_u,
    pub jo_term_kill: *mut char_u,
    pub jo_tty_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jobopt_T() {
    const UNINIT: ::std::mem::MaybeUninit<jobopt_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jobopt_T>(),
        808usize,
        concat!("Size of: ", stringify!(jobopt_T))
    );
    assert_eq!(
        ::std::mem::align_of::<jobopt_T>(),
        8usize,
        concat!("Alignment of ", stringify!(jobopt_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_set2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_set2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_in_mode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_out_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_err_mode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_noblock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_noblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io_name_buf) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_name_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io_name) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io_buf) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_pty) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_pty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_modifiable) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_modifiable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_message) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_channel) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_in_top) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_in_bot) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_callback) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_out_cb) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_err_cb) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_close_cb) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_close_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_exit_cb) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_exit_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_drop_never) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_drop_never)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_waittime) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_waittime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_timeout) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_out_timeout) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_err_timeout) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_block_write) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_block_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_part) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_id) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_soe_buf) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_soe_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_stoponexit) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_stoponexit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_env) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_env)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_cwd_buf) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_cwd_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_cwd) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_cwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_rows) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_cols) as usize - ptr as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_vertical) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_curwin) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_hidden) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_hidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_norestore) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_norestore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_name) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_opencmd) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_opencmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_finish) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_finish)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_eof_chars) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_eof_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_kill) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_tty_type) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_tty_type)
        )
    );
}
pub type listener_T = listener_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listener_S {
    pub lr_next: *mut listener_T,
    pub lr_id: ::std::os::raw::c_int,
    pub lr_callback: callback_T,
}
#[test]
fn bindgen_test_layout_listener_S() {
    const UNINIT: ::std::mem::MaybeUninit<listener_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listener_S>(),
        40usize,
        concat!("Size of: ", stringify!(listener_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listener_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listener_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_callback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_stack_S {
    pub ht: *mut hashtab_T,
    pub prev: *mut ht_stack_S,
}
#[test]
fn bindgen_test_layout_ht_stack_S() {
    const UNINIT: ::std::mem::MaybeUninit<ht_stack_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_stack_S>(),
        16usize,
        concat!("Size of: ", stringify!(ht_stack_S))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_stack_S>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_stack_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_stack_S),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_stack_S),
            "::",
            stringify!(prev)
        )
    );
}
pub type ht_stack_T = ht_stack_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_stack_S {
    pub list: *mut list_T,
    pub prev: *mut list_stack_S,
}
#[test]
fn bindgen_test_layout_list_stack_S() {
    const UNINIT: ::std::mem::MaybeUninit<list_stack_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<list_stack_S>(),
        16usize,
        concat!("Size of: ", stringify!(list_stack_S))
    );
    assert_eq!(
        ::std::mem::align_of::<list_stack_S>(),
        8usize,
        concat!("Alignment of ", stringify!(list_stack_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_stack_S),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_stack_S),
            "::",
            stringify!(prev)
        )
    );
}
pub type list_stack_T = list_stack_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dict_iterator_T {
    pub dit_todo: long_u,
    pub dit_hi: *mut hashitem_T,
}
#[test]
fn bindgen_test_layout_dict_iterator_T() {
    const UNINIT: ::std::mem::MaybeUninit<dict_iterator_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dict_iterator_T>(),
        16usize,
        concat!("Size of: ", stringify!(dict_iterator_T))
    );
    assert_eq!(
        ::std::mem::align_of::<dict_iterator_T>(),
        8usize,
        concat!("Alignment of ", stringify!(dict_iterator_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dit_todo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dict_iterator_T),
            "::",
            stringify!(dit_todo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dit_hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dict_iterator_T),
            "::",
            stringify!(dit_hi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qf_info_S {
    _unused: [u8; 0],
}
pub type qf_info_T = qf_info_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syn_time_T {
    pub total: proftime_T,
    pub slowest: proftime_T,
    pub count: ::std::os::raw::c_long,
    pub match_: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_syn_time_T() {
    const UNINIT: ::std::mem::MaybeUninit<syn_time_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syn_time_T>(),
        48usize,
        concat!("Size of: ", stringify!(syn_time_T))
    );
    assert_eq!(
        ::std::mem::align_of::<syn_time_T>(),
        8usize,
        concat!("Alignment of ", stringify!(syn_time_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slowest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(slowest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(match_)
        )
    );
}
pub type timer_T = timer_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_S {
    pub tr_id: ::std::os::raw::c_long,
    pub tr_next: *mut timer_T,
    pub tr_prev: *mut timer_T,
    pub tr_due: proftime_T,
    pub tr_firing: ::std::os::raw::c_char,
    pub tr_paused: ::std::os::raw::c_char,
    pub tr_repeat: ::std::os::raw::c_int,
    pub tr_interval: ::std::os::raw::c_long,
    pub tr_callback: callback_T,
    pub tr_emsg_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timer_S() {
    const UNINIT: ::std::mem::MaybeUninit<timer_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timer_S>(),
        88usize,
        concat!("Size of: ", stringify!(timer_S))
    );
    assert_eq!(
        ::std::mem::align_of::<timer_S>(),
        8usize,
        concat!("Alignment of ", stringify!(timer_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_due) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_due)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_firing) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_firing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_paused) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_paused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_repeat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_interval) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_callback) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_emsg_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_emsg_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct synblock_T {
    pub dummy: ::std::os::raw::c_int,
    pub b_syn_chartab: [char_u; 32usize],
    pub b_syn_isk: *mut char_u,
}
#[test]
fn bindgen_test_layout_synblock_T() {
    const UNINIT: ::std::mem::MaybeUninit<synblock_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<synblock_T>(),
        48usize,
        concat!("Size of: ", stringify!(synblock_T))
    );
    assert_eq!(
        ::std::mem::align_of::<synblock_T>(),
        8usize,
        concat!("Alignment of ", stringify!(synblock_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_syn_chartab) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(b_syn_chartab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_syn_isk) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(b_syn_isk)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_buffer {
    pub b_ml: memline_T,
    pub b_next: *mut buf_T,
    pub b_prev: *mut buf_T,
    pub b_nwindows: ::std::os::raw::c_int,
    pub b_flags: ::std::os::raw::c_int,
    pub b_locked: ::std::os::raw::c_int,
    pub b_ffname: *mut char_u,
    pub b_sfname: *mut char_u,
    pub b_fname: *mut char_u,
    pub b_dev_valid: ::std::os::raw::c_int,
    pub b_dev: dev_t,
    pub b_ino: ino_t,
    pub b_fnum: ::std::os::raw::c_int,
    pub b_key: [char_u; 9usize],
    pub b_changed: ::std::os::raw::c_int,
    pub b_ct_di: dictitem16_T,
    pub b_last_changedtick: varnumber_T,
    pub b_saving: ::std::os::raw::c_int,
    pub b_mod_set: ::std::os::raw::c_int,
    pub b_mod_top: linenr_T,
    pub b_mod_bot: linenr_T,
    pub b_mod_xlines: ::std::os::raw::c_long,
    pub b_wininfo: *mut wininfo_T,
    pub b_mtime: ::std::os::raw::c_long,
    pub b_mtime_read: ::std::os::raw::c_long,
    pub b_orig_size: off_T,
    pub b_orig_mode: ::std::os::raw::c_int,
    pub b_last_used: time_T,
    pub b_namedm: [pos_T; 26usize],
    pub b_visual: visualinfo_T,
    pub b_visual_mode_eval: ::std::os::raw::c_int,
    pub b_last_cursor: pos_T,
    pub b_last_insert: pos_T,
    pub b_last_change: pos_T,
    pub b_changelist: [pos_T; 100usize],
    pub b_changelistlen: ::std::os::raw::c_int,
    pub b_new_change: ::std::os::raw::c_int,
    pub b_chartab: [char_u; 32usize],
    pub b_maphash: [*mut mapblock_T; 256usize],
    pub b_first_abbr: *mut mapblock_T,
    pub b_ucmds: garray_T,
    pub b_op_start: pos_T,
    pub b_op_start_orig: pos_T,
    pub b_op_end: pos_T,
    pub b_marks_read: ::std::os::raw::c_int,
    pub b_u_oldhead: *mut u_header_T,
    pub b_u_newhead: *mut u_header_T,
    pub b_u_curhead: *mut u_header_T,
    pub b_u_numhead: ::std::os::raw::c_int,
    pub b_u_synced: ::std::os::raw::c_int,
    pub b_u_seq_last: ::std::os::raw::c_long,
    pub b_u_save_nr_last: ::std::os::raw::c_long,
    pub b_u_seq_cur: ::std::os::raw::c_long,
    pub b_u_time_cur: time_T,
    pub b_u_save_nr_cur: ::std::os::raw::c_long,
    pub b_u_line_ptr: undoline_T,
    pub b_u_line_lnum: linenr_T,
    pub b_u_line_colnr: colnr_T,
    pub b_p_iminsert: ::std::os::raw::c_long,
    pub b_p_imsearch: ::std::os::raw::c_long,
    pub b_kmap_state: ::std::os::raw::c_short,
    pub b_kmap_ga: garray_T,
    pub b_p_initialized: ::std::os::raw::c_int,
    pub b_p_script_ctx: [sctx_T; 64usize],
    pub b_p_ai: ::std::os::raw::c_int,
    pub b_p_ai_nopaste: ::std::os::raw::c_int,
    pub b_p_bkc: *mut char_u,
    pub b_bkc_flags: ::std::os::raw::c_uint,
    pub b_p_ci: ::std::os::raw::c_int,
    pub b_p_bin: ::std::os::raw::c_int,
    pub b_p_bomb: ::std::os::raw::c_int,
    pub b_p_bh: *mut char_u,
    pub b_p_bt: *mut char_u,
    pub b_has_qf_entry: ::std::os::raw::c_int,
    pub b_p_bl: ::std::os::raw::c_int,
    pub b_p_com: *mut char_u,
    pub b_p_cms: *mut char_u,
    pub b_p_tfu: *mut char_u,
    pub b_p_eol: ::std::os::raw::c_int,
    pub b_p_fixeol: ::std::os::raw::c_int,
    pub b_p_et: ::std::os::raw::c_int,
    pub b_p_et_nobin: ::std::os::raw::c_int,
    pub b_p_et_nopaste: ::std::os::raw::c_int,
    pub b_p_fenc: *mut char_u,
    pub b_p_ff: *mut char_u,
    pub b_p_ft: *mut char_u,
    pub b_p_fo: *mut char_u,
    pub b_p_flp: *mut char_u,
    pub b_p_inf: ::std::os::raw::c_int,
    pub b_p_isk: *mut char_u,
    pub b_p_def: *mut char_u,
    pub b_p_inc: *mut char_u,
    pub b_p_inex: *mut char_u,
    pub b_p_inex_flags: long_u,
    pub b_p_inde: *mut char_u,
    pub b_p_inde_flags: long_u,
    pub b_p_indk: *mut char_u,
    pub b_p_fp: *mut char_u,
    pub b_p_fex: *mut char_u,
    pub b_p_fex_flags: long_u,
    pub b_p_kp: *mut char_u,
    pub b_p_menc: *mut char_u,
    pub b_p_mps: *mut char_u,
    pub b_p_ml: ::std::os::raw::c_int,
    pub b_p_ml_nobin: ::std::os::raw::c_int,
    pub b_p_ma: ::std::os::raw::c_int,
    pub b_p_nf: *mut char_u,
    pub b_p_pi: ::std::os::raw::c_int,
    pub b_p_qe: *mut char_u,
    pub b_p_ro: ::std::os::raw::c_int,
    pub b_p_sw: ::std::os::raw::c_long,
    pub b_p_sn: ::std::os::raw::c_int,
    pub b_p_sts: ::std::os::raw::c_long,
    pub b_p_sts_nopaste: ::std::os::raw::c_long,
    pub b_p_sua: *mut char_u,
    pub b_p_swf: ::std::os::raw::c_int,
    pub b_p_ts: ::std::os::raw::c_long,
    pub b_p_tx: ::std::os::raw::c_int,
    pub b_p_tw: ::std::os::raw::c_long,
    pub b_p_tw_nobin: ::std::os::raw::c_long,
    pub b_p_tw_nopaste: ::std::os::raw::c_long,
    pub b_p_wm: ::std::os::raw::c_long,
    pub b_p_wm_nobin: ::std::os::raw::c_long,
    pub b_p_wm_nopaste: ::std::os::raw::c_long,
    pub b_p_vsts: *mut char_u,
    pub b_p_vsts_array: *mut ::std::os::raw::c_int,
    pub b_p_vsts_nopaste: *mut char_u,
    pub b_p_vts: *mut char_u,
    pub b_p_vts_array: *mut ::std::os::raw::c_int,
    pub b_p_keymap: *mut char_u,
    pub b_p_gp: *mut char_u,
    pub b_p_mp: *mut char_u,
    pub b_p_efm: *mut char_u,
    pub b_p_ep: *mut char_u,
    pub b_p_path: *mut char_u,
    pub b_p_ar: ::std::os::raw::c_int,
    pub b_p_tags: *mut char_u,
    pub b_p_tc: *mut char_u,
    pub b_tc_flags: ::std::os::raw::c_uint,
    pub b_p_ul: ::std::os::raw::c_long,
    pub b_p_udf: ::std::os::raw::c_int,
    pub b_no_eol_lnum: linenr_T,
    pub b_start_eol: ::std::os::raw::c_int,
    pub b_start_ffc: ::std::os::raw::c_int,
    pub b_start_fenc: *mut char_u,
    pub b_bad_char: ::std::os::raw::c_int,
    pub b_start_bomb: ::std::os::raw::c_int,
    pub b_bufvar: dictitem_T,
    pub b_vars: *mut dict_T,
    pub b_listener: *mut listener_T,
    pub b_recorded_changes: *mut list_T,
    pub b_may_swap: ::std::os::raw::c_int,
    pub b_did_warn: ::std::os::raw::c_int,
    pub b_help: ::std::os::raw::c_int,
    pub b_shortname: ::std::os::raw::c_int,
    pub b_prompt_text: *mut char_u,
    pub b_prompt_callback: callback_T,
    pub b_prompt_interrupt: callback_T,
    pub b_prompt_insert: ::std::os::raw::c_int,
    pub b_signlist: *mut signlist_T,
    pub b_write_to_channel: ::std::os::raw::c_int,
    pub b_mapped_ctrl_c: ::std::os::raw::c_int,
    pub b_diff_failed: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_file_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<file_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<file_buffer>(),
        7072usize,
        concat!("Size of: ", stringify!(file_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<file_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(file_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ml) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_next) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prev) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_nwindows) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_nwindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_flags) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_locked) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ffname) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ffname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_sfname) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_sfname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_fname) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_dev_valid) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_dev_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_dev) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ino) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_fnum) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_key) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_changed) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ct_di) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ct_di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_changedtick) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_changedtick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_saving) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_saving)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_set) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_top) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_bot) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_xlines) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_xlines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_wininfo) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_wininfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mtime) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mtime_read) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mtime_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_orig_size) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_orig_mode) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_orig_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_used) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_namedm) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_namedm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_visual) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_visual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_visual_mode_eval) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_visual_mode_eval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_cursor) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_insert) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_change) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_changelist) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changelist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_changelistlen) as usize - ptr as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changelistlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_new_change) as usize - ptr as usize },
        2460usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_new_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_chartab) as usize - ptr as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_chartab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_maphash) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_maphash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_first_abbr) as usize - ptr as usize },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_first_abbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ucmds) as usize - ptr as usize },
        4552usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ucmds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_op_start) as usize - ptr as usize },
        4576usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_op_start_orig) as usize - ptr as usize },
        4592usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_start_orig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_op_end) as usize - ptr as usize },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_marks_read) as usize - ptr as usize },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_marks_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_oldhead) as usize - ptr as usize },
        4632usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_oldhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_newhead) as usize - ptr as usize },
        4640usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_newhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_curhead) as usize - ptr as usize },
        4648usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_curhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_numhead) as usize - ptr as usize },
        4656usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_numhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_synced) as usize - ptr as usize },
        4660usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_synced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_seq_last) as usize - ptr as usize },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_seq_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_save_nr_last) as usize - ptr as usize },
        4672usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_save_nr_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_seq_cur) as usize - ptr as usize },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_seq_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_time_cur) as usize - ptr as usize },
        4688usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_time_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_save_nr_cur) as usize - ptr as usize },
        4696usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_save_nr_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_line_ptr) as usize - ptr as usize },
        4704usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_line_lnum) as usize - ptr as usize },
        4720usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_line_colnr) as usize - ptr as usize },
        4728usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_colnr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_iminsert) as usize - ptr as usize },
        4736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_iminsert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_imsearch) as usize - ptr as usize },
        4744usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_imsearch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_kmap_state) as usize - ptr as usize },
        4752usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_kmap_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_kmap_ga) as usize - ptr as usize },
        4760usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_kmap_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_initialized) as usize - ptr as usize },
        4784usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_script_ctx) as usize - ptr as usize },
        4792usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_script_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ai) as usize - ptr as usize },
        6328usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ai)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ai_nopaste) as usize - ptr as usize },
        6332usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ai_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bkc) as usize - ptr as usize },
        6336usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bkc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_bkc_flags) as usize - ptr as usize },
        6344usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bkc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ci) as usize - ptr as usize },
        6348usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ci)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bin) as usize - ptr as usize },
        6352usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bomb) as usize - ptr as usize },
        6356usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bomb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bh) as usize - ptr as usize },
        6360usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bt) as usize - ptr as usize },
        6368usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_has_qf_entry) as usize - ptr as usize },
        6376usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_has_qf_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bl) as usize - ptr as usize },
        6380usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_com) as usize - ptr as usize },
        6384usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_cms) as usize - ptr as usize },
        6392usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_cms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tfu) as usize - ptr as usize },
        6400usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tfu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_eol) as usize - ptr as usize },
        6408usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_eol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fixeol) as usize - ptr as usize },
        6412usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fixeol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_et) as usize - ptr as usize },
        6416usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_et_nobin) as usize - ptr as usize },
        6420usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_et_nopaste) as usize - ptr as usize },
        6424usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fenc) as usize - ptr as usize },
        6432usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fenc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ff) as usize - ptr as usize },
        6440usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ft) as usize - ptr as usize },
        6448usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fo) as usize - ptr as usize },
        6456usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_flp) as usize - ptr as usize },
        6464usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_flp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inf) as usize - ptr as usize },
        6472usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_isk) as usize - ptr as usize },
        6480usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_isk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_def) as usize - ptr as usize },
        6488usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inc) as usize - ptr as usize },
        6496usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inex) as usize - ptr as usize },
        6504usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inex_flags) as usize - ptr as usize },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inex_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inde) as usize - ptr as usize },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inde)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inde_flags) as usize - ptr as usize },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inde_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_indk) as usize - ptr as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_indk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fp) as usize - ptr as usize },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fex) as usize - ptr as usize },
        6552usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fex_flags) as usize - ptr as usize },
        6560usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fex_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_kp) as usize - ptr as usize },
        6568usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_kp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_menc) as usize - ptr as usize },
        6576usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_menc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_mps) as usize - ptr as usize },
        6584usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_mps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ml) as usize - ptr as usize },
        6592usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ml_nobin) as usize - ptr as usize },
        6596usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ml_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ma) as usize - ptr as usize },
        6600usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_nf) as usize - ptr as usize },
        6608usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_nf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_pi) as usize - ptr as usize },
        6616usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_qe) as usize - ptr as usize },
        6624usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_qe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ro) as usize - ptr as usize },
        6632usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sw) as usize - ptr as usize },
        6640usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sn) as usize - ptr as usize },
        6648usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sts) as usize - ptr as usize },
        6656usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sts_nopaste) as usize - ptr as usize },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sts_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sua) as usize - ptr as usize },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sua)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_swf) as usize - ptr as usize },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_swf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ts) as usize - ptr as usize },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tx) as usize - ptr as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tw) as usize - ptr as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tw_nobin) as usize - ptr as usize },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tw_nopaste) as usize - ptr as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_wm) as usize - ptr as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_wm_nobin) as usize - ptr as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_wm_nopaste) as usize - ptr as usize },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vsts) as usize - ptr as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vsts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vsts_array) as usize - ptr as usize },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vsts_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vsts_nopaste) as usize - ptr as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vsts_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vts) as usize - ptr as usize },
        6776usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vts_array) as usize - ptr as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vts_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_keymap) as usize - ptr as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_keymap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_gp) as usize - ptr as usize },
        6800usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_mp) as usize - ptr as usize },
        6808usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_mp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_efm) as usize - ptr as usize },
        6816usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_efm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ep) as usize - ptr as usize },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_path) as usize - ptr as usize },
        6832usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ar) as usize - ptr as usize },
        6840usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tags) as usize - ptr as usize },
        6848usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tc) as usize - ptr as usize },
        6856usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_tc_flags) as usize - ptr as usize },
        6864usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_tc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ul) as usize - ptr as usize },
        6872usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_udf) as usize - ptr as usize },
        6880usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_udf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_no_eol_lnum) as usize - ptr as usize },
        6888usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_no_eol_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_eol) as usize - ptr as usize },
        6896usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_eol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_ffc) as usize - ptr as usize },
        6900usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_ffc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_fenc) as usize - ptr as usize },
        6904usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_fenc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_bad_char) as usize - ptr as usize },
        6912usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bad_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_bomb) as usize - ptr as usize },
        6916usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_bomb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_bufvar) as usize - ptr as usize },
        6920usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bufvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_vars) as usize - ptr as usize },
        6944usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_listener) as usize - ptr as usize },
        6952usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_listener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_recorded_changes) as usize - ptr as usize },
        6960usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_recorded_changes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_may_swap) as usize - ptr as usize },
        6968usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_may_swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_did_warn) as usize - ptr as usize },
        6972usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_did_warn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_help) as usize - ptr as usize },
        6976usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_help)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_shortname) as usize - ptr as usize },
        6980usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_shortname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_text) as usize - ptr as usize },
        6984usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_callback) as usize - ptr as usize },
        6992usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_interrupt) as usize - ptr as usize },
        7016usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_interrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_insert) as usize - ptr as usize },
        7040usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_signlist) as usize - ptr as usize },
        7048usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_signlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_write_to_channel) as usize - ptr as usize },
        7056usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_write_to_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mapped_ctrl_c) as usize - ptr as usize },
        7060usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mapped_ctrl_c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_diff_failed) as usize - ptr as usize },
        7064usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_diff_failed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufferUpdate_T {
    pub buf: *mut buf_T,
    pub lnum: linenr_T,
    pub lnume: linenr_T,
    pub xtra: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_bufferUpdate_T() {
    const UNINIT: ::std::mem::MaybeUninit<bufferUpdate_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bufferUpdate_T>(),
        32usize,
        concat!("Size of: ", stringify!(bufferUpdate_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bufferUpdate_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bufferUpdate_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnume) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(lnume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xtra) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(xtra)
        )
    );
}
pub const writeFailureReason_T_FILE_CHANGED: writeFailureReason_T = 0;
pub type writeFailureReason_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct optionSet_T {
    pub fullname: *mut char_u,
    pub shortname: *mut char_u,
    pub type_: ::std::os::raw::c_int,
    pub numval: ::std::os::raw::c_long,
    pub stringval: *mut char_u,
    pub opt_flags: ::std::os::raw::c_int,
    pub hidden: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_optionSet_T() {
    const UNINIT: ::std::mem::MaybeUninit<optionSet_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<optionSet_T>(),
        48usize,
        concat!("Size of: ", stringify!(optionSet_T))
    );
    assert_eq!(
        ::std::mem::align_of::<optionSet_T>(),
        8usize,
        concat!("Alignment of ", stringify!(optionSet_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(fullname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(shortname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numval) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(numval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(stringval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(opt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(hidden)
        )
    );
}
pub type BufferUpdateCallback =
    ::std::option::Option<unsafe extern "C" fn(bufferUpdate: bufferUpdate_T)>;
pub type FileWriteFailureCallback = ::std::option::Option<
    unsafe extern "C" fn(failureReason: writeFailureReason_T, buf: *mut buf_T),
>;
pub type MessageCallback = ::std::option::Option<
    unsafe extern "C" fn(title: *mut char_u, msg: *mut char_u, priority: msgPriority_T),
>;
pub type DirectoryChangedCallback = ::std::option::Option<unsafe extern "C" fn(path: *mut char_u)>;
pub type QuitCallback =
    ::std::option::Option<unsafe extern "C" fn(buf: *mut buf_T, isForced: ::std::os::raw::c_int)>;
pub type OptionSetCallback =
    ::std::option::Option<unsafe extern "C" fn(optionSet: *mut optionSet_T)>;
pub type OutputCallback = ::std::option::Option<
    unsafe extern "C" fn(cmd: *mut char_u, output: *mut char_u, isSilent: ::std::os::raw::c_int),
>;
pub type ToggleCommentsCallback = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut buf_T,
        startLine: linenr_T,
        endLine: linenr_T,
        outCount: *mut linenr_T,
        outLines: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type diff_T = diffblock_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diffblock_S {
    pub df_next: *mut diff_T,
    pub df_lnum: [linenr_T; 8usize],
    pub df_count: [linenr_T; 8usize],
}
#[test]
fn bindgen_test_layout_diffblock_S() {
    const UNINIT: ::std::mem::MaybeUninit<diffblock_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<diffblock_S>(),
        136usize,
        concat!("Size of: ", stringify!(diffblock_S))
    );
    assert_eq!(
        ::std::mem::align_of::<diffblock_S>(),
        8usize,
        concat!("Alignment of ", stringify!(diffblock_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).df_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).df_lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).df_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_count)
        )
    );
}
pub type tabpage_T = tabpage_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tabpage_S {
    pub tp_next: *mut tabpage_T,
    pub tp_topframe: *mut frame_T,
    pub tp_curwin: *mut win_T,
    pub tp_prevwin: *mut win_T,
    pub tp_firstwin: *mut win_T,
    pub tp_lastwin: *mut win_T,
    pub tp_old_Rows: ::std::os::raw::c_long,
    pub tp_old_Columns: ::std::os::raw::c_long,
    pub tp_ch_used: ::std::os::raw::c_long,
    pub tp_localdir: *mut char_u,
    pub tp_first_diff: *mut diff_T,
    pub tp_diffbuf: [*mut buf_T; 8usize],
    pub tp_diff_invalid: ::std::os::raw::c_int,
    pub tp_diff_update: ::std::os::raw::c_int,
    pub tp_snapshot: [*mut frame_T; 2usize],
    pub tp_winvar: dictitem_T,
    pub tp_vars: *mut dict_T,
}
#[test]
fn bindgen_test_layout_tabpage_S() {
    const UNINIT: ::std::mem::MaybeUninit<tabpage_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tabpage_S>(),
        208usize,
        concat!("Size of: ", stringify!(tabpage_S))
    );
    assert_eq!(
        ::std::mem::align_of::<tabpage_S>(),
        8usize,
        concat!("Alignment of ", stringify!(tabpage_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_topframe) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_topframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_curwin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_prevwin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_prevwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_firstwin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_firstwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_lastwin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_lastwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_old_Rows) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_old_Rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_old_Columns) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_old_Columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_ch_used) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_ch_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_localdir) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_localdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_first_diff) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_first_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_diffbuf) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diffbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_diff_invalid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diff_invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_diff_update) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diff_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_snapshot) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_winvar) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_winvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_vars) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_vars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_line {
    pub wl_lnum: linenr_T,
    pub wl_size: short_u,
    pub wl_valid: ::std::os::raw::c_char,
    pub wl_folded: ::std::os::raw::c_char,
    pub wl_lastlnum: linenr_T,
}
#[test]
fn bindgen_test_layout_w_line() {
    const UNINIT: ::std::mem::MaybeUninit<w_line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<w_line>(),
        24usize,
        concat!("Size of: ", stringify!(w_line))
    );
    assert_eq!(
        ::std::mem::align_of::<w_line>(),
        8usize,
        concat!("Alignment of ", stringify!(w_line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_valid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_folded) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_folded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_lastlnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_lastlnum)
        )
    );
}
pub type wline_T = w_line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct frame_S {
    pub fr_layout: ::std::os::raw::c_char,
    pub fr_width: ::std::os::raw::c_int,
    pub fr_newwidth: ::std::os::raw::c_int,
    pub fr_height: ::std::os::raw::c_int,
    pub fr_newheight: ::std::os::raw::c_int,
    pub fr_parent: *mut frame_T,
    pub fr_next: *mut frame_T,
    pub fr_prev: *mut frame_T,
    pub fr_child: *mut frame_T,
    pub fr_win: *mut win_T,
}
#[test]
fn bindgen_test_layout_frame_S() {
    const UNINIT: ::std::mem::MaybeUninit<frame_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<frame_S>(),
        64usize,
        concat!("Size of: ", stringify!(frame_S))
    );
    assert_eq!(
        ::std::mem::align_of::<frame_S>(),
        8usize,
        concat!("Alignment of ", stringify!(frame_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_layout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_newwidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_newwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_newheight) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_newheight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_parent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_child) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_win) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_win)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct match_T {
    pub rm: regmmatch_T,
    pub buf: *mut buf_T,
    pub lnum: linenr_T,
    pub attr: ::std::os::raw::c_int,
    pub attr_cur: ::std::os::raw::c_int,
    pub first_lnum: linenr_T,
    pub startcol: colnr_T,
    pub endcol: colnr_T,
    pub is_addpos: ::std::os::raw::c_int,
    pub tm: proftime_T,
}
#[test]
fn bindgen_test_layout_match_T() {
    const UNINIT: ::std::mem::MaybeUninit<match_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<match_T>(),
        400usize,
        concat!("Size of: ", stringify!(match_T))
    );
    assert_eq!(
        ::std::mem::align_of::<match_T>(),
        8usize,
        concat!("Alignment of ", stringify!(match_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_cur) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(attr_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_lnum) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(first_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startcol) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(startcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endcol) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(endcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_addpos) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(is_addpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(tm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchHighlight_T {
    pub start: pos_T,
    pub end: pos_T,
}
#[test]
fn bindgen_test_layout_searchHighlight_T() {
    const UNINIT: ::std::mem::MaybeUninit<searchHighlight_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<searchHighlight_T>(),
        32usize,
        concat!("Size of: ", stringify!(searchHighlight_T))
    );
    assert_eq!(
        ::std::mem::align_of::<searchHighlight_T>(),
        8usize,
        concat!("Alignment of ", stringify!(searchHighlight_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(searchHighlight_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(searchHighlight_T),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llpos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_llpos_T() {
    const UNINIT: ::std::mem::MaybeUninit<llpos_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llpos_T>(),
        16usize,
        concat!("Size of: ", stringify!(llpos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<llpos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(llpos_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(len)
        )
    );
}
pub type posmatch_T = posmatch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posmatch {
    pub pos: [llpos_T; 8usize],
    pub cur: ::std::os::raw::c_int,
    pub toplnum: linenr_T,
    pub botlnum: linenr_T,
}
#[test]
fn bindgen_test_layout_posmatch() {
    const UNINIT: ::std::mem::MaybeUninit<posmatch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posmatch>(),
        152usize,
        concat!("Size of: ", stringify!(posmatch))
    );
    assert_eq!(
        ::std::mem::align_of::<posmatch>(),
        8usize,
        concat!("Alignment of ", stringify!(posmatch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toplnum) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(toplnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).botlnum) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(botlnum)
        )
    );
}
pub type matchitem_T = matchitem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct matchitem {
    pub next: *mut matchitem_T,
    pub id: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub pattern: *mut char_u,
    pub hlg_id: ::std::os::raw::c_int,
    pub match_: regmmatch_T,
    pub pos: posmatch_T,
    pub hl: match_T,
}
#[test]
fn bindgen_test_layout_matchitem() {
    const UNINIT: ::std::mem::MaybeUninit<matchitem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<matchitem>(),
        920usize,
        concat!("Size of: ", stringify!(matchitem))
    );
    assert_eq!(
        ::std::mem::align_of::<matchitem>(),
        8usize,
        concat!("Alignment of ", stringify!(matchitem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hlg_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(hlg_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hl) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(hl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pos_save_T {
    pub w_topline_save: ::std::os::raw::c_int,
    pub w_topline_corr: ::std::os::raw::c_int,
    pub w_cursor_save: pos_T,
    pub w_cursor_corr: pos_T,
}
#[test]
fn bindgen_test_layout_pos_save_T() {
    const UNINIT: ::std::mem::MaybeUninit<pos_save_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pos_save_T>(),
        40usize,
        concat!("Size of: ", stringify!(pos_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pos_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pos_save_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline_save) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_topline_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline_corr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_topline_corr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cursor_save) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_cursor_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cursor_corr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_cursor_corr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct window_S {
    pub w_id: ::std::os::raw::c_int,
    pub w_buffer: *mut buf_T,
    pub w_prev: *mut win_T,
    pub w_next: *mut win_T,
    pub w_closing: ::std::os::raw::c_int,
    pub w_frame: *mut frame_T,
    pub w_cursor: pos_T,
    pub w_curswant: colnr_T,
    pub w_set_curswant: ::std::os::raw::c_int,
    pub w_old_visual_mode: ::std::os::raw::c_char,
    pub w_old_cursor_lnum: linenr_T,
    pub w_old_cursor_fcol: colnr_T,
    pub w_old_cursor_lcol: colnr_T,
    pub w_old_visual_lnum: linenr_T,
    pub w_old_visual_col: colnr_T,
    pub w_old_curswant: colnr_T,
    pub w_topline: linenr_T,
    pub w_topline_was_set: ::std::os::raw::c_char,
    pub w_topfill: ::std::os::raw::c_int,
    pub w_old_topfill: ::std::os::raw::c_int,
    pub w_botfill: ::std::os::raw::c_int,
    pub w_old_botfill: ::std::os::raw::c_int,
    pub w_leftcol: colnr_T,
    pub w_skipcol: colnr_T,
    pub w_winrow: ::std::os::raw::c_int,
    pub w_height: ::std::os::raw::c_int,
    pub w_status_height: ::std::os::raw::c_int,
    pub w_wincol: ::std::os::raw::c_int,
    pub w_width: ::std::os::raw::c_int,
    pub w_vsep_width: ::std::os::raw::c_int,
    pub w_save_cursor: pos_save_T,
    pub w_valid: ::std::os::raw::c_int,
    pub w_valid_cursor: pos_T,
    pub w_valid_leftcol: colnr_T,
    pub w_cline_height: ::std::os::raw::c_int,
    pub w_cline_folded: ::std::os::raw::c_int,
    pub w_cline_row: ::std::os::raw::c_int,
    pub w_virtcol: colnr_T,
    pub w_wrow: ::std::os::raw::c_int,
    pub w_wcol: ::std::os::raw::c_int,
    pub w_botline: linenr_T,
    pub w_empty_rows: ::std::os::raw::c_int,
    pub w_filler_rows: ::std::os::raw::c_int,
    pub w_lines_valid: ::std::os::raw::c_int,
    pub w_lines: *mut wline_T,
    pub w_folds: garray_T,
    pub w_fold_manual: ::std::os::raw::c_char,
    pub w_foldinvalid: ::std::os::raw::c_char,
    pub w_nrwidth: ::std::os::raw::c_int,
    pub w_redr_type: ::std::os::raw::c_int,
    pub w_upd_rows: ::std::os::raw::c_int,
    pub w_redraw_top: linenr_T,
    pub w_redraw_bot: linenr_T,
    pub w_redr_status: ::std::os::raw::c_int,
    pub w_alt_fnum: ::std::os::raw::c_int,
    pub w_alist: *mut alist_T,
    pub w_arg_idx: ::std::os::raw::c_int,
    pub w_arg_idx_invalid: ::std::os::raw::c_int,
    pub w_localdir: *mut char_u,
    pub w_onebuf_opt: winopt_T,
    pub w_allbuf_opt: winopt_T,
    pub w_p_fde_flags: long_u,
    pub w_p_fdt_flags: long_u,
    pub w_p_brimin: ::std::os::raw::c_int,
    pub w_p_brishift: ::std::os::raw::c_int,
    pub w_p_brisbr: ::std::os::raw::c_int,
    pub w_p_siso: ::std::os::raw::c_long,
    pub w_p_so: ::std::os::raw::c_long,
    pub w_scbind_pos: ::std::os::raw::c_long,
    pub w_winvar: dictitem_T,
    pub w_vars: *mut dict_T,
    pub w_pcmark: pos_T,
    pub w_prev_pcmark: pos_T,
    pub w_jumplist: [xfmark_T; 100usize],
    pub w_jumplistlen: ::std::os::raw::c_int,
    pub w_jumplistidx: ::std::os::raw::c_int,
    pub w_changelistidx: ::std::os::raw::c_int,
    pub w_match_head: *mut matchitem_T,
    pub w_next_match_id: ::std::os::raw::c_int,
    pub w_tagstack: [taggy_T; 20usize],
    pub w_tagstackidx: ::std::os::raw::c_int,
    pub w_tagstacklen: ::std::os::raw::c_int,
    pub w_fraction: ::std::os::raw::c_int,
    pub w_prev_fraction_row: ::std::os::raw::c_int,
    pub w_nrwidth_line_count: linenr_T,
    pub w_nuw_cached: ::std::os::raw::c_long,
    pub w_nrwidth_width: ::std::os::raw::c_int,
    pub w_llist: *mut qf_info_T,
    pub w_llist_ref: *mut qf_info_T,
}
#[test]
fn bindgen_test_layout_window_S() {
    const UNINIT: ::std::mem::MaybeUninit<window_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<window_S>(),
        7560usize,
        concat!("Size of: ", stringify!(window_S))
    );
    assert_eq!(
        ::std::mem::align_of::<window_S>(),
        8usize,
        concat!("Alignment of ", stringify!(window_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_closing) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_closing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_frame) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cursor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_curswant) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_curswant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_set_curswant) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_set_curswant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_visual_mode) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_cursor_lnum) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_cursor_fcol) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_fcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_cursor_lcol) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_lcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_visual_lnum) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_visual_col) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_curswant) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_curswant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline_was_set) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topline_was_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topfill) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_topfill) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_topfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_botfill) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_botfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_botfill) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_botfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_leftcol) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_leftcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_skipcol) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_skipcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_winrow) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_winrow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_height) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_status_height) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_status_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_wincol) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wincol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_width) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_vsep_width) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_vsep_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_save_cursor) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_save_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_valid) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_valid_cursor) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_valid_leftcol) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid_leftcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cline_height) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cline_folded) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_folded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cline_row) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_virtcol) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_virtcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_wrow) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wrow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_wcol) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_botline) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_botline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_empty_rows) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_empty_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_filler_rows) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_filler_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_lines_valid) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_lines_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_lines) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_folds) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_folds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_fold_manual) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_fold_manual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_foldinvalid) as usize - ptr as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_foldinvalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nrwidth) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redr_type) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_upd_rows) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_upd_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redraw_top) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redraw_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redraw_bot) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redraw_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redr_status) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redr_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_alt_fnum) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_alt_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_alist) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_alist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_arg_idx) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_arg_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_arg_idx_invalid) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_arg_idx_invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_localdir) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_localdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_onebuf_opt) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_onebuf_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_allbuf_opt) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_allbuf_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_fde_flags) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_fde_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_fdt_flags) as usize - ptr as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_fdt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_brimin) as usize - ptr as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brimin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_brishift) as usize - ptr as usize },
        2412usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brishift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_brisbr) as usize - ptr as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brisbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_siso) as usize - ptr as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_siso)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_so) as usize - ptr as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_so)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_scbind_pos) as usize - ptr as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_scbind_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_winvar) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_winvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_vars) as usize - ptr as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_pcmark) as usize - ptr as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_pcmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_prev_pcmark) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev_pcmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_jumplist) as usize - ptr as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_jumplistlen) as usize - ptr as usize },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplistlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_jumplistidx) as usize - ptr as usize },
        6516usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplistidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_changelistidx) as usize - ptr as usize },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_changelistidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_match_head) as usize - ptr as usize },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_match_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_next_match_id) as usize - ptr as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_next_match_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_tagstack) as usize - ptr as usize },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_tagstackidx) as usize - ptr as usize },
        7504usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstackidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_tagstacklen) as usize - ptr as usize },
        7508usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstacklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_fraction) as usize - ptr as usize },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_fraction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_prev_fraction_row) as usize - ptr as usize },
        7516usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev_fraction_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nrwidth_line_count) as usize - ptr as usize },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth_line_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nuw_cached) as usize - ptr as usize },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nuw_cached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nrwidth_width) as usize - ptr as usize },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_llist) as usize - ptr as usize },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_llist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_llist_ref) as usize - ptr as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_llist_ref)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oparg_S {
    pub op_type: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub motion_type: ::std::os::raw::c_int,
    pub motion_force: ::std::os::raw::c_int,
    pub use_reg_one: ::std::os::raw::c_int,
    pub inclusive: ::std::os::raw::c_int,
    pub end_adjusted: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub cursor_start: pos_T,
    pub line_count: ::std::os::raw::c_long,
    pub empty: ::std::os::raw::c_int,
    pub is_VIsual: ::std::os::raw::c_int,
    pub block_mode: ::std::os::raw::c_int,
    pub start_vcol: colnr_T,
    pub end_vcol: colnr_T,
    pub prev_opcount: ::std::os::raw::c_long,
    pub prev_count0: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_oparg_S() {
    const UNINIT: ::std::mem::MaybeUninit<oparg_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oparg_S>(),
        128usize,
        concat!("Size of: ", stringify!(oparg_S))
    );
    assert_eq!(
        ::std::mem::align_of::<oparg_S>(),
        8usize,
        concat!("Alignment of ", stringify!(oparg_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(motion_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion_force) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(motion_force)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_reg_one) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(use_reg_one)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusive) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(inclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_adjusted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end_adjusted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor_start) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(cursor_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(line_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_VIsual) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(is_VIsual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_mode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(block_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_vcol) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(start_vcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_vcol) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end_vcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_opcount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(prev_opcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_count0) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(prev_count0)
        )
    );
}
pub type oparg_T = oparg_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdarg_S {
    pub oap: *mut oparg_T,
    pub prechar: ::std::os::raw::c_int,
    pub cmdchar: ::std::os::raw::c_int,
    pub nchar: ::std::os::raw::c_int,
    pub ncharC1: ::std::os::raw::c_int,
    pub ncharC2: ::std::os::raw::c_int,
    pub extra_char: ::std::os::raw::c_int,
    pub opcount: ::std::os::raw::c_long,
    pub count0: ::std::os::raw::c_long,
    pub count1: ::std::os::raw::c_long,
    pub arg: ::std::os::raw::c_int,
    pub retval: ::std::os::raw::c_int,
    pub searchbuf: *mut char_u,
}
#[test]
fn bindgen_test_layout_cmdarg_S() {
    const UNINIT: ::std::mem::MaybeUninit<cmdarg_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmdarg_S>(),
        72usize,
        concat!("Size of: ", stringify!(cmdarg_S))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdarg_S>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdarg_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(oap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prechar) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(prechar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdchar) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(cmdchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nchar) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(nchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncharC1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(ncharC1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncharC2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(ncharC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_char) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(extra_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(opcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(count0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(count1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchbuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(searchbuf)
        )
    );
}
pub type cmdarg_T = cmdarg_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pendingOp_S {
    pub op_type: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pendingOp_S() {
    const UNINIT: ::std::mem::MaybeUninit<pendingOp_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pendingOp_S>(),
        16usize,
        concat!("Size of: ", stringify!(pendingOp_S))
    );
    assert_eq!(
        ::std::mem::align_of::<pendingOp_S>(),
        8usize,
        concat!("Alignment of ", stringify!(pendingOp_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(count)
        )
    );
}
pub type pendingOp_T = pendingOp_S;
pub type state_execute = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_int,
    ) -> executionStatus_T,
>;
pub type state_cleanup =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
pub type state_pending_operator = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        pendingOp: *mut pendingOp_T,
    ) -> ::std::os::raw::c_int,
>;
pub type sname = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm_T {
    pub context: *mut ::std::os::raw::c_void,
    pub mode: ::std::os::raw::c_int,
    pub subMode: subMode_T,
    pub execute_fn: state_execute,
    pub cleanup_fn: state_cleanup,
    pub pending_operator_fn: state_pending_operator,
    pub prev: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sm_T() {
    const UNINIT: ::std::mem::MaybeUninit<sm_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sm_T>(),
        48usize,
        concat!("Size of: ", stringify!(sm_T))
    );
    assert_eq!(
        ::std::mem::align_of::<sm_T>(),
        8usize,
        concat!("Alignment of ", stringify!(sm_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subMode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(subMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).execute_fn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(execute_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup_fn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(cleanup_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_operator_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(pending_operator_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(prev)
        )
    );
}
pub type vimmenu_T = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aco_save_T {
    pub save_curbuf: *mut buf_T,
    pub use_aucmd_win: ::std::os::raw::c_int,
    pub save_curwin: *mut win_T,
    pub new_curwin: *mut win_T,
    pub save_prevwin: *mut win_T,
    pub new_curbuf: bufref_T,
    pub globaldir: *mut char_u,
}
#[test]
fn bindgen_test_layout_aco_save_T() {
    const UNINIT: ::std::mem::MaybeUninit<aco_save_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<aco_save_T>(),
        64usize,
        concat!("Size of: ", stringify!(aco_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<aco_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(aco_save_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_curbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_curbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_aucmd_win) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(use_aucmd_win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_curwin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_curwin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(new_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_prevwin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_prevwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_curbuf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(new_curbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globaldir) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(globaldir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option_table_T {
    pub name: *const ::std::os::raw::c_char,
    pub hasnum: ::std::os::raw::c_int,
    pub number: ::std::os::raw::c_long,
    pub string: *mut char_u,
    pub strlen: ::std::os::raw::c_int,
    pub present: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_option_table_T() {
    const UNINIT: ::std::mem::MaybeUninit<option_table_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<option_table_T>(),
        40usize,
        concat!("Size of: ", stringify!(option_table_T))
    );
    assert_eq!(
        ::std::mem::align_of::<option_table_T>(),
        8usize,
        concat!("Alignment of ", stringify!(option_table_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(hasnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strlen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(strlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).present) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(present)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prt_text_attr_T {
    pub fg_color: long_u,
    pub bg_color: long_u,
    pub bold: ::std::os::raw::c_int,
    pub italic: ::std::os::raw::c_int,
    pub underline: ::std::os::raw::c_int,
    pub undercurl: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_prt_text_attr_T() {
    const UNINIT: ::std::mem::MaybeUninit<prt_text_attr_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prt_text_attr_T>(),
        32usize,
        concat!("Size of: ", stringify!(prt_text_attr_T))
    );
    assert_eq!(
        ::std::mem::align_of::<prt_text_attr_T>(),
        8usize,
        concat!("Alignment of ", stringify!(prt_text_attr_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bold) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(bold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).italic) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(italic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).underline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(underline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undercurl) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(undercurl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prt_settings_T {
    pub n_collated_copies: ::std::os::raw::c_int,
    pub n_uncollated_copies: ::std::os::raw::c_int,
    pub duplex: ::std::os::raw::c_int,
    pub chars_per_line: ::std::os::raw::c_int,
    pub lines_per_page: ::std::os::raw::c_int,
    pub has_color: ::std::os::raw::c_int,
    pub number: prt_text_attr_T,
    pub user_abort: ::std::os::raw::c_int,
    pub jobname: *mut char_u,
}
#[test]
fn bindgen_test_layout_prt_settings_T() {
    const UNINIT: ::std::mem::MaybeUninit<prt_settings_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prt_settings_T>(),
        72usize,
        concat!("Size of: ", stringify!(prt_settings_T))
    );
    assert_eq!(
        ::std::mem::align_of::<prt_settings_T>(),
        8usize,
        concat!("Alignment of ", stringify!(prt_settings_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_collated_copies) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(n_collated_copies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_uncollated_copies) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(n_uncollated_copies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duplex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(duplex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chars_per_line) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(chars_per_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines_per_page) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(lines_per_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_color) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(has_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_abort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(user_abort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobname) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(jobname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pumitem_T {
    pub pum_text: *mut char_u,
    pub pum_kind: *mut char_u,
    pub pum_extra: *mut char_u,
    pub pum_info: *mut char_u,
}
#[test]
fn bindgen_test_layout_pumitem_T() {
    const UNINIT: ::std::mem::MaybeUninit<pumitem_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pumitem_T>(),
        32usize,
        concat!("Size of: ", stringify!(pumitem_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pumitem_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pumitem_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_extra) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagname_T {
    pub tn_tags: *mut char_u,
    pub tn_np: *mut char_u,
    pub tn_did_filefind_init: ::std::os::raw::c_int,
    pub tn_hf_idx: ::std::os::raw::c_int,
    pub tn_search_ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tagname_T() {
    const UNINIT: ::std::mem::MaybeUninit<tagname_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagname_T>(),
        32usize,
        concat!("Size of: ", stringify!(tagname_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tagname_T>(),
        8usize,
        concat!("Alignment of ", stringify!(tagname_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_tags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_np) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_np)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_did_filefind_init) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_did_filefind_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_hf_idx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_hf_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_search_ctx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_search_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct context_sha256_T {
    pub total: [UINT32_T; 2usize],
    pub state: [UINT32_T; 8usize],
    pub buffer: [char_u; 64usize],
}
#[test]
fn bindgen_test_layout_context_sha256_T() {
    const UNINIT: ::std::mem::MaybeUninit<context_sha256_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<context_sha256_T>(),
        104usize,
        concat!("Size of: ", stringify!(context_sha256_T))
    );
    assert_eq!(
        ::std::mem::align_of::<context_sha256_T>(),
        4usize,
        concat!("Alignment of ", stringify!(context_sha256_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(buffer)
        )
    );
}
pub const exptype_T_TYPE_UNKNOWN: exptype_T = 0;
pub const exptype_T_TYPE_EQUAL: exptype_T = 1;
pub const exptype_T_TYPE_NEQUAL: exptype_T = 2;
pub const exptype_T_TYPE_GREATER: exptype_T = 3;
pub const exptype_T_TYPE_GEQUAL: exptype_T = 4;
pub const exptype_T_TYPE_SMALLER: exptype_T = 5;
pub const exptype_T_TYPE_SEQUAL: exptype_T = 6;
pub const exptype_T_TYPE_MATCH: exptype_T = 7;
pub const exptype_T_TYPE_NOMATCH: exptype_T = 8;
pub type exptype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_reader {
    pub js_buf: *mut char_u,
    pub js_end: *mut char_u,
    pub js_used: ::std::os::raw::c_int,
    pub js_fill:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut js_reader) -> ::std::os::raw::c_int>,
    pub js_cookie: *mut ::std::os::raw::c_void,
    pub js_cookie_arg: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_js_reader() {
    const UNINIT: ::std::mem::MaybeUninit<js_reader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<js_reader>(),
        48usize,
        concat!("Size of: ", stringify!(js_reader))
    );
    assert_eq!(
        ::std::mem::align_of::<js_reader>(),
        8usize,
        concat!("Alignment of ", stringify!(js_reader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_fill) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_cookie) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_cookie_arg) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_cookie_arg)
        )
    );
}
pub type js_read_T = js_reader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mparm_T {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub fname: *mut char_u,
    pub evim_mode: ::std::os::raw::c_int,
    pub use_vimrc: *mut char_u,
    pub clean: ::std::os::raw::c_int,
    pub n_commands: ::std::os::raw::c_int,
    pub commands: [*mut char_u; 10usize],
    pub cmds_tofree: [char_u; 10usize],
    pub n_pre_commands: ::std::os::raw::c_int,
    pub pre_commands: [*mut char_u; 10usize],
    pub edit_type: ::std::os::raw::c_int,
    pub tagname: *mut char_u,
    pub use_ef: *mut char_u,
    pub want_full_screen: ::std::os::raw::c_int,
    pub not_a_term: ::std::os::raw::c_int,
    pub tty_fail: ::std::os::raw::c_int,
    pub term: *mut char_u,
    pub no_swap_file: ::std::os::raw::c_int,
    pub use_debug_break_level: ::std::os::raw::c_int,
    pub window_count: ::std::os::raw::c_int,
    pub window_layout: ::std::os::raw::c_int,
    pub diff_mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mparm_T() {
    const UNINIT: ::std::mem::MaybeUninit<mparm_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mparm_T>(),
        296usize,
        concat!("Size of: ", stringify!(mparm_T))
    );
    assert_eq!(
        ::std::mem::align_of::<mparm_T>(),
        8usize,
        concat!("Alignment of ", stringify!(mparm_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evim_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(evim_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_vimrc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_vimrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clean) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(clean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_commands) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(n_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmds_tofree) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(cmds_tofree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_pre_commands) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(n_pre_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_commands) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(pre_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit_type) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(edit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagname) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_ef) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_ef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).want_full_screen) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(want_full_screen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_a_term) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(not_a_term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tty_fail) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(tty_fail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_swap_file) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(no_swap_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_debug_break_level) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_debug_break_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_count) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(window_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_layout) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(window_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_mode) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(diff_mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lval_S {
    pub ll_name: *mut char_u,
    pub ll_exp_name: *mut char_u,
    pub ll_tv: *mut typval_T,
    pub ll_li: *mut listitem_T,
    pub ll_list: *mut list_T,
    pub ll_range: ::std::os::raw::c_int,
    pub ll_n1: ::std::os::raw::c_long,
    pub ll_n2: ::std::os::raw::c_long,
    pub ll_empty2: ::std::os::raw::c_int,
    pub ll_dict: *mut dict_T,
    pub ll_di: *mut dictitem_T,
    pub ll_newkey: *mut char_u,
    pub ll_blob: *mut blob_T,
}
#[test]
fn bindgen_test_layout_lval_S() {
    const UNINIT: ::std::mem::MaybeUninit<lval_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lval_S>(),
        104usize,
        concat!("Size of: ", stringify!(lval_S))
    );
    assert_eq!(
        ::std::mem::align_of::<lval_S>(),
        8usize,
        concat!("Alignment of ", stringify!(lval_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_exp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_exp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_tv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_li) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_li)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_range) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_n1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_n1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_n2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_n2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_empty2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_dict) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_di) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_newkey) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_newkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_blob) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_blob)
        )
    );
}
pub type lval_T = lval_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct save_state_T {
    pub save_msg_scroll: ::std::os::raw::c_int,
    pub save_restart_edit: ::std::os::raw::c_int,
    pub save_msg_didout: ::std::os::raw::c_int,
    pub save_State: ::std::os::raw::c_int,
    pub save_insertmode: ::std::os::raw::c_int,
    pub save_finish_op: ::std::os::raw::c_int,
    pub save_opcount: ::std::os::raw::c_int,
    pub save_reg_executing: ::std::os::raw::c_int,
    pub tabuf: tasave_T,
}
#[test]
fn bindgen_test_layout_save_state_T() {
    const UNINIT: ::std::mem::MaybeUninit<save_state_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<save_state_T>(),
        168usize,
        concat!("Size of: ", stringify!(save_state_T))
    );
    assert_eq!(
        ::std::mem::align_of::<save_state_T>(),
        8usize,
        concat!("Alignment of ", stringify!(save_state_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_msg_scroll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_msg_scroll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_restart_edit) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_restart_edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_msg_didout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_msg_didout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_State) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_insertmode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_insertmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_finish_op) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_finish_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_opcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_opcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_reg_executing) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_reg_executing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tabuf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(tabuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vimvars_save_T {
    pub vv_prevcount: varnumber_T,
    pub vv_count: varnumber_T,
    pub vv_count1: varnumber_T,
}
#[test]
fn bindgen_test_layout_vimvars_save_T() {
    const UNINIT: ::std::mem::MaybeUninit<vimvars_save_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vimvars_save_T>(),
        24usize,
        concat!("Size of: ", stringify!(vimvars_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vimvars_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vimvars_save_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vv_prevcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_prevcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vv_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vv_count1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_count1)
        )
    );
}
pub const cdscope_T_CDSCOPE_GLOBAL: cdscope_T = 0;
pub const cdscope_T_CDSCOPE_TABPAGE: cdscope_T = 1;
pub const cdscope_T_CDSCOPE_WINDOW: cdscope_T = 2;
pub type cdscope_T = ::std::os::raw::c_uint;
pub const alloc_id_T_aid_none: alloc_id_T = 0;
pub const alloc_id_T_aid_qf_dirname_start: alloc_id_T = 1;
pub const alloc_id_T_aid_qf_dirname_now: alloc_id_T = 2;
pub const alloc_id_T_aid_qf_namebuf: alloc_id_T = 3;
pub const alloc_id_T_aid_qf_module: alloc_id_T = 4;
pub const alloc_id_T_aid_qf_errmsg: alloc_id_T = 5;
pub const alloc_id_T_aid_qf_pattern: alloc_id_T = 6;
pub const alloc_id_T_aid_tagstack_items: alloc_id_T = 7;
pub const alloc_id_T_aid_tagstack_from: alloc_id_T = 8;
pub const alloc_id_T_aid_tagstack_details: alloc_id_T = 9;
pub const alloc_id_T_aid_sign_getdefined: alloc_id_T = 10;
pub const alloc_id_T_aid_sign_getplaced: alloc_id_T = 11;
pub const alloc_id_T_aid_sign_define_by_name: alloc_id_T = 12;
pub const alloc_id_T_aid_sign_getlist: alloc_id_T = 13;
pub const alloc_id_T_aid_sign_getplaced_dict: alloc_id_T = 14;
pub const alloc_id_T_aid_sign_getplaced_list: alloc_id_T = 15;
pub const alloc_id_T_aid_insert_sign: alloc_id_T = 16;
pub const alloc_id_T_aid_sign_getinfo: alloc_id_T = 17;
pub const alloc_id_T_aid_last: alloc_id_T = 18;
pub type alloc_id_T = ::std::os::raw::c_uint;
pub type VimClipboard = ::std::os::raw::c_int;
pub type stat_T = stat;
pub const assert_type_T_ASSERT_EQUAL: assert_type_T = 0;
pub const assert_type_T_ASSERT_NOTEQUAL: assert_type_T = 1;
pub const assert_type_T_ASSERT_MATCH: assert_type_T = 2;
pub const assert_type_T_ASSERT_NOTMATCH: assert_type_T = 3;
pub const assert_type_T_ASSERT_OTHER: assert_type_T = 4;
pub type assert_type_T = ::std::os::raw::c_uint;
pub const paste_mode_T_PASTE_INSERT: paste_mode_T = 0;
pub const paste_mode_T_PASTE_CMDLINE: paste_mode_T = 1;
pub const paste_mode_T_PASTE_EX: paste_mode_T = 2;
pub const paste_mode_T_PASTE_ONE_CHAR: paste_mode_T = 3;
pub type paste_mode_T = ::std::os::raw::c_uint;
pub const flush_buffers_T_FLUSH_MINIMAL: flush_buffers_T = 0;
pub const flush_buffers_T_FLUSH_TYPEAHEAD: flush_buffers_T = 1;
pub const flush_buffers_T_FLUSH_INPUT: flush_buffers_T = 2;
pub type flush_buffers_T = ::std::os::raw::c_uint;
pub const cmd_addr_T_ADDR_LINES: cmd_addr_T = 0;
pub const cmd_addr_T_ADDR_WINDOWS: cmd_addr_T = 1;
pub const cmd_addr_T_ADDR_ARGUMENTS: cmd_addr_T = 2;
pub const cmd_addr_T_ADDR_LOADED_BUFFERS: cmd_addr_T = 3;
pub const cmd_addr_T_ADDR_BUFFERS: cmd_addr_T = 4;
pub const cmd_addr_T_ADDR_TABS: cmd_addr_T = 5;
pub const cmd_addr_T_ADDR_TABS_RELATIVE: cmd_addr_T = 6;
pub const cmd_addr_T_ADDR_QUICKFIX_VALID: cmd_addr_T = 7;
pub const cmd_addr_T_ADDR_QUICKFIX: cmd_addr_T = 8;
pub const cmd_addr_T_ADDR_UNSIGNED: cmd_addr_T = 9;
pub const cmd_addr_T_ADDR_OTHER: cmd_addr_T = 10;
pub const cmd_addr_T_ADDR_NONE: cmd_addr_T = 11;
pub type cmd_addr_T = ::std::os::raw::c_uint;
pub type exarg_T = exarg;
pub const CMD_index_CMD_append: CMD_index = 0;
pub const CMD_index_CMD_abbreviate: CMD_index = 1;
pub const CMD_index_CMD_abclear: CMD_index = 2;
pub const CMD_index_CMD_aboveleft: CMD_index = 3;
pub const CMD_index_CMD_all: CMD_index = 4;
pub const CMD_index_CMD_amenu: CMD_index = 5;
pub const CMD_index_CMD_anoremenu: CMD_index = 6;
pub const CMD_index_CMD_args: CMD_index = 7;
pub const CMD_index_CMD_argadd: CMD_index = 8;
pub const CMD_index_CMD_argdelete: CMD_index = 9;
pub const CMD_index_CMD_argdo: CMD_index = 10;
pub const CMD_index_CMD_argedit: CMD_index = 11;
pub const CMD_index_CMD_argglobal: CMD_index = 12;
pub const CMD_index_CMD_arglocal: CMD_index = 13;
pub const CMD_index_CMD_argument: CMD_index = 14;
pub const CMD_index_CMD_ascii: CMD_index = 15;
pub const CMD_index_CMD_autocmd: CMD_index = 16;
pub const CMD_index_CMD_augroup: CMD_index = 17;
pub const CMD_index_CMD_aunmenu: CMD_index = 18;
pub const CMD_index_CMD_buffer: CMD_index = 19;
pub const CMD_index_CMD_bNext: CMD_index = 20;
pub const CMD_index_CMD_ball: CMD_index = 21;
pub const CMD_index_CMD_badd: CMD_index = 22;
pub const CMD_index_CMD_bdelete: CMD_index = 23;
pub const CMD_index_CMD_behave: CMD_index = 24;
pub const CMD_index_CMD_belowright: CMD_index = 25;
pub const CMD_index_CMD_bfirst: CMD_index = 26;
pub const CMD_index_CMD_blast: CMD_index = 27;
pub const CMD_index_CMD_bmodified: CMD_index = 28;
pub const CMD_index_CMD_bnext: CMD_index = 29;
pub const CMD_index_CMD_botright: CMD_index = 30;
pub const CMD_index_CMD_bprevious: CMD_index = 31;
pub const CMD_index_CMD_brewind: CMD_index = 32;
pub const CMD_index_CMD_break: CMD_index = 33;
pub const CMD_index_CMD_breakadd: CMD_index = 34;
pub const CMD_index_CMD_breakdel: CMD_index = 35;
pub const CMD_index_CMD_breaklist: CMD_index = 36;
pub const CMD_index_CMD_browse: CMD_index = 37;
pub const CMD_index_CMD_buffers: CMD_index = 38;
pub const CMD_index_CMD_bufdo: CMD_index = 39;
pub const CMD_index_CMD_bunload: CMD_index = 40;
pub const CMD_index_CMD_bwipeout: CMD_index = 41;
pub const CMD_index_CMD_change: CMD_index = 42;
pub const CMD_index_CMD_cNext: CMD_index = 43;
pub const CMD_index_CMD_cNfile: CMD_index = 44;
pub const CMD_index_CMD_cabbrev: CMD_index = 45;
pub const CMD_index_CMD_cabclear: CMD_index = 46;
pub const CMD_index_CMD_cabove: CMD_index = 47;
pub const CMD_index_CMD_caddbuffer: CMD_index = 48;
pub const CMD_index_CMD_caddexpr: CMD_index = 49;
pub const CMD_index_CMD_caddfile: CMD_index = 50;
pub const CMD_index_CMD_cafter: CMD_index = 51;
pub const CMD_index_CMD_call: CMD_index = 52;
pub const CMD_index_CMD_catch: CMD_index = 53;
pub const CMD_index_CMD_cbuffer: CMD_index = 54;
pub const CMD_index_CMD_cbefore: CMD_index = 55;
pub const CMD_index_CMD_cbelow: CMD_index = 56;
pub const CMD_index_CMD_cbottom: CMD_index = 57;
pub const CMD_index_CMD_cc: CMD_index = 58;
pub const CMD_index_CMD_cclose: CMD_index = 59;
pub const CMD_index_CMD_cd: CMD_index = 60;
pub const CMD_index_CMD_cdo: CMD_index = 61;
pub const CMD_index_CMD_center: CMD_index = 62;
pub const CMD_index_CMD_cexpr: CMD_index = 63;
pub const CMD_index_CMD_cfile: CMD_index = 64;
pub const CMD_index_CMD_cfdo: CMD_index = 65;
pub const CMD_index_CMD_cfirst: CMD_index = 66;
pub const CMD_index_CMD_cgetfile: CMD_index = 67;
pub const CMD_index_CMD_cgetbuffer: CMD_index = 68;
pub const CMD_index_CMD_cgetexpr: CMD_index = 69;
pub const CMD_index_CMD_chdir: CMD_index = 70;
pub const CMD_index_CMD_changes: CMD_index = 71;
pub const CMD_index_CMD_checkpath: CMD_index = 72;
pub const CMD_index_CMD_checktime: CMD_index = 73;
pub const CMD_index_CMD_chistory: CMD_index = 74;
pub const CMD_index_CMD_clist: CMD_index = 75;
pub const CMD_index_CMD_clast: CMD_index = 76;
pub const CMD_index_CMD_close: CMD_index = 77;
pub const CMD_index_CMD_clearjumps: CMD_index = 78;
pub const CMD_index_CMD_cmap: CMD_index = 79;
pub const CMD_index_CMD_cmapclear: CMD_index = 80;
pub const CMD_index_CMD_cmenu: CMD_index = 81;
pub const CMD_index_CMD_cnext: CMD_index = 82;
pub const CMD_index_CMD_cnewer: CMD_index = 83;
pub const CMD_index_CMD_cnfile: CMD_index = 84;
pub const CMD_index_CMD_cnoremap: CMD_index = 85;
pub const CMD_index_CMD_cnoreabbrev: CMD_index = 86;
pub const CMD_index_CMD_cnoremenu: CMD_index = 87;
pub const CMD_index_CMD_copy: CMD_index = 88;
pub const CMD_index_CMD_colder: CMD_index = 89;
pub const CMD_index_CMD_colorscheme: CMD_index = 90;
pub const CMD_index_CMD_command: CMD_index = 91;
pub const CMD_index_CMD_comclear: CMD_index = 92;
pub const CMD_index_CMD_compiler: CMD_index = 93;
pub const CMD_index_CMD_continue: CMD_index = 94;
pub const CMD_index_CMD_confirm: CMD_index = 95;
pub const CMD_index_CMD_copen: CMD_index = 96;
pub const CMD_index_CMD_cprevious: CMD_index = 97;
pub const CMD_index_CMD_cpfile: CMD_index = 98;
pub const CMD_index_CMD_cquit: CMD_index = 99;
pub const CMD_index_CMD_crewind: CMD_index = 100;
pub const CMD_index_CMD_cscope: CMD_index = 101;
pub const CMD_index_CMD_cstag: CMD_index = 102;
pub const CMD_index_CMD_cunmap: CMD_index = 103;
pub const CMD_index_CMD_cunabbrev: CMD_index = 104;
pub const CMD_index_CMD_cunmenu: CMD_index = 105;
pub const CMD_index_CMD_cwindow: CMD_index = 106;
pub const CMD_index_CMD_delete: CMD_index = 107;
pub const CMD_index_CMD_delmarks: CMD_index = 108;
pub const CMD_index_CMD_debug: CMD_index = 109;
pub const CMD_index_CMD_debuggreedy: CMD_index = 110;
pub const CMD_index_CMD_delcommand: CMD_index = 111;
pub const CMD_index_CMD_delfunction: CMD_index = 112;
pub const CMD_index_CMD_display: CMD_index = 113;
pub const CMD_index_CMD_diffupdate: CMD_index = 114;
pub const CMD_index_CMD_diffget: CMD_index = 115;
pub const CMD_index_CMD_diffoff: CMD_index = 116;
pub const CMD_index_CMD_diffpatch: CMD_index = 117;
pub const CMD_index_CMD_diffput: CMD_index = 118;
pub const CMD_index_CMD_diffsplit: CMD_index = 119;
pub const CMD_index_CMD_diffthis: CMD_index = 120;
pub const CMD_index_CMD_digraphs: CMD_index = 121;
pub const CMD_index_CMD_djump: CMD_index = 122;
pub const CMD_index_CMD_dlist: CMD_index = 123;
pub const CMD_index_CMD_doautocmd: CMD_index = 124;
pub const CMD_index_CMD_doautoall: CMD_index = 125;
pub const CMD_index_CMD_drop: CMD_index = 126;
pub const CMD_index_CMD_dsearch: CMD_index = 127;
pub const CMD_index_CMD_dsplit: CMD_index = 128;
pub const CMD_index_CMD_edit: CMD_index = 129;
pub const CMD_index_CMD_earlier: CMD_index = 130;
pub const CMD_index_CMD_echo: CMD_index = 131;
pub const CMD_index_CMD_echoerr: CMD_index = 132;
pub const CMD_index_CMD_echohl: CMD_index = 133;
pub const CMD_index_CMD_echomsg: CMD_index = 134;
pub const CMD_index_CMD_echon: CMD_index = 135;
pub const CMD_index_CMD_else: CMD_index = 136;
pub const CMD_index_CMD_elseif: CMD_index = 137;
pub const CMD_index_CMD_emenu: CMD_index = 138;
pub const CMD_index_CMD_endif: CMD_index = 139;
pub const CMD_index_CMD_endfunction: CMD_index = 140;
pub const CMD_index_CMD_endfor: CMD_index = 141;
pub const CMD_index_CMD_endtry: CMD_index = 142;
pub const CMD_index_CMD_endwhile: CMD_index = 143;
pub const CMD_index_CMD_enew: CMD_index = 144;
pub const CMD_index_CMD_ex: CMD_index = 145;
pub const CMD_index_CMD_execute: CMD_index = 146;
pub const CMD_index_CMD_exit: CMD_index = 147;
pub const CMD_index_CMD_exusage: CMD_index = 148;
pub const CMD_index_CMD_file: CMD_index = 149;
pub const CMD_index_CMD_files: CMD_index = 150;
pub const CMD_index_CMD_filetype: CMD_index = 151;
pub const CMD_index_CMD_filter: CMD_index = 152;
pub const CMD_index_CMD_find: CMD_index = 153;
pub const CMD_index_CMD_finally: CMD_index = 154;
pub const CMD_index_CMD_finish: CMD_index = 155;
pub const CMD_index_CMD_first: CMD_index = 156;
pub const CMD_index_CMD_fixdel: CMD_index = 157;
pub const CMD_index_CMD_fold: CMD_index = 158;
pub const CMD_index_CMD_foldclose: CMD_index = 159;
pub const CMD_index_CMD_folddoopen: CMD_index = 160;
pub const CMD_index_CMD_folddoclosed: CMD_index = 161;
pub const CMD_index_CMD_foldopen: CMD_index = 162;
pub const CMD_index_CMD_for: CMD_index = 163;
pub const CMD_index_CMD_function: CMD_index = 164;
pub const CMD_index_CMD_global: CMD_index = 165;
pub const CMD_index_CMD_goto: CMD_index = 166;
pub const CMD_index_CMD_grep: CMD_index = 167;
pub const CMD_index_CMD_grepadd: CMD_index = 168;
pub const CMD_index_CMD_gui: CMD_index = 169;
pub const CMD_index_CMD_gvim: CMD_index = 170;
pub const CMD_index_CMD_help: CMD_index = 171;
pub const CMD_index_CMD_helpclose: CMD_index = 172;
pub const CMD_index_CMD_helpfind: CMD_index = 173;
pub const CMD_index_CMD_helpgrep: CMD_index = 174;
pub const CMD_index_CMD_helptags: CMD_index = 175;
pub const CMD_index_CMD_highlight: CMD_index = 176;
pub const CMD_index_CMD_hide: CMD_index = 177;
pub const CMD_index_CMD_history: CMD_index = 178;
pub const CMD_index_CMD_insert: CMD_index = 179;
pub const CMD_index_CMD_iabbrev: CMD_index = 180;
pub const CMD_index_CMD_iabclear: CMD_index = 181;
pub const CMD_index_CMD_if: CMD_index = 182;
pub const CMD_index_CMD_ijump: CMD_index = 183;
pub const CMD_index_CMD_ilist: CMD_index = 184;
pub const CMD_index_CMD_imap: CMD_index = 185;
pub const CMD_index_CMD_imapclear: CMD_index = 186;
pub const CMD_index_CMD_imenu: CMD_index = 187;
pub const CMD_index_CMD_inoremap: CMD_index = 188;
pub const CMD_index_CMD_inoreabbrev: CMD_index = 189;
pub const CMD_index_CMD_inoremenu: CMD_index = 190;
pub const CMD_index_CMD_intro: CMD_index = 191;
pub const CMD_index_CMD_isearch: CMD_index = 192;
pub const CMD_index_CMD_isplit: CMD_index = 193;
pub const CMD_index_CMD_iunmap: CMD_index = 194;
pub const CMD_index_CMD_iunabbrev: CMD_index = 195;
pub const CMD_index_CMD_iunmenu: CMD_index = 196;
pub const CMD_index_CMD_join: CMD_index = 197;
pub const CMD_index_CMD_jumps: CMD_index = 198;
pub const CMD_index_CMD_k: CMD_index = 199;
pub const CMD_index_CMD_keepmarks: CMD_index = 200;
pub const CMD_index_CMD_keepjumps: CMD_index = 201;
pub const CMD_index_CMD_keeppatterns: CMD_index = 202;
pub const CMD_index_CMD_keepalt: CMD_index = 203;
pub const CMD_index_CMD_list: CMD_index = 204;
pub const CMD_index_CMD_lNext: CMD_index = 205;
pub const CMD_index_CMD_lNfile: CMD_index = 206;
pub const CMD_index_CMD_last: CMD_index = 207;
pub const CMD_index_CMD_labove: CMD_index = 208;
pub const CMD_index_CMD_language: CMD_index = 209;
pub const CMD_index_CMD_laddexpr: CMD_index = 210;
pub const CMD_index_CMD_laddbuffer: CMD_index = 211;
pub const CMD_index_CMD_laddfile: CMD_index = 212;
pub const CMD_index_CMD_lafter: CMD_index = 213;
pub const CMD_index_CMD_later: CMD_index = 214;
pub const CMD_index_CMD_lbuffer: CMD_index = 215;
pub const CMD_index_CMD_lbefore: CMD_index = 216;
pub const CMD_index_CMD_lbelow: CMD_index = 217;
pub const CMD_index_CMD_lbottom: CMD_index = 218;
pub const CMD_index_CMD_lcd: CMD_index = 219;
pub const CMD_index_CMD_lchdir: CMD_index = 220;
pub const CMD_index_CMD_lclose: CMD_index = 221;
pub const CMD_index_CMD_lcscope: CMD_index = 222;
pub const CMD_index_CMD_ldo: CMD_index = 223;
pub const CMD_index_CMD_left: CMD_index = 224;
pub const CMD_index_CMD_leftabove: CMD_index = 225;
pub const CMD_index_CMD_let: CMD_index = 226;
pub const CMD_index_CMD_lexpr: CMD_index = 227;
pub const CMD_index_CMD_lfile: CMD_index = 228;
pub const CMD_index_CMD_lfdo: CMD_index = 229;
pub const CMD_index_CMD_lfirst: CMD_index = 230;
pub const CMD_index_CMD_lgetfile: CMD_index = 231;
pub const CMD_index_CMD_lgetbuffer: CMD_index = 232;
pub const CMD_index_CMD_lgetexpr: CMD_index = 233;
pub const CMD_index_CMD_lgrep: CMD_index = 234;
pub const CMD_index_CMD_lgrepadd: CMD_index = 235;
pub const CMD_index_CMD_lhelpgrep: CMD_index = 236;
pub const CMD_index_CMD_lhistory: CMD_index = 237;
pub const CMD_index_CMD_ll: CMD_index = 238;
pub const CMD_index_CMD_llast: CMD_index = 239;
pub const CMD_index_CMD_llist: CMD_index = 240;
pub const CMD_index_CMD_lmap: CMD_index = 241;
pub const CMD_index_CMD_lmapclear: CMD_index = 242;
pub const CMD_index_CMD_lmake: CMD_index = 243;
pub const CMD_index_CMD_lnoremap: CMD_index = 244;
pub const CMD_index_CMD_lnext: CMD_index = 245;
pub const CMD_index_CMD_lnewer: CMD_index = 246;
pub const CMD_index_CMD_lnfile: CMD_index = 247;
pub const CMD_index_CMD_loadview: CMD_index = 248;
pub const CMD_index_CMD_loadkeymap: CMD_index = 249;
pub const CMD_index_CMD_lockmarks: CMD_index = 250;
pub const CMD_index_CMD_lockvar: CMD_index = 251;
pub const CMD_index_CMD_lolder: CMD_index = 252;
pub const CMD_index_CMD_lopen: CMD_index = 253;
pub const CMD_index_CMD_lprevious: CMD_index = 254;
pub const CMD_index_CMD_lpfile: CMD_index = 255;
pub const CMD_index_CMD_lrewind: CMD_index = 256;
pub const CMD_index_CMD_ltag: CMD_index = 257;
pub const CMD_index_CMD_lunmap: CMD_index = 258;
pub const CMD_index_CMD_lua: CMD_index = 259;
pub const CMD_index_CMD_luado: CMD_index = 260;
pub const CMD_index_CMD_luafile: CMD_index = 261;
pub const CMD_index_CMD_lvimgrep: CMD_index = 262;
pub const CMD_index_CMD_lvimgrepadd: CMD_index = 263;
pub const CMD_index_CMD_lwindow: CMD_index = 264;
pub const CMD_index_CMD_ls: CMD_index = 265;
pub const CMD_index_CMD_move: CMD_index = 266;
pub const CMD_index_CMD_mark: CMD_index = 267;
pub const CMD_index_CMD_make: CMD_index = 268;
pub const CMD_index_CMD_map: CMD_index = 269;
pub const CMD_index_CMD_mapclear: CMD_index = 270;
pub const CMD_index_CMD_marks: CMD_index = 271;
pub const CMD_index_CMD_match: CMD_index = 272;
pub const CMD_index_CMD_menu: CMD_index = 273;
pub const CMD_index_CMD_menutranslate: CMD_index = 274;
pub const CMD_index_CMD_messages: CMD_index = 275;
pub const CMD_index_CMD_mkexrc: CMD_index = 276;
pub const CMD_index_CMD_mksession: CMD_index = 277;
pub const CMD_index_CMD_mkspell: CMD_index = 278;
pub const CMD_index_CMD_mkvimrc: CMD_index = 279;
pub const CMD_index_CMD_mkview: CMD_index = 280;
pub const CMD_index_CMD_mode: CMD_index = 281;
pub const CMD_index_CMD_mzscheme: CMD_index = 282;
pub const CMD_index_CMD_mzfile: CMD_index = 283;
pub const CMD_index_CMD_next: CMD_index = 284;
pub const CMD_index_CMD_nbkey: CMD_index = 285;
pub const CMD_index_CMD_nbclose: CMD_index = 286;
pub const CMD_index_CMD_nbstart: CMD_index = 287;
pub const CMD_index_CMD_new: CMD_index = 288;
pub const CMD_index_CMD_nmap: CMD_index = 289;
pub const CMD_index_CMD_nmapclear: CMD_index = 290;
pub const CMD_index_CMD_nmenu: CMD_index = 291;
pub const CMD_index_CMD_nnoremap: CMD_index = 292;
pub const CMD_index_CMD_nnoremenu: CMD_index = 293;
pub const CMD_index_CMD_noremap: CMD_index = 294;
pub const CMD_index_CMD_noautocmd: CMD_index = 295;
pub const CMD_index_CMD_nohlsearch: CMD_index = 296;
pub const CMD_index_CMD_noreabbrev: CMD_index = 297;
pub const CMD_index_CMD_noremenu: CMD_index = 298;
pub const CMD_index_CMD_noswapfile: CMD_index = 299;
pub const CMD_index_CMD_normal: CMD_index = 300;
pub const CMD_index_CMD_number: CMD_index = 301;
pub const CMD_index_CMD_nunmap: CMD_index = 302;
pub const CMD_index_CMD_nunmenu: CMD_index = 303;
pub const CMD_index_CMD_open: CMD_index = 304;
pub const CMD_index_CMD_oldfiles: CMD_index = 305;
pub const CMD_index_CMD_omap: CMD_index = 306;
pub const CMD_index_CMD_omapclear: CMD_index = 307;
pub const CMD_index_CMD_omenu: CMD_index = 308;
pub const CMD_index_CMD_only: CMD_index = 309;
pub const CMD_index_CMD_onoremap: CMD_index = 310;
pub const CMD_index_CMD_onoremenu: CMD_index = 311;
pub const CMD_index_CMD_options: CMD_index = 312;
pub const CMD_index_CMD_ounmap: CMD_index = 313;
pub const CMD_index_CMD_ounmenu: CMD_index = 314;
pub const CMD_index_CMD_ownsyntax: CMD_index = 315;
pub const CMD_index_CMD_print: CMD_index = 316;
pub const CMD_index_CMD_packadd: CMD_index = 317;
pub const CMD_index_CMD_packloadall: CMD_index = 318;
pub const CMD_index_CMD_pclose: CMD_index = 319;
pub const CMD_index_CMD_perl: CMD_index = 320;
pub const CMD_index_CMD_perldo: CMD_index = 321;
pub const CMD_index_CMD_pedit: CMD_index = 322;
pub const CMD_index_CMD_pop: CMD_index = 323;
pub const CMD_index_CMD_popup: CMD_index = 324;
pub const CMD_index_CMD_popupclear: CMD_index = 325;
pub const CMD_index_CMD_ppop: CMD_index = 326;
pub const CMD_index_CMD_preserve: CMD_index = 327;
pub const CMD_index_CMD_previous: CMD_index = 328;
pub const CMD_index_CMD_promptfind: CMD_index = 329;
pub const CMD_index_CMD_promptrepl: CMD_index = 330;
pub const CMD_index_CMD_profile: CMD_index = 331;
pub const CMD_index_CMD_profdel: CMD_index = 332;
pub const CMD_index_CMD_psearch: CMD_index = 333;
pub const CMD_index_CMD_ptag: CMD_index = 334;
pub const CMD_index_CMD_ptNext: CMD_index = 335;
pub const CMD_index_CMD_ptfirst: CMD_index = 336;
pub const CMD_index_CMD_ptjump: CMD_index = 337;
pub const CMD_index_CMD_ptlast: CMD_index = 338;
pub const CMD_index_CMD_ptnext: CMD_index = 339;
pub const CMD_index_CMD_ptprevious: CMD_index = 340;
pub const CMD_index_CMD_ptrewind: CMD_index = 341;
pub const CMD_index_CMD_ptselect: CMD_index = 342;
pub const CMD_index_CMD_put: CMD_index = 343;
pub const CMD_index_CMD_pwd: CMD_index = 344;
pub const CMD_index_CMD_python: CMD_index = 345;
pub const CMD_index_CMD_pydo: CMD_index = 346;
pub const CMD_index_CMD_pyfile: CMD_index = 347;
pub const CMD_index_CMD_py3: CMD_index = 348;
pub const CMD_index_CMD_py3do: CMD_index = 349;
pub const CMD_index_CMD_python3: CMD_index = 350;
pub const CMD_index_CMD_py3file: CMD_index = 351;
pub const CMD_index_CMD_pyx: CMD_index = 352;
pub const CMD_index_CMD_pyxdo: CMD_index = 353;
pub const CMD_index_CMD_pythonx: CMD_index = 354;
pub const CMD_index_CMD_pyxfile: CMD_index = 355;
pub const CMD_index_CMD_quit: CMD_index = 356;
pub const CMD_index_CMD_quitall: CMD_index = 357;
pub const CMD_index_CMD_qall: CMD_index = 358;
pub const CMD_index_CMD_read: CMD_index = 359;
pub const CMD_index_CMD_recover: CMD_index = 360;
pub const CMD_index_CMD_redo: CMD_index = 361;
pub const CMD_index_CMD_redir: CMD_index = 362;
pub const CMD_index_CMD_redraw: CMD_index = 363;
pub const CMD_index_CMD_redrawstatus: CMD_index = 364;
pub const CMD_index_CMD_redrawtabline: CMD_index = 365;
pub const CMD_index_CMD_registers: CMD_index = 366;
pub const CMD_index_CMD_resize: CMD_index = 367;
pub const CMD_index_CMD_retab: CMD_index = 368;
pub const CMD_index_CMD_return: CMD_index = 369;
pub const CMD_index_CMD_rewind: CMD_index = 370;
pub const CMD_index_CMD_right: CMD_index = 371;
pub const CMD_index_CMD_rightbelow: CMD_index = 372;
pub const CMD_index_CMD_runtime: CMD_index = 373;
pub const CMD_index_CMD_ruby: CMD_index = 374;
pub const CMD_index_CMD_rubydo: CMD_index = 375;
pub const CMD_index_CMD_rubyfile: CMD_index = 376;
pub const CMD_index_CMD_rundo: CMD_index = 377;
pub const CMD_index_CMD_rviminfo: CMD_index = 378;
pub const CMD_index_CMD_substitute: CMD_index = 379;
pub const CMD_index_CMD_sNext: CMD_index = 380;
pub const CMD_index_CMD_sargument: CMD_index = 381;
pub const CMD_index_CMD_sall: CMD_index = 382;
pub const CMD_index_CMD_sandbox: CMD_index = 383;
pub const CMD_index_CMD_saveas: CMD_index = 384;
pub const CMD_index_CMD_sbuffer: CMD_index = 385;
pub const CMD_index_CMD_sbNext: CMD_index = 386;
pub const CMD_index_CMD_sball: CMD_index = 387;
pub const CMD_index_CMD_sbfirst: CMD_index = 388;
pub const CMD_index_CMD_sblast: CMD_index = 389;
pub const CMD_index_CMD_sbmodified: CMD_index = 390;
pub const CMD_index_CMD_sbnext: CMD_index = 391;
pub const CMD_index_CMD_sbprevious: CMD_index = 392;
pub const CMD_index_CMD_sbrewind: CMD_index = 393;
pub const CMD_index_CMD_scriptnames: CMD_index = 394;
pub const CMD_index_CMD_scriptencoding: CMD_index = 395;
pub const CMD_index_CMD_scriptversion: CMD_index = 396;
pub const CMD_index_CMD_scscope: CMD_index = 397;
pub const CMD_index_CMD_set: CMD_index = 398;
pub const CMD_index_CMD_setfiletype: CMD_index = 399;
pub const CMD_index_CMD_setglobal: CMD_index = 400;
pub const CMD_index_CMD_setlocal: CMD_index = 401;
pub const CMD_index_CMD_sfind: CMD_index = 402;
pub const CMD_index_CMD_sfirst: CMD_index = 403;
pub const CMD_index_CMD_shell: CMD_index = 404;
pub const CMD_index_CMD_simalt: CMD_index = 405;
pub const CMD_index_CMD_sign: CMD_index = 406;
pub const CMD_index_CMD_silent: CMD_index = 407;
pub const CMD_index_CMD_sleep: CMD_index = 408;
pub const CMD_index_CMD_slast: CMD_index = 409;
pub const CMD_index_CMD_smagic: CMD_index = 410;
pub const CMD_index_CMD_smap: CMD_index = 411;
pub const CMD_index_CMD_smapclear: CMD_index = 412;
pub const CMD_index_CMD_smenu: CMD_index = 413;
pub const CMD_index_CMD_snext: CMD_index = 414;
pub const CMD_index_CMD_snomagic: CMD_index = 415;
pub const CMD_index_CMD_snoremap: CMD_index = 416;
pub const CMD_index_CMD_snoremenu: CMD_index = 417;
pub const CMD_index_CMD_source: CMD_index = 418;
pub const CMD_index_CMD_sort: CMD_index = 419;
pub const CMD_index_CMD_split: CMD_index = 420;
pub const CMD_index_CMD_spellgood: CMD_index = 421;
pub const CMD_index_CMD_spelldump: CMD_index = 422;
pub const CMD_index_CMD_spellinfo: CMD_index = 423;
pub const CMD_index_CMD_spellrepall: CMD_index = 424;
pub const CMD_index_CMD_spellundo: CMD_index = 425;
pub const CMD_index_CMD_spellwrong: CMD_index = 426;
pub const CMD_index_CMD_sprevious: CMD_index = 427;
pub const CMD_index_CMD_srewind: CMD_index = 428;
pub const CMD_index_CMD_stop: CMD_index = 429;
pub const CMD_index_CMD_stag: CMD_index = 430;
pub const CMD_index_CMD_startinsert: CMD_index = 431;
pub const CMD_index_CMD_startgreplace: CMD_index = 432;
pub const CMD_index_CMD_startreplace: CMD_index = 433;
pub const CMD_index_CMD_stopinsert: CMD_index = 434;
pub const CMD_index_CMD_stjump: CMD_index = 435;
pub const CMD_index_CMD_stselect: CMD_index = 436;
pub const CMD_index_CMD_sunhide: CMD_index = 437;
pub const CMD_index_CMD_sunmap: CMD_index = 438;
pub const CMD_index_CMD_sunmenu: CMD_index = 439;
pub const CMD_index_CMD_suspend: CMD_index = 440;
pub const CMD_index_CMD_sview: CMD_index = 441;
pub const CMD_index_CMD_swapname: CMD_index = 442;
pub const CMD_index_CMD_syntax: CMD_index = 443;
pub const CMD_index_CMD_syntime: CMD_index = 444;
pub const CMD_index_CMD_syncbind: CMD_index = 445;
pub const CMD_index_CMD_t: CMD_index = 446;
pub const CMD_index_CMD_tNext: CMD_index = 447;
pub const CMD_index_CMD_tag: CMD_index = 448;
pub const CMD_index_CMD_tags: CMD_index = 449;
pub const CMD_index_CMD_tab: CMD_index = 450;
pub const CMD_index_CMD_tabclose: CMD_index = 451;
pub const CMD_index_CMD_tabdo: CMD_index = 452;
pub const CMD_index_CMD_tabedit: CMD_index = 453;
pub const CMD_index_CMD_tabfind: CMD_index = 454;
pub const CMD_index_CMD_tabfirst: CMD_index = 455;
pub const CMD_index_CMD_tabmove: CMD_index = 456;
pub const CMD_index_CMD_tablast: CMD_index = 457;
pub const CMD_index_CMD_tabnext: CMD_index = 458;
pub const CMD_index_CMD_tabnew: CMD_index = 459;
pub const CMD_index_CMD_tabonly: CMD_index = 460;
pub const CMD_index_CMD_tabprevious: CMD_index = 461;
pub const CMD_index_CMD_tabNext: CMD_index = 462;
pub const CMD_index_CMD_tabrewind: CMD_index = 463;
pub const CMD_index_CMD_tabs: CMD_index = 464;
pub const CMD_index_CMD_tcd: CMD_index = 465;
pub const CMD_index_CMD_tchdir: CMD_index = 466;
pub const CMD_index_CMD_tcl: CMD_index = 467;
pub const CMD_index_CMD_tcldo: CMD_index = 468;
pub const CMD_index_CMD_tclfile: CMD_index = 469;
pub const CMD_index_CMD_tearoff: CMD_index = 470;
pub const CMD_index_CMD_terminal: CMD_index = 471;
pub const CMD_index_CMD_tfirst: CMD_index = 472;
pub const CMD_index_CMD_throw: CMD_index = 473;
pub const CMD_index_CMD_tjump: CMD_index = 474;
pub const CMD_index_CMD_tlast: CMD_index = 475;
pub const CMD_index_CMD_tlmenu: CMD_index = 476;
pub const CMD_index_CMD_tlnoremenu: CMD_index = 477;
pub const CMD_index_CMD_tlunmenu: CMD_index = 478;
pub const CMD_index_CMD_tmenu: CMD_index = 479;
pub const CMD_index_CMD_tmap: CMD_index = 480;
pub const CMD_index_CMD_tmapclear: CMD_index = 481;
pub const CMD_index_CMD_tnext: CMD_index = 482;
pub const CMD_index_CMD_tnoremap: CMD_index = 483;
pub const CMD_index_CMD_topleft: CMD_index = 484;
pub const CMD_index_CMD_tprevious: CMD_index = 485;
pub const CMD_index_CMD_trewind: CMD_index = 486;
pub const CMD_index_CMD_try: CMD_index = 487;
pub const CMD_index_CMD_tselect: CMD_index = 488;
pub const CMD_index_CMD_tunmenu: CMD_index = 489;
pub const CMD_index_CMD_tunmap: CMD_index = 490;
pub const CMD_index_CMD_undo: CMD_index = 491;
pub const CMD_index_CMD_undojoin: CMD_index = 492;
pub const CMD_index_CMD_undolist: CMD_index = 493;
pub const CMD_index_CMD_unabbreviate: CMD_index = 494;
pub const CMD_index_CMD_unhide: CMD_index = 495;
pub const CMD_index_CMD_unlet: CMD_index = 496;
pub const CMD_index_CMD_unlockvar: CMD_index = 497;
pub const CMD_index_CMD_unmap: CMD_index = 498;
pub const CMD_index_CMD_unmenu: CMD_index = 499;
pub const CMD_index_CMD_unsilent: CMD_index = 500;
pub const CMD_index_CMD_update: CMD_index = 501;
pub const CMD_index_CMD_vglobal: CMD_index = 502;
pub const CMD_index_CMD_version: CMD_index = 503;
pub const CMD_index_CMD_verbose: CMD_index = 504;
pub const CMD_index_CMD_vertical: CMD_index = 505;
pub const CMD_index_CMD_visual: CMD_index = 506;
pub const CMD_index_CMD_view: CMD_index = 507;
pub const CMD_index_CMD_vimgrep: CMD_index = 508;
pub const CMD_index_CMD_vimgrepadd: CMD_index = 509;
pub const CMD_index_CMD_viusage: CMD_index = 510;
pub const CMD_index_CMD_vmap: CMD_index = 511;
pub const CMD_index_CMD_vmapclear: CMD_index = 512;
pub const CMD_index_CMD_vmenu: CMD_index = 513;
pub const CMD_index_CMD_vnoremap: CMD_index = 514;
pub const CMD_index_CMD_vnew: CMD_index = 515;
pub const CMD_index_CMD_vnoremenu: CMD_index = 516;
pub const CMD_index_CMD_vsplit: CMD_index = 517;
pub const CMD_index_CMD_vunmap: CMD_index = 518;
pub const CMD_index_CMD_vunmenu: CMD_index = 519;
pub const CMD_index_CMD_write: CMD_index = 520;
pub const CMD_index_CMD_wNext: CMD_index = 521;
pub const CMD_index_CMD_wall: CMD_index = 522;
pub const CMD_index_CMD_while: CMD_index = 523;
pub const CMD_index_CMD_winsize: CMD_index = 524;
pub const CMD_index_CMD_wincmd: CMD_index = 525;
pub const CMD_index_CMD_windo: CMD_index = 526;
pub const CMD_index_CMD_winpos: CMD_index = 527;
pub const CMD_index_CMD_wnext: CMD_index = 528;
pub const CMD_index_CMD_wprevious: CMD_index = 529;
pub const CMD_index_CMD_wq: CMD_index = 530;
pub const CMD_index_CMD_wqall: CMD_index = 531;
pub const CMD_index_CMD_wundo: CMD_index = 532;
pub const CMD_index_CMD_wviminfo: CMD_index = 533;
pub const CMD_index_CMD_xit: CMD_index = 534;
pub const CMD_index_CMD_xall: CMD_index = 535;
pub const CMD_index_CMD_xmap: CMD_index = 536;
pub const CMD_index_CMD_xmapclear: CMD_index = 537;
pub const CMD_index_CMD_xmenu: CMD_index = 538;
pub const CMD_index_CMD_xnoremap: CMD_index = 539;
pub const CMD_index_CMD_xnoremenu: CMD_index = 540;
pub const CMD_index_CMD_xrestore: CMD_index = 541;
pub const CMD_index_CMD_xunmap: CMD_index = 542;
pub const CMD_index_CMD_xunmenu: CMD_index = 543;
pub const CMD_index_CMD_yank: CMD_index = 544;
pub const CMD_index_CMD_z: CMD_index = 545;
pub const CMD_index_CMD_bang: CMD_index = 546;
pub const CMD_index_CMD_pound: CMD_index = 547;
pub const CMD_index_CMD_and: CMD_index = 548;
pub const CMD_index_CMD_star: CMD_index = 549;
pub const CMD_index_CMD_lshift: CMD_index = 550;
pub const CMD_index_CMD_equal: CMD_index = 551;
pub const CMD_index_CMD_rshift: CMD_index = 552;
pub const CMD_index_CMD_at: CMD_index = 553;
pub const CMD_index_CMD_Next: CMD_index = 554;
pub const CMD_index_CMD_Print: CMD_index = 555;
pub const CMD_index_CMD_X: CMD_index = 556;
pub const CMD_index_CMD_tilde: CMD_index = 557;
pub const CMD_index_CMD_SIZE: CMD_index = 558;
pub const CMD_index_CMD_USER: CMD_index = -1;
pub const CMD_index_CMD_USER_BUF: CMD_index = -2;
pub type CMD_index = ::std::os::raw::c_int;
pub use self::CMD_index as cmdidx_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exarg {
    pub arg: *mut char_u,
    pub nextcmd: *mut char_u,
    pub cmd: *mut char_u,
    pub cmdlinep: *mut *mut char_u,
    pub cmdidx: cmdidx_T,
    pub argt: ::std::os::raw::c_long,
    pub skip: ::std::os::raw::c_int,
    pub forceit: ::std::os::raw::c_int,
    pub addr_count: ::std::os::raw::c_int,
    pub line1: linenr_T,
    pub line2: linenr_T,
    pub addr_type: cmd_addr_T,
    pub flags: ::std::os::raw::c_int,
    pub do_ecmd_cmd: *mut char_u,
    pub do_ecmd_lnum: linenr_T,
    pub append: ::std::os::raw::c_int,
    pub usefilter: ::std::os::raw::c_int,
    pub amount: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub force_bin: ::std::os::raw::c_int,
    pub read_edit: ::std::os::raw::c_int,
    pub force_ff: ::std::os::raw::c_int,
    pub force_enc: ::std::os::raw::c_int,
    pub bad_char: ::std::os::raw::c_int,
    pub useridx: ::std::os::raw::c_int,
    pub errmsg: *mut ::std::os::raw::c_char,
    pub getline: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
        ) -> *mut char_u,
    >,
    pub cookie: *mut ::std::os::raw::c_void,
    pub cstack: *mut condstack,
    pub verbose_save: ::std::os::raw::c_long,
    pub save_msg_silent: ::std::os::raw::c_int,
    pub did_esilent: ::std::os::raw::c_int,
    pub did_sandbox: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_exarg() {
    const UNINIT: ::std::mem::MaybeUninit<exarg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exarg>(),
        200usize,
        concat!("Size of: ", stringify!(exarg))
    );
    assert_eq!(
        ::std::mem::align_of::<exarg>(),
        8usize,
        concat!("Alignment of ", stringify!(exarg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextcmd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(nextcmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdlinep) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmdlinep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdidx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmdidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(argt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceit) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(forceit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(addr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(line1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(line2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_type) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_ecmd_cmd) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(do_ecmd_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_ecmd_lnum) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(do_ecmd_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usefilter) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(usefilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_bin) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_edit) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(read_edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_ff) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_ff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_enc) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_enc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_char) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(bad_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useridx) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(useridx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errmsg) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(errmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getline) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(getline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cstack) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verbose_save) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(verbose_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_msg_silent) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(save_msg_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).did_esilent) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(did_esilent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).did_sandbox) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(did_sandbox)
        )
    );
}
extern "C" {
    pub fn mch_chdir(path: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_char_avail() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_check_messages() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_total_mem(special: ::std::os::raw::c_int) -> long_u;
}
extern "C" {
    pub fn mch_delay(msec: ::std::os::raw::c_long, ignoreinput: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_stackcheck(p: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_suspend();
}
extern "C" {
    pub fn mch_init();
}
extern "C" {
    pub fn reset_signals();
}
extern "C" {
    pub fn vim_handle_signal(sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_check_win(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_input_isatty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_xrestore(eap: *mut exarg_T);
}
extern "C" {
    pub fn mch_can_restore_title() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_can_restore_icon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_settitle(title: *mut char_u, icon: *mut char_u);
}
extern "C" {
    pub fn mch_restore_title(which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vim_is_xterm(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_xterm_like_mouse(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_xterm_mouse() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_iris(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_vt300(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_fastterm(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_user_name(s: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_uname(
        uid: uid_t,
        s: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_host_name(s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_get_pid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mch_process_running(pid: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_dirname(buf: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_FullName(
        fname: *mut char_u,
        buf: *mut char_u,
        len: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_isFullName(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fname_case(name: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_getperm(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mch_setperm(name: *mut char_u, perm: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_fsetperm(
        fd: ::std::os::raw::c_int,
        perm: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_copy_sec(from_file: *mut char_u, to_file: *mut char_u);
}
extern "C" {
    pub fn mch_get_acl(fname: *mut char_u) -> vim_acl_T;
}
extern "C" {
    pub fn mch_set_acl(fname: *mut char_u, aclent: vim_acl_T);
}
extern "C" {
    pub fn mch_free_acl(aclent: vim_acl_T);
}
extern "C" {
    pub fn mch_hide(name: *mut char_u);
}
extern "C" {
    pub fn mch_isdir(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_isrealdir(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_can_exe(
        name: *mut char_u,
        path: *mut *mut char_u,
        use_path: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_nodetype(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_early_init();
}
extern "C" {
    pub fn mch_free_mem();
}
extern "C" {
    pub fn mch_exit(r: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_settmode(tmode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_stty();
}
extern "C" {
    pub fn get_tty_info(fd: ::std::os::raw::c_int, info: *mut ttyinfo_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_setmouse(on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_bevalterm_changed();
}
extern "C" {
    pub fn check_mouse_termcode();
}
extern "C" {
    pub fn mch_screenmode(arg: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_shellsize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_report_winsize(
        fd: ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_set_shellsize();
}
extern "C" {
    pub fn mch_new_shellsize();
}
extern "C" {
    pub fn may_send_sigint(c: ::std::os::raw::c_int, pid: pid_t, wpid: pid_t);
}
extern "C" {
    pub fn mch_call_shell(
        cmd: *mut char_u,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_job_start(
        argv: *mut *mut ::std::os::raw::c_char,
        job: *mut job_T,
        options: *mut jobopt_T,
        is_terminal: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mch_job_status(job: *mut job_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mch_detect_ended_job(job_list: *mut job_T) -> *mut job_T;
}
extern "C" {
    pub fn mch_signal_job(job: *mut job_T, how: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_clear_job(job: *mut job_T);
}
extern "C" {
    pub fn mch_create_pty_channel(job: *mut job_T, options: *mut jobopt_T)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_breakcheck(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_expandpath(
        gap: *mut garray_T,
        path: *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_expand_wildcards(
        num_pat: ::std::os::raw::c_int,
        pat: *mut *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_has_exp_wildcard(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_has_wildcard(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpm_enabled() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_libcall(
        libname: *mut char_u,
        funcname: *mut char_u,
        argstring: *mut char_u,
        argint: ::std::os::raw::c_int,
        string_result: *mut *mut char_u,
        number_result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_term_clip();
}
extern "C" {
    pub fn start_xterm_trace(button: ::std::os::raw::c_int);
}
extern "C" {
    pub fn stop_xterm_trace();
}
extern "C" {
    pub fn clear_xterm_clip();
}
extern "C" {
    pub fn clip_xterm_own_selection(cbd: *mut VimClipboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_xterm_lose_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_xterm_request_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_xterm_set_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn xsmp_handle_requests() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsmp_init();
}
extern "C" {
    pub fn xsmp_close();
}
extern "C" {
    pub fn aubuflocal_remove(buf: *mut buf_T);
}
extern "C" {
    pub fn au_has_group(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_augroup(arg: *mut char_u, del_group: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_all_autocmds();
}
extern "C" {
    pub fn check_ei() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_event_disable(what: *mut ::std::os::raw::c_char) -> *mut char_u;
}
extern "C" {
    pub fn au_event_restore(old_ei: *mut char_u);
}
extern "C" {
    pub fn do_autocmd(arg_in: *mut char_u, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_doautocmd(
        arg: *mut char_u,
        do_msg: ::std::os::raw::c_int,
        did_something: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_doautoall(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_nomodeline(argp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aucmd_prepbuf(aco: *mut aco_save_T, buf: *mut buf_T);
}
extern "C" {
    pub fn aucmd_restbuf(aco: *mut aco_save_T);
}
extern "C" {
    pub fn apply_autocmds(
        event: event_T,
        fname: *mut char_u,
        fname_io: *mut char_u,
        force: ::std::os::raw::c_int,
        buf: *mut buf_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn apply_autocmds_exarg(
        event: event_T,
        fname: *mut char_u,
        fname_io: *mut char_u,
        force: ::std::os::raw::c_int,
        buf: *mut buf_T,
        eap: *mut exarg_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn apply_autocmds_retval(
        event: event_T,
        fname: *mut char_u,
        fname_io: *mut char_u,
        force: ::std::os::raw::c_int,
        buf: *mut buf_T,
        retval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cursorhold() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trigger_cursorhold() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cursormoved() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cursormovedI() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textchanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textchangedI() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textchangedP() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_insertcharpre() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cmdundefined() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_funcundefined() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textyankpost() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_completechanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn block_autocmds();
}
extern "C" {
    pub fn unblock_autocmds();
}
extern "C" {
    pub fn is_autocmd_blocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnextac(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn has_autocmd(
        event: event_T,
        sfname: *mut char_u,
        buf: *mut buf_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_augroup_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_autocmd(
        xp: *mut expand_T,
        arg: *mut char_u,
        doautocmd: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_event_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn autocmd_supported(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_exists(arg: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob_alloc() -> *mut blob_T;
}
extern "C" {
    pub fn rettv_blob_alloc(rettv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_blob_set(rettv: *mut typval_T, b: *mut blob_T);
}
extern "C" {
    pub fn blob_copy(from: *mut typval_T, to: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob_free(b: *mut blob_T);
}
extern "C" {
    pub fn blob_unref(b: *mut blob_T);
}
extern "C" {
    pub fn blob_len(b: *mut blob_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn blob_get(b: *mut blob_T, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob_set(b: *mut blob_T, idx: ::std::os::raw::c_int, c: char_u);
}
extern "C" {
    pub fn blob_equal(b1: *mut blob_T, b2: *mut blob_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_blob(fd: *mut FILE, blob: *mut blob_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_blob(fd: *mut FILE, blob: *mut blob_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob2string(
        blob: *mut blob_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn string2blob(str_: *mut char_u) -> *mut blob_T;
}
extern "C" {
    pub fn open_buffer(
        read_stdin: ::std::os::raw::c_int,
        eap: *mut exarg_T,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_bufref(bufref: *mut bufref_T, buf: *mut buf_T);
}
extern "C" {
    pub fn bufref_valid(bufref: *mut bufref_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_valid(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close_buffer(
        win: *mut win_T,
        buf: *mut buf_T,
        action: ::std::os::raw::c_int,
        abort_if_last: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn buf_clear_file(buf: *mut buf_T);
}
extern "C" {
    pub fn buf_freeall(buf: *mut buf_T, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn goto_buffer(
        eap: *mut exarg_T,
        start: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn handle_swap_exists(old_curbuf: *mut bufref_T);
}
extern "C" {
    pub fn do_bufdel(
        command: ::std::os::raw::c_int,
        arg: *mut char_u,
        addr_count: ::std::os::raw::c_int,
        start_bnr: ::std::os::raw::c_int,
        end_bnr: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn do_buffer(
        action: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_curbuf(buf: *mut buf_T, action: ::std::os::raw::c_int);
}
extern "C" {
    pub fn enter_buffer(buf: *mut buf_T);
}
extern "C" {
    pub fn do_autochdir();
}
extern "C" {
    pub fn no_write_message();
}
extern "C" {
    pub fn no_write_message_nobang(buf: *mut buf_T);
}
extern "C" {
    pub fn curbuf_reusable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_new(
        ffname_arg: *mut char_u,
        sfname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn free_buf_options(buf: *mut buf_T, free_p_ff: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buflist_getfile(
        n: ::std::os::raw::c_int,
        lnum: linenr_T,
        options: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_getfpos();
}
extern "C" {
    pub fn buflist_findname_exp(fname: *mut char_u) -> *mut buf_T;
}
extern "C" {
    pub fn buflist_findname(ffname: *mut char_u) -> *mut buf_T;
}
extern "C" {
    pub fn buflist_findpat(
        pattern: *mut char_u,
        pattern_end: *mut char_u,
        unlisted: ::std::os::raw::c_int,
        diffmode: ::std::os::raw::c_int,
        curtab_only: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ExpandBufnames(
        pat: *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_findnr(nr: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn buflist_nr2name(
        n: ::std::os::raw::c_int,
        fullname: ::std::os::raw::c_int,
        helptail: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_winopts(buf: *mut buf_T);
}
extern "C" {
    pub fn buflist_findfpos(buf: *mut buf_T) -> *mut pos_T;
}
extern "C" {
    pub fn buflist_findlnum(buf: *mut buf_T) -> linenr_T;
}
extern "C" {
    pub fn buflist_list(eap: *mut exarg_T);
}
extern "C" {
    pub fn buflist_name_nr(
        fnum: ::std::os::raw::c_int,
        fname: *mut *mut char_u,
        lnum: *mut linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setfname(
        buf: *mut buf_T,
        ffname_arg: *mut char_u,
        sfname_arg: *mut char_u,
        message: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_set_name(fnum: ::std::os::raw::c_int, name: *mut char_u);
}
extern "C" {
    pub fn buf_name_changed(buf: *mut buf_T);
}
extern "C" {
    pub fn setaltfname(ffname: *mut char_u, sfname: *mut char_u, lnum: linenr_T) -> *mut buf_T;
}
extern "C" {
    pub fn getaltfname(errmsg: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn buflist_add(fname: *mut char_u, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_slash_adjust();
}
extern "C" {
    pub fn buflist_altfpos(win: *mut win_T);
}
extern "C" {
    pub fn otherfile(ffname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_setino(buf: *mut buf_T);
}
extern "C" {
    pub fn fileinfo(
        fullname: ::std::os::raw::c_int,
        shorthelp: ::std::os::raw::c_int,
        dont_truncate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn col_print(
        buf: *mut char_u,
        buflen: usize,
        col: ::std::os::raw::c_int,
        vcol: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_rel_pos(wp: *mut win_T, buf: *mut char_u, buflen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fix_fname(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn fname_expand(buf: *mut buf_T, ffname: *mut *mut char_u, sfname: *mut *mut char_u);
}
extern "C" {
    pub fn alist_name(aep: *mut aentry_T) -> *mut char_u;
}
extern "C" {
    pub fn do_arg_all(
        count: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        keep_tabs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ex_buffer_all(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_modelines(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_viminfo_bufferlist(
        virp: *mut vir_T,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_bufferlist(fp: *mut FILE);
}
extern "C" {
    pub fn bt_normal(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_quickfix(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_terminal(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_help(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_prompt(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_popup(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_nofile(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_dontwrite(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_dontwrite_msg(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_hide(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_spname(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn switch_to_win_for_buf(
        buf: *mut buf_T,
        save_curwinp: *mut *mut win_T,
        save_curtabp: *mut *mut tabpage_T,
        save_curbuf: *mut bufref_T,
    );
}
extern "C" {
    pub fn restore_win_for_buf(
        save_curwin: *mut win_T,
        save_curtab: *mut tabpage_T,
        save_curbuf: *mut bufref_T,
    );
}
extern "C" {
    pub fn find_win_for_buf(
        buf: *mut buf_T,
        wp: *mut *mut win_T,
        tp: *mut *mut tabpage_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_buflisted(on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buf_contents_changed(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wipe_buffer(buf: *mut buf_T, aucmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn change_warning(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn changed();
}
extern "C" {
    pub fn changed_internal();
}
extern "C" {
    pub fn f_listener_add(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn f_listener_flush(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn f_listener_remove(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn may_invoke_listeners(
        buf: *mut buf_T,
        lnum: linenr_T,
        lnume: linenr_T,
        added: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn invoke_listeners(buf: *mut buf_T);
}
extern "C" {
    pub fn changed_bytes(lnum: linenr_T, col: colnr_T);
}
extern "C" {
    pub fn inserted_bytes(lnum: linenr_T, col: colnr_T, added: ::std::os::raw::c_int);
}
extern "C" {
    pub fn appended_lines(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn appended_lines_mark(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn deleted_lines(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn deleted_lines_mark(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn changed_lines(
        lnum: linenr_T,
        col: colnr_T,
        lnume: linenr_T,
        xtra: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn changed_lines_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        lnume: linenr_T,
        xtra: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn unchanged(buf: *mut buf_T, ff: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_bytes(p: *mut char_u);
}
extern "C" {
    pub fn ins_bytes_len(p: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_char(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_char_bytes(buf: *mut char_u, charlen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_str(s: *mut char_u);
}
extern "C" {
    pub fn del_char(fixpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_chars(
        count: ::std::os::raw::c_long,
        fixpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_bytes(
        count: ::std::os::raw::c_long,
        fixpos_arg: ::std::os::raw::c_int,
        use_delcombine: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_line(
        dir: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        second_line_indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate_line(fixpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_lines(nlines: ::std::os::raw::c_long, undo: ::std::os::raw::c_int);
}
extern "C" {
    pub fn init_chartab() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_init_chartab(
        buf: *mut buf_T,
        global: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trans_characters(buf: *mut char_u, bufsize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn transstr(s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn str_foldcase(
        str_: *mut char_u,
        orglen: ::std::os::raw::c_int,
        buf: *mut char_u,
        buflen: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn transchar(c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn transchar_byte(c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn transchar_nonprint(buf: *mut char_u, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn transchar_hex(buf: *mut char_u, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn byte2cells(b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn char2cells(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strsize(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strnsize(s: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chartabsize(p: *mut char_u, col: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linetabsize(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linetabsize_col(
        startcol: ::std::os::raw::c_int,
        s: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_linetabsize(
        wp: *mut win_T,
        line: *mut char_u,
        len: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isIDc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordc_buf(c: ::std::os::raw::c_int, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordp(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordp_buf(p: *mut char_u, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isfilec(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isfilec_or_wc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isprintc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isprintc_strict(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lbr_chartabsize(
        line: *mut char_u,
        s: *mut ::std::os::raw::c_uchar,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lbr_chartabsize_adv(
        line: *mut char_u,
        s: *mut *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_lbr_chartabsize(
        wp: *mut win_T,
        line: *mut char_u,
        s: *mut char_u,
        col: colnr_T,
        headp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_win_border(wp: *mut win_T, vcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvcol(
        wp: *mut win_T,
        pos: *mut pos_T,
        start: *mut colnr_T,
        cursor: *mut colnr_T,
        end: *mut colnr_T,
    );
}
extern "C" {
    pub fn getvcol_nolist(posp: *mut pos_T) -> colnr_T;
}
extern "C" {
    pub fn getvvcol(
        wp: *mut win_T,
        pos: *mut pos_T,
        start: *mut colnr_T,
        cursor: *mut colnr_T,
        end: *mut colnr_T,
    );
}
extern "C" {
    pub fn getvcols(
        wp: *mut win_T,
        pos1: *mut pos_T,
        pos2: *mut pos_T,
        left: *mut colnr_T,
        right: *mut colnr_T,
    );
}
extern "C" {
    pub fn skipwhite(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn getwhitecols_curline() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwhitecols(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skipdigits(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skipbin(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiphex(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptobin(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptodigit(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptohex(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_isdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isxdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isbdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_islower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_toupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_tolower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skiptowhite(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptowhite_esc(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn getdigits(pp: *mut *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vim_isblankline(lbuf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_str2nr(
        start: *mut char_u,
        prep: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        nptr: *mut varnumber_T,
        unptr: *mut uvarnumber_T,
        maxlen: ::std::os::raw::c_int,
        strict: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hex2nr(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hexhex2nr(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rem_backslash(str_: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn backslash_halve(p: *mut char_u);
}
extern "C" {
    pub fn backslash_halve_save(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn ebcdic2ascii(buffer: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn has_watchexpr() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_debug(cmd: *mut char_u);
}
extern "C" {
    pub fn ex_debug(eap: *mut exarg_T);
}
extern "C" {
    pub fn dbg_check_breakpoint(eap: *mut exarg_T);
}
extern "C" {
    pub fn dbg_check_skipped(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_breakadd(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_debuggreedy(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_breakdel(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_breaklist(eap: *mut exarg_T);
}
extern "C" {
    pub fn dbg_find_breakpoint(
        file: ::std::os::raw::c_int,
        fname: *mut char_u,
        after: linenr_T,
    ) -> linenr_T;
}
extern "C" {
    pub fn has_profiling(
        file: ::std::os::raw::c_int,
        fname: *mut char_u,
        fp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbg_breakpoint(name: *mut char_u, lnum: linenr_T);
}
extern "C" {
    pub fn dict_alloc() -> *mut dict_T;
}
extern "C" {
    pub fn dict_alloc_id(id: alloc_id_T) -> *mut dict_T;
}
extern "C" {
    pub fn dict_alloc_lock(lock: ::std::os::raw::c_int) -> *mut dict_T;
}
extern "C" {
    pub fn rettv_dict_alloc(rettv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_dict_set(rettv: *mut typval_T, d: *mut dict_T);
}
extern "C" {
    pub fn dict_free_contents(d: *mut dict_T);
}
extern "C" {
    pub fn dict_unref(d: *mut dict_T);
}
extern "C" {
    pub fn dict_free_nonref(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_free_items(copyID: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dictitem_alloc(key: *mut char_u) -> *mut dictitem_T;
}
extern "C" {
    pub fn dictitem_remove(dict: *mut dict_T, item: *mut dictitem_T);
}
extern "C" {
    pub fn dictitem_free(item: *mut dictitem_T);
}
extern "C" {
    pub fn dict_copy(
        orig: *mut dict_T,
        deep: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> *mut dict_T;
}
extern "C" {
    pub fn dict_add(d: *mut dict_T, item: *mut dictitem_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_number(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        nr: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_special(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        nr: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_string(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        str_: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_string_len(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_list(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        list: *mut list_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_iterate_start(var: *mut typval_T, iter: *mut dict_iterator_T);
}
extern "C" {
    pub fn dict_iterate_next(
        iter: *mut dict_iterator_T,
        tv_result: *mut *mut typval_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn dict_add_dict(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        dict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_len(d: *mut dict_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dict_find(
        d: *mut dict_T,
        key: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn dict_get_string(
        d: *mut dict_T,
        key: *mut char_u,
        save: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn dict_get_number(d: *mut dict_T, key: *mut char_u) -> varnumber_T;
}
extern "C" {
    pub fn dict_get_number_check(d: *mut dict_T, key: *mut char_u) -> varnumber_T;
}
extern "C" {
    pub fn dict2string(
        tv: *mut typval_T,
        copyID: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn dict_get_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_extend(d1: *mut dict_T, d2: *mut dict_T, action: *mut char_u);
}
extern "C" {
    pub fn dict_lookup(hi: *mut hashitem_T) -> *mut dictitem_T;
}
extern "C" {
    pub fn dict_equal(
        d1: *mut dict_T,
        d2: *mut dict_T,
        ic: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_list(argvars: *mut typval_T, rettv: *mut typval_T, what: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dict_set_items_ro(di: *mut dict_T);
}
extern "C" {
    pub fn diff_buf_delete(buf: *mut buf_T);
}
extern "C" {
    pub fn diff_buf_adjust(win: *mut win_T);
}
extern "C" {
    pub fn diff_buf_add(buf: *mut buf_T);
}
extern "C" {
    pub fn diff_invalidate(buf: *mut buf_T);
}
extern "C" {
    pub fn diff_mark_adjust(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn diff_internal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_diffupdate(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_diffpatch(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_diffsplit(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_diffthis(eap: *mut exarg_T);
}
extern "C" {
    pub fn diff_win_options(wp: *mut win_T, addbuf: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_diffoff(eap: *mut exarg_T);
}
extern "C" {
    pub fn diff_clear(tp: *mut tabpage_T);
}
extern "C" {
    pub fn diff_check(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_check_fill(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_set_topline(fromwin: *mut win_T, towin: *mut win_T);
}
extern "C" {
    pub fn diffopt_changed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diffopt_horizontal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diffopt_hiddenoff() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_find_change(
        wp: *mut win_T,
        lnum: linenr_T,
        startp: *mut ::std::os::raw::c_int,
        endp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_infold(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nv_diffgetput(put: ::std::os::raw::c_int, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn ex_diffgetput(eap: *mut exarg_T);
}
extern "C" {
    pub fn diff_mode_buf(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_move_to(
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_get_corresponding_line(buf1: *mut buf_T, lnum1: linenr_T) -> linenr_T;
}
extern "C" {
    pub fn diff_lnum_win(lnum: linenr_T, wp: *mut win_T) -> linenr_T;
}
extern "C" {
    pub fn do_digraph(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_digraph_for_char(val_arg: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_digraph(cmdline: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdigraph(
        char1: ::std::os::raw::c_int,
        char2: ::std::os::raw::c_int,
        meta_char: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putdigraph(str_: *mut char_u);
}
extern "C" {
    pub fn listdigraphs(use_headers: ::std::os::raw::c_int);
}
extern "C" {
    pub fn keymap_init() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ex_loadkeymap(eap: *mut exarg_T);
}
extern "C" {
    pub fn keymap_clear(kmap: *mut garray_T);
}
extern "C" {
    pub fn state_edit_initialize(
        cmdchar: ::std::os::raw::c_int,
        startln: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_edit_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn state_edit_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn edit(
        cmdchar: ::std::os::raw::c_int,
        startln: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_need_undo_get() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_redraw(ready: ::std::os::raw::c_int);
}
extern "C" {
    pub fn edit_putchar(c: ::std::os::raw::c_int, highlight: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prompt_text() -> *mut char_u;
}
extern "C" {
    pub fn prompt_curpos_editable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_unputchar();
}
extern "C" {
    pub fn display_dollar(col: colnr_T);
}
extern "C" {
    pub fn change_indent(
        type_: ::std::os::raw::c_int,
        amount: ::std::os::raw::c_int,
        round: ::std::os::raw::c_int,
        replaced: ::std::os::raw::c_int,
        call_changed_bytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn truncate_spaces(line: *mut char_u);
}
extern "C" {
    pub fn backspace_until_column(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_literal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertchar(
        c: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        second_indent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn auto_format(trailblank: ::std::os::raw::c_int, prev_line: ::std::os::raw::c_int);
}
extern "C" {
    pub fn comp_textwidth(ff: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_arrow(end_insert_pos: *mut pos_T);
}
extern "C" {
    pub fn stop_arrow() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_last_insert(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_last_insert();
}
extern "C" {
    pub fn add_char2buf(c: ::std::os::raw::c_int, s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn beginline(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn oneright() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oneleft() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cursor_up(
        n: ::std::os::raw::c_long,
        upd_topline: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cursor_down(
        n: ::std::os::raw::c_long,
        upd_topline: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stuff_inserted(
        c: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        no_esc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_last_insert() -> *mut char_u;
}
extern "C" {
    pub fn get_last_insert_save() -> *mut char_u;
}
extern "C" {
    pub fn replace_push(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replace_push_mb(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hkmap(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bracketed_paste(
        mode: paste_mode_T,
        drop: ::std::os::raw::c_int,
        gap: *mut garray_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_scroll();
}
extern "C" {
    pub fn ins_horscroll();
}
extern "C" {
    pub fn ins_eol(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_copychar(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_nolist_virtcol() -> colnr_T;
}
extern "C" {
    pub fn can_cindent_get() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_apply_autocmds(event: event_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_init();
}
extern "C" {
    pub fn eval_clear();
}
extern "C" {
    pub fn set_internal_string_var(name: *mut char_u, value: *mut char_u);
}
extern "C" {
    pub fn var_redir_start(
        name: *mut char_u,
        append: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_redir_str(value: *mut char_u, value_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn var_redir_stop();
}
extern "C" {
    pub fn eval_charconvert(
        enc_from: *mut char_u,
        enc_to: *mut char_u,
        fname_from: *mut char_u,
        fname_to: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_printexpr(fname: *mut char_u, args: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_diff(origfile: *mut char_u, newfile: *mut char_u, outfile: *mut char_u);
}
extern "C" {
    pub fn eval_patch(origfile: *mut char_u, difffile: *mut char_u, outfile: *mut char_u);
}
extern "C" {
    pub fn eval_to_bool(
        arg: *mut char_u,
        error: *mut ::std::os::raw::c_int,
        nextcmd: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_expr_typval(
        expr: *mut typval_T,
        argv: *mut typval_T,
        argc: ::std::os::raw::c_int,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_expr_to_bool(
        expr: *mut typval_T,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_to_string_skip(
        arg: *mut char_u,
        nextcmd: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn skip_expr(pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_to_string(
        arg: *mut char_u,
        nextcmd: *mut *mut char_u,
        convert: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn eval_to_string_safe(
        arg: *mut char_u,
        nextcmd: *mut *mut char_u,
        use_sandbox: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn eval_to_number(expr: *mut char_u) -> varnumber_T;
}
extern "C" {
    pub fn prepare_vimvar(idx: ::std::os::raw::c_int, save_tv: *mut typval_T);
}
extern "C" {
    pub fn restore_vimvar(idx: ::std::os::raw::c_int, save_tv: *mut typval_T);
}
extern "C" {
    pub fn eval_spell_expr(badword: *mut char_u, expr: *mut char_u) -> *mut list_T;
}
extern "C" {
    pub fn get_spellword(list: *mut list_T, pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_expr(arg: *mut char_u, nextcmd: *mut *mut char_u) -> *mut typval_T;
}
extern "C" {
    pub fn call_vim_function(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_func_retnr(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
    ) -> varnumber_T;
}
extern "C" {
    pub fn call_func_retstr(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn call_func_retlist(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn eval_foldexpr(arg: *mut char_u, cp: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_let(eap: *mut exarg_T);
}
extern "C" {
    pub fn list_hashtable_vars(
        ht: *mut hashtab_T,
        prefix: *mut ::std::os::raw::c_char,
        empty: ::std::os::raw::c_int,
        first: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_lval(
        name: *mut char_u,
        rettv: *mut typval_T,
        lp: *mut lval_T,
        unlet: ::std::os::raw::c_int,
        skip: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        fne_flags: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn clear_lval(lp: *mut lval_T);
}
extern "C" {
    pub fn eval_for_line(
        arg: *mut char_u,
        errp: *mut ::std::os::raw::c_int,
        nextcmdp: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn next_for_item(
        fi_void: *mut ::std::os::raw::c_void,
        arg: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_for_info(fi_void: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn set_context_for_expression(xp: *mut expand_T, arg: *mut char_u, cmdidx: cmdidx_T);
}
extern "C" {
    pub fn ex_unlet(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_lockvar(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_unlet(name: *mut char_u, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_menutrans_vars();
}
extern "C" {
    pub fn get_user_var_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn eval0(
        arg: *mut char_u,
        rettv: *mut typval_T,
        nextcmd: *mut *mut char_u,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval1(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_option_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn partial_name(pt: *mut partial_T) -> *mut char_u;
}
extern "C" {
    pub fn partial_unref(pt: *mut partial_T);
}
extern "C" {
    pub fn tv_equal(
        tv1: *mut typval_T,
        tv2: *mut typval_T,
        ic: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_copyID() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn garbage_collect(testing: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_ht(
        ht: *mut hashtab_T,
        copyID: ::std::os::raw::c_int,
        list_stack: *mut *mut list_stack_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_list(
        l: *mut list_T,
        copyID: ::std::os::raw::c_int,
        ht_stack: *mut *mut ht_stack_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_item(
        tv: *mut typval_T,
        copyID: ::std::os::raw::c_int,
        ht_stack: *mut *mut ht_stack_T,
        list_stack: *mut *mut list_stack_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_string_core(
        tv: *mut typval_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
        copyID: ::std::os::raw::c_int,
        echo_style: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
        composite_val: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn echo_string(
        tv: *mut typval_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
        copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn tv2string(
        tv: *mut typval_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
        copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn string_quote(str_: *mut char_u, function: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn string2float(text: *mut char_u, value: *mut float_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var2fpos(
        varp: *mut typval_T,
        dollar_lnum: ::std::os::raw::c_int,
        fnum: *mut ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn list2fpos(
        arg: *mut typval_T,
        posp: *mut pos_T,
        fnump: *mut ::std::os::raw::c_int,
        curswantp: *mut colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_id_len(arg: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_name_len(
        arg: *mut *mut char_u,
        alias: *mut *mut char_u,
        evaluate: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_name_end(
        arg: *mut char_u,
        expr_start: *mut *mut char_u,
        expr_end: *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn eval_isnamec(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_isnamec1(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_vim_var_nr(idx: ::std::os::raw::c_int, val: varnumber_T);
}
extern "C" {
    pub fn get_vim_var_nr(idx: ::std::os::raw::c_int) -> varnumber_T;
}
extern "C" {
    pub fn get_vim_var_str(idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_vim_var_list(idx: ::std::os::raw::c_int) -> *mut list_T;
}
extern "C" {
    pub fn get_vim_var_dict(idx: ::std::os::raw::c_int) -> *mut dict_T;
}
extern "C" {
    pub fn set_vim_var_char(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_vcount(
        count: ::std::os::raw::c_long,
        count1: ::std::os::raw::c_long,
        set_prevcount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn save_vimvars(vvsave: *mut vimvars_save_T);
}
extern "C" {
    pub fn restore_vimvars(vvsave: *mut vimvars_save_T);
}
extern "C" {
    pub fn set_vim_var_string(
        idx: ::std::os::raw::c_int,
        val: *mut char_u,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_vim_var_list(idx: ::std::os::raw::c_int, val: *mut list_T);
}
extern "C" {
    pub fn set_vim_var_dict(idx: ::std::os::raw::c_int, val: *mut dict_T);
}
extern "C" {
    pub fn set_reg_var(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn v_exception(oldval: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn v_throwpoint(oldval: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn set_cmdarg(eap: *mut exarg_T, oldarg: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_var_tv(
        name: *mut char_u,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        dip: *mut *mut dictitem_T,
        verbose: ::std::os::raw::c_int,
        no_autoload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_subscript(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloc_tv() -> *mut typval_T;
}
extern "C" {
    pub fn free_tv(varp: *mut typval_T);
}
extern "C" {
    pub fn clear_tv(varp: *mut typval_T);
}
extern "C" {
    pub fn init_tv(varp: *mut typval_T);
}
extern "C" {
    pub fn tv_get_number(varp: *mut typval_T) -> varnumber_T;
}
extern "C" {
    pub fn tv_get_number_chk(
        varp: *mut typval_T,
        denote: *mut ::std::os::raw::c_int,
    ) -> varnumber_T;
}
extern "C" {
    pub fn tv_get_float(varp: *mut typval_T) -> float_T;
}
extern "C" {
    pub fn tv_get_string(varp: *mut typval_T) -> *mut char_u;
}
extern "C" {
    pub fn tv_get_string_buf(varp: *mut typval_T, buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn tv_get_string_chk(varp: *mut typval_T) -> *mut char_u;
}
extern "C" {
    pub fn tv_get_string_buf_chk(varp: *mut typval_T, buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn tv_stringify(varp: *mut typval_T, buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn find_var(
        name: *mut char_u,
        htp: *mut *mut hashtab_T,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn find_var_in_ht(
        ht: *mut hashtab_T,
        htname: ::std::os::raw::c_int,
        varname: *mut char_u,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn find_var_ht(name: *mut char_u, varname: *mut *mut char_u) -> *mut hashtab_T;
}
extern "C" {
    pub fn get_var_value(name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn new_script_vars(id: scid_T);
}
extern "C" {
    pub fn init_var_dict(
        dict: *mut dict_T,
        dict_var: *mut dictitem_T,
        scope: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn unref_var_dict(dict: *mut dict_T);
}
extern "C" {
    pub fn vars_clear(ht: *mut hashtab_T);
}
extern "C" {
    pub fn vars_clear_ext(ht: *mut hashtab_T, free_val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_var(name: *mut char_u, tv: *mut typval_T, copy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn var_check_ro(
        flags: ::std::os::raw::c_int,
        name: *mut char_u,
        use_gettext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_check_fixed(
        flags: ::std::os::raw::c_int,
        name: *mut char_u,
        use_gettext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_check_func_name(
        name: *mut char_u,
        new_var: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_check_lock(
        lock: ::std::os::raw::c_int,
        name: *mut char_u,
        use_gettext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valid_varname(varname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_tv(from: *mut typval_T, to: *mut typval_T);
}
extern "C" {
    pub fn item_copy(
        from: *mut typval_T,
        to: *mut typval_T,
        deep: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_user_input(
        argvars: *mut typval_T,
        rettv: *mut typval_T,
        inputdialog: ::std::os::raw::c_int,
        secret: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ex_echo(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_echohl(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_execute(eap: *mut exarg_T);
}
extern "C" {
    pub fn find_win_by_nr(vp: *mut typval_T, tp: *mut tabpage_T) -> *mut win_T;
}
extern "C" {
    pub fn find_win_by_nr_or_id(vp: *mut typval_T) -> *mut win_T;
}
extern "C" {
    pub fn find_tabwin(
        wvp: *mut typval_T,
        tvp: *mut typval_T,
        ptp: *mut *mut tabpage_T,
    ) -> *mut win_T;
}
extern "C" {
    pub fn getwinvar(argvars: *mut typval_T, rettv: *mut typval_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setwinvar(argvars: *mut typval_T, rettv: *mut typval_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn autoload_name(name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn script_autoload(
        name: *mut char_u,
        reload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_viminfo_varlist(
        virp: *mut vir_T,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_varlist(fp: *mut FILE);
}
extern "C" {
    pub fn store_session_globals(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn last_set_msg(script_ctx: sctx_T);
}
extern "C" {
    pub fn reset_v_option_vars();
}
extern "C" {
    pub fn prepare_assert_error(gap: *mut garray_T);
}
extern "C" {
    pub fn assert_error(gap: *mut garray_T);
}
extern "C" {
    pub fn assert_equal_common(
        argvars: *mut typval_T,
        atype: assert_type_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_equalfile(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_match_common(
        argvars: *mut typval_T,
        atype: assert_type_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_inrange(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_bool(
        argvars: *mut typval_T,
        isTrue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_report(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_exception(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_beeps(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_fails(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fill_assert_error(
        gap: *mut garray_T,
        opt_msg_tv: *mut typval_T,
        exp_str: *mut char_u,
        exp_tv: *mut typval_T,
        got_tv: *mut typval_T,
        atype: assert_type_T,
    );
}
extern "C" {
    pub fn typval_compare(
        typ1: *mut typval_T,
        typ2: *mut typval_T,
        type_: exptype_T,
        type_is: ::std::os::raw::c_int,
        ic: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typval_tostring(arg: *mut typval_T) -> *mut char_u;
}
extern "C" {
    pub fn var_exists(var: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modify_fname(
        src: *mut char_u,
        tilde_file: ::std::os::raw::c_int,
        usedlen: *mut ::std::os::raw::c_int,
        fnamep: *mut *mut char_u,
        bufp: *mut *mut char_u,
        fnamelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_string_sub(
        str_: *mut char_u,
        pat: *mut char_u,
        sub: *mut char_u,
        expr: *mut typval_T,
        flags: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn filter_map(argvars: *mut typval_T, rettv: *mut typval_T, map: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_function_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_expr_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn find_internal_func(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_internal_func(
        name: *mut char_u,
        argcount: ::std::os::raw::c_int,
        argvars: *mut typval_T,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_find_by_name(
        name: *mut char_u,
        curtab_only: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn tv_get_buf(tv: *mut typval_T, curtab_only: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn get_buf_arg(arg: *mut typval_T) -> *mut buf_T;
}
extern "C" {
    pub fn execute_redir_str(value: *mut char_u, value_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mzscheme_call_vim(name: *mut char_u, args: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn vim_round(f: float_T) -> float_T;
}
extern "C" {
    pub fn do_searchpair(
        spat: *mut char_u,
        mpat: *mut char_u,
        epat: *mut char_u,
        dir: ::std::os::raw::c_int,
        skip: *mut typval_T,
        flags: ::std::os::raw::c_int,
        match_pos: *mut pos_T,
        lnum_stop: linenr_T,
        time_limit: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn f_string(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn get_callback(arg: *mut typval_T) -> callback_T;
}
extern "C" {
    pub fn put_callback(cb: *mut callback_T, tv: *mut typval_T);
}
extern "C" {
    pub fn set_callback(dest: *mut callback_T, src: *mut callback_T);
}
extern "C" {
    pub fn free_callback(callback: *mut callback_T);
}
extern "C" {
    pub fn do_ascii(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_align(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_sort(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_retab(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_move(line1: linenr_T, line2: linenr_T, dest: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_copy(line1: linenr_T, line2: linenr_T, n: linenr_T);
}
extern "C" {
    pub fn free_prev_shellcmd();
}
extern "C" {
    pub fn do_bang(
        addr_count: ::std::os::raw::c_int,
        eap: *mut exarg_T,
        forceit: ::std::os::raw::c_int,
        do_in: ::std::os::raw::c_int,
        do_out: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn do_shell(cmd: *mut char_u, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn make_filter_cmd(cmd: *mut char_u, itmp: *mut char_u, otmp: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn append_redir(
        buf: *mut char_u,
        buflen: ::std::os::raw::c_int,
        opt: *mut char_u,
        fname: *mut char_u,
    );
}
extern "C" {
    pub fn viminfo_error(
        errnum: *mut ::std::os::raw::c_char,
        message: *mut ::std::os::raw::c_char,
        line: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_viminfo(file: *mut char_u, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo(file: *mut char_u, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn viminfo_readline(virp: *mut vir_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn viminfo_readstring(
        virp: *mut vir_T,
        off: ::std::os::raw::c_int,
        convert: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn viminfo_writestring(fd: *mut FILE, p: *mut char_u);
}
extern "C" {
    pub fn barline_writestring(
        fd: *mut FILE,
        s: *mut char_u,
        remaining_start: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_time() -> time_T;
}
extern "C" {
    pub fn do_fixdel(eap: *mut exarg_T);
}
extern "C" {
    pub fn print_line_no_prefix(
        lnum: linenr_T,
        use_number: ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn print_line(
        lnum: linenr_T,
        use_number: ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rename_buffer(new_fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_file(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_update(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_write(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_write(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_overwrite(
        eap: *mut exarg_T,
        buf: *mut buf_T,
        fname: *mut char_u,
        ffname: *mut char_u,
        other: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_wnext(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_wqall(eap: *mut exarg_T);
}
extern "C" {
    pub fn not_writing() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfile(
        fnum: ::std::os::raw::c_int,
        ffname_arg: *mut char_u,
        sfname_arg: *mut char_u,
        setpm: ::std::os::raw::c_int,
        lnum: linenr_T,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_ecmd(
        fnum: ::std::os::raw::c_int,
        ffname: *mut char_u,
        sfname: *mut char_u,
        eap: *mut exarg_T,
        newlnum: linenr_T,
        flags: ::std::os::raw::c_int,
        oldwin: *mut win_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_append(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_change(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_z(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_restricted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_secure() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_sub(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_sub_msg(count_only: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_global(eap: *mut exarg_T);
}
extern "C" {
    pub fn global_exe(cmd: *mut char_u);
}
extern "C" {
    pub fn read_viminfo_sub_string(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_sub_string(fp: *mut FILE);
}
extern "C" {
    pub fn free_old_sub();
}
extern "C" {
    pub fn prepare_tagpreview(undo_sync: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_help(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_helpclose(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_help_lang(arg: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn help_heuristic(
        matched_string: *mut char_u,
        offset: ::std::os::raw::c_int,
        wrong_case: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_help_tags(
        arg: *mut char_u,
        num_matches: *mut ::std::os::raw::c_int,
        matches: *mut *mut *mut char_u,
        keep_lang: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fix_help_buffer();
}
extern "C" {
    pub fn ex_exusage(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_viusage(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_helptags(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_drop(eap: *mut exarg_T);
}
extern "C" {
    pub fn skip_vimgrep_pat(
        p: *mut char_u,
        s: *mut *mut char_u,
        flags: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ex_oldfiles(eap: *mut exarg_T);
}
extern "C" {
    pub fn profile_start(tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_end(tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_sub(tm: *mut proftime_T, tm2: *mut proftime_T);
}
extern "C" {
    pub fn profile_msg(tm: *mut proftime_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn profile_float(tm: *mut proftime_T) -> float_T;
}
extern "C" {
    pub fn profile_setlimit(msec: ::std::os::raw::c_long, tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_passed_limit(tm: *mut proftime_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profile_zero(tm: *mut proftime_T);
}
extern "C" {
    pub fn proftime_time_left(due: *mut proftime_T, now: *mut proftime_T)
        -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn create_timer(
        msec: ::std::os::raw::c_long,
        repeat: ::std::os::raw::c_int,
    ) -> *mut timer_T;
}
extern "C" {
    pub fn check_due_timer() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn find_timer(id: ::std::os::raw::c_long) -> *mut timer_T;
}
extern "C" {
    pub fn stop_timer(timer: *mut timer_T);
}
extern "C" {
    pub fn stop_all_timers();
}
extern "C" {
    pub fn add_timer_info(rettv: *mut typval_T, timer: *mut timer_T);
}
extern "C" {
    pub fn add_timer_info_all(rettv: *mut typval_T);
}
extern "C" {
    pub fn set_ref_in_timer(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_free_all();
}
extern "C" {
    pub fn profile_divide(tm: *mut proftime_T, count: ::std::os::raw::c_int, tm2: *mut proftime_T);
}
extern "C" {
    pub fn profile_add(tm: *mut proftime_T, tm2: *mut proftime_T);
}
extern "C" {
    pub fn profile_self(self_: *mut proftime_T, total: *mut proftime_T, children: *mut proftime_T);
}
extern "C" {
    pub fn profile_get_wait(tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_sub_wait(tm: *mut proftime_T, tma: *mut proftime_T);
}
extern "C" {
    pub fn profile_equal(tm1: *mut proftime_T, tm2: *mut proftime_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profile_cmp(tm1: *const proftime_T, tm2: *const proftime_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_profile(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_profile_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_profile_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn profile_dump();
}
extern "C" {
    pub fn script_prof_save(tm: *mut proftime_T);
}
extern "C" {
    pub fn script_prof_restore(tm: *mut proftime_T);
}
extern "C" {
    pub fn prof_inchar_enter();
}
extern "C" {
    pub fn prof_inchar_exit();
}
extern "C" {
    pub fn prof_def_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autowrite(buf: *mut buf_T, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autowrite_all();
}
extern "C" {
    pub fn check_changed(buf: *mut buf_T, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn browse_save_fname(buf: *mut buf_T);
}
extern "C" {
    pub fn dialog_changed(buf: *mut buf_T, checkall: ::std::os::raw::c_int);
}
extern "C" {
    pub fn can_abandon(buf: *mut buf_T, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_changed_any(
        hidden: ::std::os::raw::c_int,
        unload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_fname() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_write_all(buf: *mut buf_T, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_arglist_exp(
        str_: *mut char_u,
        fcountp: *mut ::std::os::raw::c_int,
        fnamesp: *mut *mut *mut char_u,
        wig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_arglist(str_: *mut char_u);
}
extern "C" {
    pub fn check_arg_idx(win: *mut win_T);
}
extern "C" {
    pub fn ex_args(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_previous(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_rewind(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_last(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argument(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_argfile(eap: *mut exarg_T, argn: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_next(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argedit(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argadd(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argdelete(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_listdo(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_arglist_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn ex_compiler(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_runtime(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_in_path(
        path: *mut char_u,
        name: *mut char_u,
        flags: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(fname: *mut char_u, ck: *mut ::std::os::raw::c_void),
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_in_runtimepath(
        name: *mut char_u,
        flags: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(fname: *mut char_u, ck: *mut ::std::os::raw::c_void),
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn source_runtime(name: *mut char_u, flags: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn source_in_path(
        path: *mut char_u,
        name: *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_pack_start_dirs();
}
extern "C" {
    pub fn load_start_packages();
}
extern "C" {
    pub fn ex_packloadall(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_packadd(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_options(eap: *mut exarg_T);
}
extern "C" {
    pub fn init_pyxversion();
}
extern "C" {
    pub fn ex_pyxfile(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_pyx(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_pyxdo(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_source(eap: *mut exarg_T);
}
extern "C" {
    pub fn source_breakpoint(cookie: *mut ::std::os::raw::c_void) -> *mut linenr_T;
}
extern "C" {
    pub fn source_dbg_tick(cookie: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn source_level(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_source(
        fname: *mut char_u,
        check_other: ::std::os::raw::c_int,
        is_vimrc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_scriptnames(eap: *mut exarg_T);
}
extern "C" {
    pub fn scriptnames_slash_adjust();
}
extern "C" {
    pub fn get_scriptname(id: scid_T) -> *mut char_u;
}
extern "C" {
    pub fn free_scriptnames();
}
extern "C" {
    pub fn getsourceline(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn script_line_start();
}
extern "C" {
    pub fn script_line_exec();
}
extern "C" {
    pub fn script_line_end();
}
extern "C" {
    pub fn ex_scriptencoding(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_scriptversion(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_finish(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_finish(eap: *mut exarg_T, reanimate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn source_finished(
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_checktime(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_mess_lang() -> *mut char_u;
}
extern "C" {
    pub fn set_lang_var();
}
extern "C" {
    pub fn ex_language(eap: *mut exarg_T);
}
extern "C" {
    pub fn free_locales();
}
extern "C" {
    pub fn get_lang_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_locales(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn do_exmode(improved: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_cmdline_cmd(cmd: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_cmdline(
        cmdline: *mut char_u,
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getline_equal(
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getline_cookie(
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn parse_command_modifiers(
        eap: *mut exarg_T,
        errormsg: *mut *mut ::std::os::raw::c_char,
        skip_only: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_cmd_address(
        eap: *mut exarg_T,
        errormsg: *mut *mut ::std::os::raw::c_char,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn checkforcmd(
        pp: *mut *mut char_u,
        cmd: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modifier_len(cmd: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_exists(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_one_cmd_context(xp: *mut expand_T, buff: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skip_range(cmd: *mut char_u, ctx: *mut ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn ex_ni(eap: *mut exarg_T);
}
extern "C" {
    pub fn expand_filename(
        eap: *mut exarg_T,
        cmdlinep: *mut *mut char_u,
        errormsgp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn separate_nextcmd(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_bad_opt(p: *mut char_u, eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ends_excmd(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_nextcmd(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn check_nextcmd(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_command_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn not_exiting();
}
extern "C" {
    pub fn tabpage_close(forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tabpage_close_other(tp: *mut tabpage_T, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_all(eap: *mut exarg_T);
}
extern "C" {
    pub fn handle_drop(
        filec: ::std::os::raw::c_int,
        filev: *mut *mut char_u,
        split: ::std::os::raw::c_int,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        cookie: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn handle_any_postponed_drop();
}
extern "C" {
    pub fn alist_clear(al: *mut alist_T);
}
extern "C" {
    pub fn alist_init(al: *mut alist_T);
}
extern "C" {
    pub fn alist_unlink(al: *mut alist_T);
}
extern "C" {
    pub fn alist_new();
}
extern "C" {
    pub fn alist_expand(fnum_list: *mut ::std::os::raw::c_int, fnum_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alist_set(
        al: *mut alist_T,
        count: ::std::os::raw::c_int,
        files: *mut *mut char_u,
        use_curbuf: ::std::os::raw::c_int,
        fnum_list: *mut ::std::os::raw::c_int,
        fnum_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alist_add(al: *mut alist_T, fname: *mut char_u, set_fnum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alist_slash_adjust();
}
extern "C" {
    pub fn ex_splitview(eap: *mut exarg_T);
}
extern "C" {
    pub fn tabpage_new();
}
extern "C" {
    pub fn do_exedit(eap: *mut exarg_T, old_curwin: *mut win_T);
}
extern "C" {
    pub fn free_cd_dir();
}
extern "C" {
    pub fn post_chdir(cdscope: cdscope_T);
}
extern "C" {
    pub fn changedir_func(
        new_dir: *mut char_u,
        forceit: ::std::os::raw::c_int,
        cdscope: cdscope_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_cd(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_sleep(msec: ::std::os::raw::c_long);
}
extern "C" {
    pub fn ex_may_print(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_redraw(eap: *mut exarg_T);
}
extern "C" {
    pub fn vim_mkdir_emsg(name: *mut char_u, prot: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_exfile(
        fname: *mut char_u,
        forceit: ::std::os::raw::c_int,
        mode: *mut ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn update_topline_cursor();
}
extern "C" {
    pub fn save_current_state(sst: *mut save_state_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_current_state(sst: *mut save_state_T);
}
extern "C" {
    pub fn ex_normal(eap: *mut exarg_T);
}
extern "C" {
    pub fn exec_normal(
        was_typed: ::std::os::raw::c_int,
        use_vpeekc: ::std::os::raw::c_int,
        may_use_terminal_loop: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn find_cmdline_var(
        src: *mut char_u,
        usedlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_vars(
        src: *mut char_u,
        srcstart: *mut char_u,
        usedlen: *mut ::std::os::raw::c_int,
        lnump: *mut linenr_T,
        errormsg: *mut *mut ::std::os::raw::c_char,
        escaped: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn expand_sfile(arg: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn put_eol(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_line(fd: *mut FILE, s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dialog_msg(buff: *mut char_u, format: *mut ::std::os::raw::c_char, fname: *mut char_u);
}
extern "C" {
    pub fn get_behave_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_messages_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_mapclear_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_no_hlsearch(flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn is_loclist_cmd(cmdidx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_pressedreturn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_pressedreturn(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn aborting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn update_force_abort();
}
extern "C" {
    pub fn should_abort(retcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aborted_in_try() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cause_errthrow(
        mesg: *mut char_u,
        severe: ::std::os::raw::c_int,
        ignore: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_global_msglist();
}
extern "C" {
    pub fn do_errthrow(cstack: *mut condstack, cmdname: *mut char_u);
}
extern "C" {
    pub fn do_intthrow(cstack: *mut condstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_exception_string(
        value: *mut ::std::os::raw::c_void,
        type_: except_type_T,
        cmdname: *mut char_u,
        should_free: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn discard_current_exception();
}
extern "C" {
    pub fn report_make_pending(pending: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn report_resume_pending(
        pending: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn report_discard_pending(
        pending: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ex_if(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_endif(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_else(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_while(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_continue(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_break(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_endwhile(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_throw(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_throw(cstack: *mut condstack);
}
extern "C" {
    pub fn ex_try(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_catch(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_finally(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_endtry(eap: *mut exarg_T);
}
extern "C" {
    pub fn enter_cleanup(csp: *mut cleanup_T);
}
extern "C" {
    pub fn leave_cleanup(csp: *mut cleanup_T);
}
extern "C" {
    pub fn cleanup_conditionals(
        cstack: *mut condstack,
        searched_cond: ::std::os::raw::c_int,
        inclusive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind_conditionals(
        cstack: *mut condstack,
        idx: ::std::os::raw::c_int,
        cond_type: ::std::os::raw::c_int,
        cond_level: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ex_endfunction(eap: *mut exarg_T);
}
extern "C" {
    pub fn has_loop_cmd(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn state_cmdline_initialize(
        c: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        indent: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_cmdline_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_cmdline_cleanup(context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cmdline_init();
}
extern "C" {
    pub fn getcmdline(
        firstc: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn getcmdline_prompt(
        firstc: ::std::os::raw::c_int,
        prompt: *mut char_u,
        attr: ::std::os::raw::c_int,
        xp_context: ::std::os::raw::c_int,
        xp_arg: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn text_locked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn text_locked_msg();
}
extern "C" {
    pub fn get_text_locked_msg() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curbuf_locked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn allbuf_locked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getexline(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn getexmodeline(
        promptc: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn cmdline_overstrike() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_at_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_getvcol_cursor() -> colnr_T;
}
extern "C" {
    pub fn free_cmdline_buf();
}
extern "C" {
    pub fn putcmdline(c: ::std::os::raw::c_int, shift: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unputcmdline();
}
extern "C" {
    pub fn put_on_cmdline(
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
        redraw: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_paste_str(s: *mut char_u, literally: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redrawcmdline();
}
extern "C" {
    pub fn redrawcmdline_ex(do_compute_cmdrow: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redrawcmd();
}
extern "C" {
    pub fn compute_cmdrow();
}
extern "C" {
    pub fn gotocmdline(clr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ExpandOne(
        xp: *mut expand_T,
        str_: *mut char_u,
        orig: *mut char_u,
        options: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ExpandInit(xp: *mut expand_T);
}
extern "C" {
    pub fn ExpandCleanup(xp: *mut expand_T);
}
extern "C" {
    pub fn ExpandEscape(
        xp: *mut expand_T,
        str_: *mut char_u,
        numfiles: ::std::os::raw::c_int,
        files: *mut *mut char_u,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vim_strsave_fnameescape(fname: *mut char_u, shell: ::std::os::raw::c_int)
        -> *mut char_u;
}
extern "C" {
    pub fn tilde_replace(
        orig_pat: *mut char_u,
        num_files: ::std::os::raw::c_int,
        files: *mut *mut char_u,
    );
}
extern "C" {
    pub fn sm_gettail(s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn addstar(
        fname: *mut char_u,
        len: ::std::os::raw::c_int,
        context: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn set_cmd_context(
        xp: *mut expand_T,
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        use_ccline: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn expand_cmdline(
        xp: *mut expand_T,
        str_: *mut char_u,
        col: ::std::os::raw::c_int,
        matchcount: *mut ::std::os::raw::c_int,
        matches: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ExpandGeneric(
        xp: *mut expand_T,
        regmatch: *mut regmatch_T,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut expand_T, arg2: ::std::os::raw::c_int) -> *mut char_u,
        >,
        escaped: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn globpath(
        path: *mut char_u,
        file: *mut char_u,
        ga: *mut garray_T,
        expand_options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn init_history();
}
extern "C" {
    pub fn get_histtype(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_to_history(
        histype: ::std::os::raw::c_int,
        new_entry: *mut char_u,
        in_map: ::std::os::raw::c_int,
        sep: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_history_idx(histype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_history_entry(
        histype: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn clr_history(histype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_history_entry(
        histype: ::std::os::raw::c_int,
        str_: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_history_idx(
        histype: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_cmdline_str() -> *mut char_u;
}
extern "C" {
    pub fn get_cmdline_pos() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_cmdline_pos(pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_cmdline_type() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_list_range(
        str_: *mut *mut char_u,
        num1: *mut ::std::os::raw::c_int,
        num2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_history(eap: *mut exarg_T);
}
extern "C" {
    pub fn prepare_viminfo_history(asklen: ::std::os::raw::c_int, writing: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_viminfo_history(
        virp: *mut vir_T,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_viminfo_history(values: *mut garray_T, writing: ::std::os::raw::c_int);
}
extern "C" {
    pub fn finish_viminfo_history(virp: *mut vir_T);
}
extern "C" {
    pub fn write_viminfo_history(fp: *mut FILE, merge: ::std::os::raw::c_int);
}
extern "C" {
    pub fn script_get(eap: *mut exarg_T, cmd: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn filemess(
        buf: *mut buf_T,
        name: *mut char_u,
        s: *mut char_u,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn readfile(
        fname: *mut char_u,
        sfname: *mut char_u,
        from: linenr_T,
        lines_to_skip: linenr_T,
        lines_to_read: linenr_T,
        eap: *mut exarg_T,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_dev_fd_file(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prep_exarg(eap: *mut exarg_T, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_file_options(set_options: ::std::os::raw::c_int, eap: *mut exarg_T);
}
extern "C" {
    pub fn set_forced_fenc(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_file_readonly(
        fname: *mut char_u,
        perm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_write(
        buf: *mut buf_T,
        fname: *mut char_u,
        sfname: *mut char_u,
        start: linenr_T,
        end: linenr_T,
        eap: *mut exarg_T,
        append: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        reset_changed: ::std::os::raw::c_int,
        filtering: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_fsync(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_add_fname(buf: *mut buf_T, fname: *mut char_u);
}
extern "C" {
    pub fn msg_add_lines(
        insert_space: ::std::os::raw::c_int,
        lnum: ::std::os::raw::c_long,
        nchars: off_T,
    );
}
extern "C" {
    pub fn shorten_fname1(full_path: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn shorten_fname(full_path: *mut char_u, dir_name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn shorten_buf_fname(buf: *mut buf_T, dirname: *mut char_u, force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn shorten_fnames(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn shorten_filenames(fnames: *mut *mut char_u, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn modname(
        fname: *mut char_u,
        ext: *mut char_u,
        prepend_dot: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn buf_modname(
        shortname: ::std::os::raw::c_int,
        fname: *mut char_u,
        ext: *mut char_u,
        prepend_dot: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_fgets(
        buf: *mut char_u,
        size: ::std::os::raw::c_int,
        fp: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_rename(from: *mut char_u, to: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_timestamps(focus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_check_timestamp(
        buf: *mut buf_T,
        focus: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_reload(buf: *mut buf_T, orig_mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buf_store_time(buf: *mut buf_T, st: *mut stat_T, fname: *mut char_u);
}
extern "C" {
    pub fn write_lnum_adjust(offset: linenr_T);
}
extern "C" {
    pub fn readdir_core(
        gap: *mut garray_T,
        path: *mut char_u,
        context: *mut ::std::os::raw::c_void,
        checkitem: ::std::option::Option<
            unsafe extern "C" fn(
                context: *mut ::std::os::raw::c_void,
                name: *mut char_u,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delete_recursive(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_deltempdir();
}
extern "C" {
    pub fn vim_tempname(
        extra_char: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn forward_slash(fname: *mut char_u);
}
extern "C" {
    pub fn match_file_pat(
        pattern: *mut char_u,
        prog: *mut *mut regprog_T,
        fname: *mut char_u,
        sfname: *mut char_u,
        tail: *mut char_u,
        allow_dirs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_file_list(
        list: *mut char_u,
        sfname: *mut char_u,
        ffname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_pat_to_reg_pat(
        pat: *mut char_u,
        pat_end: *mut char_u,
        allow_dirs: *mut ::std::os::raw::c_char,
        no_bslash: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn read_eintr(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        bufsize: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn write_eintr(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        bufsize: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vim_findfile_init(
        path: *mut char_u,
        filename: *mut char_u,
        stopdirs: *mut char_u,
        level: ::std::os::raw::c_int,
        free_visited: ::std::os::raw::c_int,
        find_what: ::std::os::raw::c_int,
        search_ctx_arg: *mut ::std::os::raw::c_void,
        tagfile: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vim_findfile_stopdir(buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_findfile_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vim_findfile(search_ctx_arg: *mut ::std::os::raw::c_void) -> *mut char_u;
}
extern "C" {
    pub fn vim_findfile_free_visited(search_ctx_arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn find_file_in_path(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        first: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn free_findfile();
}
extern "C" {
    pub fn find_directory_in_path(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn find_file_in_path_option(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        first: ::std::os::raw::c_int,
        path_option: *mut char_u,
        find_what: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
        suffixes: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn grab_file_name(count: ::std::os::raw::c_long, file_lnum: *mut linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn file_name_at_cursor(
        options: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        file_lnum: *mut linenr_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn file_name_in_line(
        line: *mut char_u,
        col: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        rel_fname: *mut char_u,
        file_lnum: *mut linenr_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn find_file_name_in_path(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        rel_fname: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_ispathlistsep(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uniquefy_paths(gap: *mut garray_T, pattern: *mut char_u);
}
extern "C" {
    pub fn expand_in_path(
        gap: *mut garray_T,
        pattern: *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simplify_filename(filename: *mut char_u);
}
extern "C" {
    pub fn copyFoldingState(wp_from: *mut win_T, wp_to: *mut win_T);
}
extern "C" {
    pub fn hasAnyFolding(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hasFolding(
        lnum: linenr_T,
        firstp: *mut linenr_T,
        lastp: *mut linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hasFoldingWin(
        win: *mut win_T,
        lnum: linenr_T,
        firstp: *mut linenr_T,
        lastp: *mut linenr_T,
        cache: ::std::os::raw::c_int,
        infop: *mut foldinfo_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldLevel(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lineFolded(win: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldedCount(
        win: *mut win_T,
        lnum: linenr_T,
        infop: *mut foldinfo_T,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn foldmethodIsManual(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsIndent(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsExpr(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsMarker(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsSyntax(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsDiff(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closeFold(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn closeFoldRecurse(lnum: linenr_T);
}
extern "C" {
    pub fn opFoldRange(
        first: linenr_T,
        last: linenr_T,
        opening: ::std::os::raw::c_int,
        recurse: ::std::os::raw::c_int,
        had_visual: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn openFold(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn openFoldRecurse(lnum: linenr_T);
}
extern "C" {
    pub fn foldOpenCursor();
}
extern "C" {
    pub fn newFoldLevel();
}
extern "C" {
    pub fn foldCheckClose();
}
extern "C" {
    pub fn foldManualAllowed(create: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldCreate(start: linenr_T, end: linenr_T);
}
extern "C" {
    pub fn deleteFold(
        start: linenr_T,
        end: linenr_T,
        recursive: ::std::os::raw::c_int,
        had_visual: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clearFolding(win: *mut win_T);
}
extern "C" {
    pub fn foldUpdate(wp: *mut win_T, top: linenr_T, bot: linenr_T);
}
extern "C" {
    pub fn foldUpdateAll(win: *mut win_T);
}
extern "C" {
    pub fn foldMoveTo(
        updown: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldInitWin(new_win: *mut win_T);
}
extern "C" {
    pub fn find_wl_entry(win: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldAdjustVisual();
}
extern "C" {
    pub fn foldAdjustCursor();
}
extern "C" {
    pub fn cloneFoldGrowArray(from: *mut garray_T, to: *mut garray_T);
}
extern "C" {
    pub fn deleteFoldRecurse(gap: *mut garray_T);
}
extern "C" {
    pub fn foldMarkAdjust(
        wp: *mut win_T,
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn getDeepestNesting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_foldtext(
        wp: *mut win_T,
        lnum: linenr_T,
        lnume: linenr_T,
        foldinfo: *mut foldinfo_T,
        buf: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn foldtext_cleanup(str_: *mut char_u);
}
extern "C" {
    pub fn foldMoveRange(gap: *mut garray_T, line1: linenr_T, line2: linenr_T, dest: linenr_T);
}
extern "C" {
    pub fn put_folds(fd: *mut FILE, wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_buff(buf: *mut buffheader_T);
}
extern "C" {
    pub fn get_recorded() -> *mut char_u;
}
extern "C" {
    pub fn get_inserted() -> *mut char_u;
}
extern "C" {
    pub fn stuff_empty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readbuf1_empty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead_noflush(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn flush_buffers(flush_typeahead: flush_buffers_T);
}
extern "C" {
    pub fn ResetRedobuff();
}
extern "C" {
    pub fn CancelRedo();
}
extern "C" {
    pub fn saveRedobuff(save_redo: *mut save_redo_T);
}
extern "C" {
    pub fn restoreRedobuff(save_redo: *mut save_redo_T);
}
extern "C" {
    pub fn AppendToRedobuff(s: *mut char_u);
}
extern "C" {
    pub fn AppendToRedobuffLit(str_: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AppendCharToRedobuff(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AppendNumberToRedobuff(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn stuffReadbuff(s: *mut char_u);
}
extern "C" {
    pub fn stuffRedoReadbuff(s: *mut char_u);
}
extern "C" {
    pub fn stuffReadbuffLen(s: *mut char_u, len: ::std::os::raw::c_long);
}
extern "C" {
    pub fn stuffReadbuffSpec(s: *mut char_u);
}
extern "C" {
    pub fn stuffcharReadbuff(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn stuffnumReadbuff(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn start_redo(
        count: ::std::os::raw::c_long,
        old_redo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_redo_ins() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stop_redo_ins();
}
extern "C" {
    pub fn ins_typebuf(
        str_: *mut char_u,
        noremap: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_int,
        nottyped: ::std::os::raw::c_int,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_char_typebuf(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn typebuf_changed(tb_change_cnt: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typebuf_typed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typebuf_maplen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_typebuf(len: ::std::os::raw::c_int, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alloc_typebuf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_typebuf();
}
extern "C" {
    pub fn save_typebuf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn save_typeahead(tp: *mut tasave_T);
}
extern "C" {
    pub fn restore_typeahead(tp: *mut tasave_T);
}
extern "C" {
    pub fn openscript(name: *mut char_u, directly: ::std::os::raw::c_int);
}
extern "C" {
    pub fn close_all_scripts();
}
extern "C" {
    pub fn using_script() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn before_blocking();
}
extern "C" {
    pub fn updatescript(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vgetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safe_vgetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plain_vgetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpeekc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpeekc_nomap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpeekc_any() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn char_avail() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vungetc(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fix_input_buffer(buf: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn input_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_map(
        maptype: ::std::os::raw::c_int,
        arg: *mut char_u,
        mode: ::std::os::raw::c_int,
        abbrev: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_map_mode(
        cmdp: *mut *mut char_u,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn map_clear(
        cmdp: *mut char_u,
        arg: *mut char_u,
        forceit: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn map_clear_int(
        buf: *mut buf_T,
        mode: ::std::os::raw::c_int,
        local: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn map_mode_to_chars(mode: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn map_to_exists(
        str_: *mut char_u,
        modechars: *mut char_u,
        abbr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn map_to_exists_mode(
        rhs: *mut char_u,
        mode: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_context_in_map_cmd(
        xp: *mut expand_T,
        cmd: *mut char_u,
        arg: *mut char_u,
        forceit: ::std::os::raw::c_int,
        isabbrev: ::std::os::raw::c_int,
        isunmap: ::std::os::raw::c_int,
        cmdidx: cmdidx_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ExpandMappings(
        regmatch: *mut regmatch_T,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_abbr(
        c: ::std::os::raw::c_int,
        ptr: *mut char_u,
        col: ::std::os::raw::c_int,
        mincol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strsave_escape_csi(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_unescape_csi(p: *mut char_u);
}
extern "C" {
    pub fn makemap(fd: *mut FILE, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_escstr(
        fd: *mut FILE,
        strstart: *mut char_u,
        what: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_map_keycodes();
}
extern "C" {
    pub fn check_map(
        keys: *mut char_u,
        mode: ::std::os::raw::c_int,
        exact: ::std::os::raw::c_int,
        ign_mod: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
        mp_ptr: *mut *mut mapblock_T,
        local_ptr: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn init_mappings();
}
extern "C" {
    pub fn add_map(map: *mut char_u, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hash_init(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_clear(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_clear_all(ht: *mut hashtab_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hash_find(ht: *mut hashtab_T, key: *mut char_u) -> *mut hashitem_T;
}
extern "C" {
    pub fn hash_lookup(ht: *mut hashtab_T, key: *mut char_u, hash: hash_T) -> *mut hashitem_T;
}
extern "C" {
    pub fn hash_debug_results();
}
extern "C" {
    pub fn hash_add(ht: *mut hashtab_T, key: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_add_item(
        ht: *mut hashtab_T,
        hi: *mut hashitem_T,
        key: *mut char_u,
        hash: hash_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_remove(ht: *mut hashtab_T, hi: *mut hashitem_T);
}
extern "C" {
    pub fn hash_lock(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_unlock(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_hash(key: *mut char_u) -> hash_T;
}
extern "C" {
    pub fn cin_is_cinword(line: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_start_comment(ind_maxcomment: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn cindent_on() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cin_islabel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cin_iscase(s: *mut char_u, strict: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cin_isscopedecl(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_cino(buf: *mut buf_T);
}
extern "C" {
    pub fn get_c_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_expr_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_cinkeys(
        keytyped: ::std::os::raw::c_int,
        when: ::std::os::raw::c_int,
        line_is_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_lisp_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_c_expr_indent();
}
extern "C" {
    pub fn fixthisline(
        get_the_indent: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
extern "C" {
    pub fn fix_indent();
}
extern "C" {
    pub fn json_encode(val: *mut typval_T, options: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn json_encode_nr_expr(
        nr: ::std::os::raw::c_int,
        val: *mut typval_T,
        options: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn json_decode_all(
        reader: *mut js_read_T,
        res: *mut typval_T,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_decode(
        reader: *mut js_read_T,
        res: *mut typval_T,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_find_end(
        reader: *mut js_read_T,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_add_watch(l: *mut list_T, lw: *mut listwatch_T);
}
extern "C" {
    pub fn list_rem_watch(l: *mut list_T, lwrem: *mut listwatch_T);
}
extern "C" {
    pub fn list_fix_watch(l: *mut list_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_alloc() -> *mut list_T;
}
extern "C" {
    pub fn list_alloc_id(id: alloc_id_T) -> *mut list_T;
}
extern "C" {
    pub fn rettv_list_alloc(rettv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_list_alloc_id(rettv: *mut typval_T, id: alloc_id_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_list_set(rettv: *mut typval_T, l: *mut list_T);
}
extern "C" {
    pub fn list_unref(l: *mut list_T);
}
extern "C" {
    pub fn list_free_nonref(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_free_items(copyID: ::std::os::raw::c_int);
}
extern "C" {
    pub fn list_free(l: *mut list_T);
}
extern "C" {
    pub fn listitem_alloc() -> *mut listitem_T;
}
extern "C" {
    pub fn listitem_free(item: *mut listitem_T);
}
extern "C" {
    pub fn listitem_remove(l: *mut list_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_len(l: *mut list_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn list_equal(
        l1: *mut list_T,
        l2: *mut list_T,
        ic: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_find(l: *mut list_T, n: ::std::os::raw::c_long) -> *mut listitem_T;
}
extern "C" {
    pub fn list_find_nr(
        l: *mut list_T,
        idx: ::std::os::raw::c_long,
        errorp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn list_find_str(l: *mut list_T, idx: ::std::os::raw::c_long) -> *mut char_u;
}
extern "C" {
    pub fn list_idx_of_item(l: *mut list_T, item: *mut listitem_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn list_append(l: *mut list_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_append_tv(l: *mut list_T, tv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_dict(list: *mut list_T, dict: *mut dict_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_list(list1: *mut list_T, list2: *mut list_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_string(
        l: *mut list_T,
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_number(l: *mut list_T, n: varnumber_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_insert_tv(
        l: *mut list_T,
        tv: *mut typval_T,
        item: *mut listitem_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_insert(l: *mut list_T, ni: *mut listitem_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_extend(
        l1: *mut list_T,
        l2: *mut list_T,
        bef: *mut listitem_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_list_concat(
        l1: *mut list_T,
        l2: *mut list_T,
        tv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_copy(
        orig: *mut list_T,
        deep: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> *mut list_T;
}
extern "C" {
    pub fn vimlist_remove(l: *mut list_T, item: *mut listitem_T, item2: *mut listitem_T);
}
extern "C" {
    pub fn list2string(
        tv: *mut typval_T,
        copyID: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn list_join(
        gap: *mut garray_T,
        l: *mut list_T,
        sep: *mut char_u,
        echo_style: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_list_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_list(
        fd: *mut FILE,
        list: *mut list_T,
        binary: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_static_list(sl: *mut staticList10_T);
}
extern "C" {
    pub fn vim_main2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn common_init(paramp: *mut mparm_T);
}
extern "C" {
    pub fn is_not_a_term() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn main_loop(cmdwin: ::std::os::raw::c_int, noexmode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getout_preserve_modified(exitval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getout(exitval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn process_env(
        env: *mut char_u,
        is_viminit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mainerr_arg_missing(str_: *mut char_u);
}
extern "C" {
    pub fn time_push(tv_rel: *mut ::std::os::raw::c_void, tv_start: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn time_pop(tp: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn time_msg(mesg: *mut ::std::os::raw::c_char, tv_start: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn server_to_input_buf(str_: *mut char_u);
}
extern "C" {
    pub fn eval_client_expr_to_string(expr: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn sendToLocalVim(
        cmd: *mut char_u,
        asExpr: ::std::os::raw::c_int,
        result: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serverConvert(
        client_enc: *mut char_u,
        data: *mut char_u,
        tofree: *mut *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn setmark(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmark_pos(
        c: ::std::os::raw::c_int,
        pos: *mut pos_T,
        fnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpcmark();
}
extern "C" {
    pub fn checkpcmark();
}
extern "C" {
    pub fn movemark(count: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn movechangelist(count: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn getmark_buf(
        buf: *mut buf_T,
        c: ::std::os::raw::c_int,
        changefile: ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn getmark(c: ::std::os::raw::c_int, changefile: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn getmark_buf_fnum(
        buf: *mut buf_T,
        c: ::std::os::raw::c_int,
        changefile: ::std::os::raw::c_int,
        fnum: *mut ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn getnextmark(
        startpos: *mut pos_T,
        dir: ::std::os::raw::c_int,
        begin_line: ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn fname2fnum(fm: *mut xfmark_T);
}
extern "C" {
    pub fn fmarks_check_names(buf: *mut buf_T);
}
extern "C" {
    pub fn check_mark(pos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrallmarks(buf: *mut buf_T);
}
extern "C" {
    pub fn fm_getname(fmark: *mut fmark_T, lead_len: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn do_marks(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_delmarks(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_jumps(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_clearjumps(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_changes(eap: *mut exarg_T);
}
extern "C" {
    pub fn mark_adjust(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn mark_adjust_nofold(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn mark_col_adjust(
        lnum: linenr_T,
        mincol: colnr_T,
        lnum_amount: ::std::os::raw::c_long,
        col_amount: ::std::os::raw::c_long,
        spaces_removed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cleanup_jumplist(wp: *mut win_T, loadfiles: ::std::os::raw::c_int);
}
extern "C" {
    pub fn copy_jumplist(from: *mut win_T, to: *mut win_T);
}
extern "C" {
    pub fn free_jumplist(wp: *mut win_T);
}
extern "C" {
    pub fn set_last_cursor(win: *mut win_T);
}
extern "C" {
    pub fn free_all_marks();
}
extern "C" {
    pub fn read_viminfo_filemark(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prepare_viminfo_marks();
}
extern "C" {
    pub fn finish_viminfo_marks();
}
extern "C" {
    pub fn handle_viminfo_mark(values: *mut garray_T, force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn write_viminfo_filemarks(fp: *mut FILE);
}
extern "C" {
    pub fn removable(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_marks(fp_out: *mut FILE, buflist: *mut garray_T);
}
extern "C" {
    pub fn copy_viminfo_marks(
        virp: *mut vir_T,
        fp_out: *mut FILE,
        buflist: *mut garray_T,
        eof: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mf_open(fname: *mut char_u, flags: ::std::os::raw::c_int) -> *mut memfile_T;
}
extern "C" {
    pub fn mf_open_file(mfp: *mut memfile_T, fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mf_close(mfp: *mut memfile_T, del_file: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mf_close_file(buf: *mut buf_T, getlines: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mf_new_page_size(mfp: *mut memfile_T, new_size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn mf_new(
        mfp: *mut memfile_T,
        negative: ::std::os::raw::c_int,
        page_count: ::std::os::raw::c_int,
    ) -> *mut bhdr_T;
}
extern "C" {
    pub fn mf_get(
        mfp: *mut memfile_T,
        nr: blocknr_T,
        page_count: ::std::os::raw::c_int,
    ) -> *mut bhdr_T;
}
extern "C" {
    pub fn mf_put(
        mfp: *mut memfile_T,
        hp: *mut bhdr_T,
        dirty: ::std::os::raw::c_int,
        infile: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mf_free(mfp: *mut memfile_T, hp: *mut bhdr_T);
}
extern "C" {
    pub fn mf_sync(mfp: *mut memfile_T, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mf_set_dirty(mfp: *mut memfile_T);
}
extern "C" {
    pub fn mf_release_all() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mf_trans_del(mfp: *mut memfile_T, old_nr: blocknr_T) -> blocknr_T;
}
extern "C" {
    pub fn mf_set_ffname(mfp: *mut memfile_T);
}
extern "C" {
    pub fn mf_fullname(mfp: *mut memfile_T);
}
extern "C" {
    pub fn mf_need_trans(mfp: *mut memfile_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_open(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_setname(buf: *mut buf_T);
}
extern "C" {
    pub fn ml_open_files();
}
extern "C" {
    pub fn ml_open_file(buf: *mut buf_T);
}
extern "C" {
    pub fn check_need_swap(newfile: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_close(buf: *mut buf_T, del_file: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_close_all(del_file: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_close_notmod();
}
extern "C" {
    pub fn ml_timestamp(buf: *mut buf_T);
}
extern "C" {
    pub fn ml_recover(checkext: ::std::os::raw::c_int);
}
extern "C" {
    pub fn recover_names(
        fname: *mut char_u,
        list: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
        fname_out: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_percent_swname(dir: *mut char_u, name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_b0_dict(fname: *mut char_u, d: *mut dict_T);
}
extern "C" {
    pub fn get_ctime(
        thetime: time_t,
        add_newline: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ml_sync_all(check_file: ::std::os::raw::c_int, check_char: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_preserve(buf: *mut buf_T, message: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_get(lnum: linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn ml_get_pos(pos: *mut pos_T) -> *mut char_u;
}
extern "C" {
    pub fn ml_get_curline() -> *mut char_u;
}
extern "C" {
    pub fn ml_get_cursor() -> *mut char_u;
}
extern "C" {
    pub fn ml_get_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        will_change: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ml_line_alloced() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_append(
        lnum: linenr_T,
        line: *mut char_u,
        len: colnr_T,
        newfile: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_append_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        line: *mut char_u,
        len: colnr_T,
        newfile: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_replace(
        lnum: linenr_T,
        line: *mut char_u,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_replace_len(
        lnum: linenr_T,
        line_arg: *mut char_u,
        len_arg: colnr_T,
        has_props: ::std::os::raw::c_int,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_delete(lnum: linenr_T, message: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_delete_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        message: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_setmarked(lnum: linenr_T);
}
extern "C" {
    pub fn ml_firstmarked() -> linenr_T;
}
extern "C" {
    pub fn ml_clearmarked();
}
extern "C" {
    pub fn resolve_symlink(fname: *mut char_u, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn makeswapname(
        fname: *mut char_u,
        ffname: *mut char_u,
        buf: *mut buf_T,
        dir_name: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_file_in_dir(fname: *mut char_u, dname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn ml_setflags(buf: *mut buf_T);
}
extern "C" {
    pub fn ml_find_line_or_offset(
        buf: *mut buf_T,
        lnum: linenr_T,
        offp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn goto_byte(cnt: ::std::os::raw::c_long);
}
extern "C" {
    pub fn arabic_maycombine(two: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arabic_combine(
        one: ::std::os::raw::c_int,
        two: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arabic_shape(
        c: ::std::os::raw::c_int,
        ccp: *mut ::std::os::raw::c_int,
        c1p: *mut ::std::os::raw::c_int,
        prev_c: ::std::os::raw::c_int,
        prev_c1: ::std::os::raw::c_int,
        next_c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smsg(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smsg_attr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smsg_attr_keep(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semsg(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siemsg(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vim_snprintf_add(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_vsnprintf(
        str_: *mut ::std::os::raw::c_char,
        str_m: usize,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_vsnprintf_typval(
        str_: *mut ::std::os::raw::c_char,
        str_m: usize,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
        tvs: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn verb_msg(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_attr(
        s: *mut ::std::os::raw::c_char,
        attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_attr_keep(
        s: *mut ::std::os::raw::c_char,
        attr: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_strtrunc(s: *mut char_u, force: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn trunc_string(
        s: *mut char_u,
        buf: *mut char_u,
        room_in: ::std::os::raw::c_int,
        buflen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn reset_last_sourcing();
}
extern "C" {
    pub fn msg_source(attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn emsg_not_now() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ignore_error_for_testing(error: *mut char_u);
}
extern "C" {
    pub fn do_perror(msg: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn emsg(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iemsg(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn internal_error(where_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn emsg_invreg(name: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_trunc_attr(
        s: *mut ::std::os::raw::c_char,
        force: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn msg_may_trunc(force: ::std::os::raw::c_int, s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_emsg_source() -> *mut char_u;
}
extern "C" {
    pub fn get_emsg_lnum() -> *mut char_u;
}
extern "C" {
    pub fn delete_first_msg() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_messages(eap: *mut exarg_T);
}
extern "C" {
    pub fn msg_end_prompt();
}
extern "C" {
    pub fn wait_return(redraw: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_keep_msg(s: *mut char_u, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_keep_msg_from_hist();
}
extern "C" {
    pub fn msg_start();
}
extern "C" {
    pub fn msg_starthere();
}
extern "C" {
    pub fn msg_putchar(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_putchar_attr(c: ::std::os::raw::c_int, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_outnum(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn msg_home_replace(fname: *mut char_u);
}
extern "C" {
    pub fn msg_home_replace_hl(fname: *mut char_u);
}
extern "C" {
    pub fn msg_outtrans(str_: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_outtrans_attr(
        str_: *mut char_u,
        attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_outtrans_len(str_: *mut char_u, len: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_outtrans_one(p: *mut char_u, attr: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn msg_outtrans_len_attr(
        msgstr: *mut char_u,
        len: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_make(arg: *mut char_u);
}
extern "C" {
    pub fn msg_outtrans_special(
        strstart: *mut char_u,
        from: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2special_save(str_: *mut char_u, is_lhs: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn str2special(sp: *mut *mut char_u, from: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn str2specialbuf(sp: *mut char_u, buf: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_prt_line(s: *mut char_u, list: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_puts(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn msg_puts_title(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn msg_outtrans_long_attr(longstr: *mut char_u, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_outtrans_long_len_attr(
        longstr: *mut char_u,
        len: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn msg_puts_attr(s: *mut ::std::os::raw::c_char, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn message_filtered(msg: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_clear_sb_text();
}
extern "C" {
    pub fn sb_text_start_cmdline();
}
extern "C" {
    pub fn sb_text_end_cmdline();
}
extern "C" {
    pub fn clear_sb_text(all: ::std::os::raw::c_int);
}
extern "C" {
    pub fn show_sb_text();
}
extern "C" {
    pub fn msg_sb_eol();
}
extern "C" {
    pub fn msg_use_printf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_errmsg(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mch_msg(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn msg_moremsg(full: ::std::os::raw::c_int);
}
extern "C" {
    pub fn repeat_message();
}
extern "C" {
    pub fn msg_clr_eos();
}
extern "C" {
    pub fn msg_clr_eos_force();
}
extern "C" {
    pub fn msg_clr_cmdline();
}
extern "C" {
    pub fn msg_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_check();
}
extern "C" {
    pub fn redirecting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn verbose_enter();
}
extern "C" {
    pub fn verbose_leave();
}
extern "C" {
    pub fn verbose_enter_scroll();
}
extern "C" {
    pub fn verbose_leave_scroll();
}
extern "C" {
    pub fn verbose_stop();
}
extern "C" {
    pub fn verbose_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn give_warning(message: *mut char_u, hl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn give_warning2(message: *mut char_u, a1: *mut char_u, hl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_advance(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_dialog(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        buttons: *mut char_u,
        dfltbutton: ::std::os::raw::c_int,
        textfield: *mut char_u,
        ex_cmd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn display_confirm_msg();
}
extern "C" {
    pub fn vim_dialog_yesno(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_dialog_yesnocancel(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_dialog_yesnoallcancel(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_browse(
        flags: ::std::os::raw::c_int,
        title: *mut char_u,
        dflt: *mut char_u,
        ext: *mut char_u,
        initdir: *mut char_u,
        filter: *mut char_u,
        buf: *mut buf_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn msg2_create(priority: msgPriority_T) -> *mut msg_T;
}
extern "C" {
    pub fn msg2_get_contents(msg: *mut msg_T) -> *mut char_u;
}
extern "C" {
    pub fn msg2_set_title(title: *mut char_u, msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_put(s: *mut char_u, msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_send(msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_source(msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_free(msg: *mut msg_T);
}
extern "C" {
    pub fn get_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_lnum(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_buf(buf: *mut buf_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_str(
        ptr: *mut char_u,
        ts: ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_str_vtab(
        ptr: *mut char_u,
        ts: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_indent(
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_number_indent(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_breakindent_win(wp: *mut win_T, line: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_leader_len(
        line: *mut char_u,
        flags: *mut *mut char_u,
        backward: ::std::os::raw::c_int,
        include_space: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_last_leader_offset(
        line: *mut char_u,
        flags: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win(
        wp: *mut win_T,
        lnum: linenr_T,
        winheight: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_nofill(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win_nofill(
        wp: *mut win_T,
        lnum: linenr_T,
        winheight: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win_nofold(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win_col(
        wp: *mut win_T,
        lnum: linenr_T,
        column: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_m_win(wp: *mut win_T, first: linenr_T, last: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gchar_pos(pos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gchar_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pchar_cursor(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn inindent(extra: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skip_to_option_part(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn check_status(buf: *mut buf_T);
}
extern "C" {
    pub fn ask_yesno(str_: *mut char_u, direct: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_mouse_key(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_keystroke() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_number(
        colon: ::std::os::raw::c_int,
        mouse_used: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prompt_for_number(mouse_used: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgmore(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn beep_flush();
}
extern "C" {
    pub fn vim_beep(val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn init_homedir();
}
extern "C" {
    pub fn free_homedir();
}
extern "C" {
    pub fn free_users();
}
extern "C" {
    pub fn expand_env_save(src: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn expand_env_save_opt(src: *mut char_u, one: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn expand_env(src: *mut char_u, dst: *mut char_u, dstlen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn expand_env_esc(
        srcp: *mut char_u,
        dst: *mut char_u,
        dstlen: ::std::os::raw::c_int,
        esc: ::std::os::raw::c_int,
        one: ::std::os::raw::c_int,
        startstr: *mut char_u,
    );
}
extern "C" {
    pub fn vim_getenv(name: *mut char_u, mustfree: *mut ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_unsetenv(var: *mut char_u);
}
extern "C" {
    pub fn vim_setenv(name: *mut char_u, val: *mut char_u);
}
extern "C" {
    pub fn get_env_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_users(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn match_user(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn home_replace(
        buf: *mut buf_T,
        src: *mut char_u,
        dst: *mut char_u,
        dstlen: ::std::os::raw::c_int,
        one: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn home_replace_save(buf: *mut buf_T, src: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn fullpathcmp(
        s1: *mut char_u,
        s2: *mut char_u,
        checkname: ::std::os::raw::c_int,
        expandenv: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettail(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn gettail_sep(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn getnextcomp(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_past_head(path: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_ispathsep(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_ispathsep_nocolon(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shorten_dir(str_: *mut char_u);
}
extern "C" {
    pub fn dir_of_file_exists(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_fnamecmp(x: *mut char_u, y: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_fnamencmp(x: *mut char_u, y: *mut char_u, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn concat_fnames(
        fname1: *mut char_u,
        fname2: *mut char_u,
        sep: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn concat_str(str1: *mut char_u, str2: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn add_pathsep(p: *mut char_u);
}
extern "C" {
    pub fn FullName_save(fname: *mut char_u, force: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn prepare_to_exit();
}
extern "C" {
    pub fn preserve_exit();
}
extern "C" {
    pub fn vim_fexists(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn line_breakcheck();
}
extern "C" {
    pub fn fast_breakcheck();
}
extern "C" {
    pub fn expand_wildcards_eval(
        pat: *mut *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn expand_wildcards(
        num_pat: ::std::os::raw::c_int,
        pat: *mut *mut char_u,
        num_files: *mut ::std::os::raw::c_int,
        files: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_suffix(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unix_expandpath(
        gap: *mut garray_T,
        path: *mut char_u,
        wildoff: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        didstar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_duplicates(gap: *mut garray_T);
}
extern "C" {
    pub fn gen_expand_wildcards(
        num_pat: ::std::os::raw::c_int,
        pat: *mut *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addfile(gap: *mut garray_T, f: *mut char_u, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_cmd_output(
        cmd: *mut char_u,
        infile: *mut char_u,
        flags: ::std::os::raw::c_int,
        ret_len: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn FreeWild(count: ::std::os::raw::c_int, files: *mut *mut char_u);
}
extern "C" {
    pub fn goto_im() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_isolated_shell_name() -> *mut char_u;
}
extern "C" {
    pub fn path_is_url(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn path_with_url(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isAbsName(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_FullName(
        fname: *mut char_u,
        buf: *mut char_u,
        len: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_active() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getviscol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn coladvance_force(wcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getviscol2(col: colnr_T, coladd: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn coladvance(wcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvpos(pos: *mut pos_T, wcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inc_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inc(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn incl(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dec_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dec(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decl(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_cursor_rel_lnum(wp: *mut win_T, lnum: linenr_T) -> linenr_T;
}
extern "C" {
    pub fn check_pos(buf: *mut buf_T, pos: *mut pos_T);
}
extern "C" {
    pub fn check_cursor_lnum();
}
extern "C" {
    pub fn check_cursor_col();
}
extern "C" {
    pub fn check_cursor_col_win(win: *mut win_T);
}
extern "C" {
    pub fn check_cursor();
}
extern "C" {
    pub fn adjust_cursor_col();
}
extern "C" {
    pub fn leftcol_changed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_mem_profile_dump();
}
extern "C" {
    pub fn alloc_does_fail(size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc_id(size: usize, id: alloc_id_T) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc_clear(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc_clear_id(size: usize, id: alloc_id_T) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lalloc_clear(size: usize, message: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lalloc(size: usize, message: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lalloc_id(
        size: usize,
        message: ::std::os::raw::c_int,
        id: alloc_id_T,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mem_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn do_outofmem_msg(size: usize);
}
extern "C" {
    pub fn free_all_mem();
}
extern "C" {
    pub fn vim_strsave(string: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_strnsave(string: *mut char_u, len: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_memsave(p: *mut char_u, len: usize) -> *mut char_u;
}
extern "C" {
    pub fn vim_strsave_escaped(string: *mut char_u, esc_chars: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_strsave_escaped_ext(
        string: *mut char_u,
        esc_chars: *mut char_u,
        cc: ::std::os::raw::c_int,
        bsl: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn csh_like_shell() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strsave_shellescape(
        string: *mut char_u,
        do_special: ::std::os::raw::c_int,
        do_newline: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_strsave_up(string: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_strnsave_up(string: *mut char_u, len: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_strup(p: *mut char_u);
}
extern "C" {
    pub fn strup_save(orig: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn strlow_save(orig: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn del_trailing_spaces(ptr: *mut char_u);
}
extern "C" {
    pub fn vim_strncpy(to: *mut char_u, from: *mut char_u, len: usize);
}
extern "C" {
    pub fn vim_strcat(to: *mut char_u, from: *mut char_u, tosize: usize);
}
extern "C" {
    pub fn copy_option_part(
        option: *mut *mut char_u,
        buf: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        sep_chars: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vim_stricmp(
        s1: *mut ::std::os::raw::c_char,
        s2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strnicmp(
        s1: *mut ::std::os::raw::c_char,
        s2: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strchr(string: *mut char_u, c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_strbyte(string: *mut char_u, c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_strrchr(string: *mut char_u, c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_isspace(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ga_clear(gap: *mut garray_T);
}
extern "C" {
    pub fn ga_clear_strings(gap: *mut garray_T);
}
extern "C" {
    pub fn ga_init(gap: *mut garray_T);
}
extern "C" {
    pub fn ga_init2(
        gap: *mut garray_T,
        itemsize: ::std::os::raw::c_int,
        growsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ga_grow(gap: *mut garray_T, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ga_concat_strings(gap: *mut garray_T, sep: *mut ::std::os::raw::c_char) -> *mut char_u;
}
extern "C" {
    pub fn ga_add_string(gap: *mut garray_T, p: *mut char_u);
}
extern "C" {
    pub fn ga_concat(gap: *mut garray_T, s: *mut char_u);
}
extern "C" {
    pub fn ga_append(gap: *mut garray_T, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn append_ga_line(gap: *mut garray_T);
}
extern "C" {
    pub fn name_to_mod_mask(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simplify_key(
        key: ::std::os::raw::c_int,
        modifiers: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_x_keys(key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_special_key_name(
        c: ::std::os::raw::c_int,
        modifiers: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn trans_special(
        srcp: *mut *mut char_u,
        dst: *mut char_u,
        keycode: ::std::os::raw::c_int,
        in_string: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn special_to_buf(
        key: ::std::os::raw::c_int,
        modifiers: ::std::os::raw::c_int,
        keycode: ::std::os::raw::c_int,
        dst: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_special_key(
        srcp: *mut *mut char_u,
        modp: *mut ::std::os::raw::c_int,
        keycode: ::std::os::raw::c_int,
        keep_x_key: ::std::os::raw::c_int,
        in_string: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extract_modifiers(
        key: ::std::os::raw::c_int,
        modp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_special_key_in_table(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_special_key_code(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_key_name(i: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_mouse_button(
        code: ::std::os::raw::c_int,
        is_click: *mut ::std::os::raw::c_int,
        is_drag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_pseudo_mouse_code(
        button: ::std::os::raw::c_int,
        is_click: ::std::os::raw::c_int,
        is_drag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_fileformat(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_fileformat_force(buf: *mut buf_T, eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_fileformat_buf(
        buf: *mut buf_T,
        t: ::std::os::raw::c_int,
        opt_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_fileformat(t: ::std::os::raw::c_int, opt_flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn default_fileformat() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_shell(cmd: *mut char_u, opt: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_real_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn after_pathsep(b: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn same_directory(f1: *mut char_u, f2: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_chdirfile(
        fname: *mut char_u,
        trigger_autocmd: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_stat(name: *const ::std::os::raw::c_char, stp: *mut stat_T)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_shape_opt(what: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_shape_idx(mouse: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn update_mouseshape(shape_idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vim_chdir(new_dir: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_user_name(buf: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sort_strings(files: *mut *mut char_u, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pathcmp(
        p: *const ::std::os::raw::c_char,
        q: *const ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filewritable(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get2c(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get3c(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get4c(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get8ctime(fd: *mut FILE) -> time_T;
}
extern "C" {
    pub fn read_string(fd: *mut FILE, cnt: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn put_bytes(
        fd: *mut FILE,
        nr: long_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_time(fd: *mut FILE, the_time: time_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_to_bytes(the_time: time_T, buf: *mut char_u);
}
extern "C" {
    pub fn has_non_ascii(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_queued_messages();
}
extern "C" {
    pub fn mch_parse_cmd(
        cmd: *mut char_u,
        use_shcf: ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_argv_from_string(
        cmd: *mut char_u,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_argv_from_list(
        l: *mut list_T,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_session_file(filename: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enc_canon_props(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_init() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bomb_size() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_bom(s: *mut char_u);
}
extern "C" {
    pub fn mb_get_class(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_get_class_buf(p: *mut char_u, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_class(
        lead: ::std::os::raw::c_uint,
        trail: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_char2len(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_char2bytes(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2len(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2len_len(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_uint2cells(c: UINT32_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_char2cells(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2cells_len(
        p: *mut char_u,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_char2cells(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_string2cells(p: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_off2cells(
        off: ::std::os::raw::c_uint,
        max_off: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_off2cells(
        off: ::std::os::raw::c_uint,
        max_off: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_off2cells(
        off: ::std::os::raw::c_uint,
        max_off: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2char(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2char(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_ptr2char_adv(pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_cptr2char_adv(pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_composinglike(p1: *mut char_u, p2: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2char(p: *mut char_u, pcc: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2char_len(
        p: *mut char_u,
        pcc: *mut ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_char2bytes(off: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2len(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_byte2len(b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2len_len(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2len(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2len_len(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_char2len(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_char2bytes(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_iscomposing_uint(c: UINT32_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_iscomposing(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_printable(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_class(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_class_buf(c: ::std::os::raw::c_int, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ambiguous_width(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_fold(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_toupper(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_islower(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_tolower(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_isupper(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_strnicmp(s1: *mut char_u, s2: *mut char_u, nn: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_utf8();
}
extern "C" {
    pub fn latin_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_screen_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_copy_char(fp: *mut *mut char_u, tp: *mut *mut char_u);
}
extern "C" {
    pub fn mb_off_next(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_tail_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_find_illegal();
}
extern "C" {
    pub fn utf_valid_string(s: *mut char_u, end: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_screen_tail_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_adjust_cursor();
}
extern "C" {
    pub fn mb_adjustpos(buf: *mut buf_T, lp: *mut pos_T);
}
extern "C" {
    pub fn mb_prevptr(line: *mut char_u, p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn mb_charlen(str_: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_charlen_len(str_: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_unescape(pp: *mut *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn mb_lefthalve(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_fix_col(
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enc_skip(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn enc_canonize(enc: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn enc_locale_env(locale: *mut ::std::os::raw::c_char) -> *mut char_u;
}
extern "C" {
    pub fn enc_locale() -> *mut char_u;
}
extern "C" {
    pub fn encname2codepage(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn my_iconv_open(to: *mut char_u, from: *mut char_u) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn iconv_enabled(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconv_end();
}
extern "C" {
    pub fn im_set_active(active: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xim_set_focus(focus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn im_set_position(row: ::std::os::raw::c_int, col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xim_set_preedit();
}
extern "C" {
    pub fn im_get_feedback_attr(col: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xim_init();
}
extern "C" {
    pub fn im_shutdown();
}
extern "C" {
    pub fn im_xim_isvalid_imactivate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xim_reset();
}
extern "C" {
    pub fn xim_queue_key_press_event(
        event: *mut ::std::os::raw::c_int,
        down: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn im_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn preedit_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn im_is_preediting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xim_set_status_area();
}
extern "C" {
    pub fn xim_get_status_area_height() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_setup(
        vcp: *mut vimconv_T,
        from: *mut char_u,
        to: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_setup_ext(
        vcp: *mut vimconv_T,
        from: *mut char_u,
        from_unicode_is_utf8: ::std::os::raw::c_int,
        to: *mut char_u,
        to_unicode_is_utf8: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_input(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_input_safe(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
        restp: *mut *mut char_u,
        restlenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_convert(
        vcp: *mut vimconv_T,
        ptr: *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn string_convert_ext(
        vcp: *mut vimconv_T,
        ptr: *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
        unconvlenp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn reset_cursorline();
}
extern "C" {
    pub fn redraw_for_cursorline(wp: *mut win_T);
}
extern "C" {
    pub fn update_topline_redraw();
}
extern "C" {
    pub fn update_topline();
}
extern "C" {
    pub fn update_curswant();
}
extern "C" {
    pub fn check_cursor_moved(wp: *mut win_T);
}
extern "C" {
    pub fn changed_window_setting();
}
extern "C" {
    pub fn changed_window_setting_win(wp: *mut win_T);
}
extern "C" {
    pub fn set_topline(wp: *mut win_T, lnum: linenr_T);
}
extern "C" {
    pub fn changed_cline_bef_curs();
}
extern "C" {
    pub fn changed_cline_bef_curs_win(wp: *mut win_T);
}
extern "C" {
    pub fn changed_line_abv_curs();
}
extern "C" {
    pub fn changed_line_abv_curs_win(wp: *mut win_T);
}
extern "C" {
    pub fn validate_botline();
}
extern "C" {
    pub fn invalidate_botline();
}
extern "C" {
    pub fn invalidate_botline_win(wp: *mut win_T);
}
extern "C" {
    pub fn approximate_botline_win(wp: *mut win_T);
}
extern "C" {
    pub fn cursor_valid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn validate_cursor();
}
extern "C" {
    pub fn validate_cline_row();
}
extern "C" {
    pub fn validate_virtcol();
}
extern "C" {
    pub fn validate_virtcol_win(wp: *mut win_T);
}
extern "C" {
    pub fn validate_cursor_col();
}
extern "C" {
    pub fn win_col_off(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curwin_col_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_col_off2(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curwin_col_off2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_columns(may_scroll: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scrolldown(line_count: ::std::os::raw::c_long, byfold: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scrollup(line_count: ::std::os::raw::c_long, byfold: ::std::os::raw::c_int);
}
extern "C" {
    pub fn check_topfill(wp: *mut win_T, down: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_cursor_top(min_scroll: ::std::os::raw::c_int, always: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_empty_rows(wp: *mut win_T, used: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_cursor_bot(min_scroll: ::std::os::raw::c_int, set_topbot: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_cursor_halfway(atend: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cursor_correct();
}
extern "C" {
    pub fn onepage(
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn halfpage(flag: ::std::os::raw::c_int, Prenum: linenr_T);
}
extern "C" {
    pub fn do_check_cursorbind();
}
extern "C" {
    pub fn state_normal_cmd_initialize() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_normal_cmd_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn state_normal_cmd_execute(
        ctx: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_normal_pending_operator(
        ctx: *mut ::std::os::raw::c_void,
        pendingOp: *mut pendingOp_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_normal_cmds();
}
extern "C" {
    pub fn normal_cmd(oap: *mut oparg_T, toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_pending_operator(
        cap: *mut cmdarg_T,
        old_col: ::std::os::raw::c_int,
        gui_yank: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn do_mouse(
        oap: *mut oparg_T,
        c: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        fixindent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_visual_highlight();
}
extern "C" {
    pub fn end_visual_mode();
}
extern "C" {
    pub fn reset_VIsual_and_resel();
}
extern "C" {
    pub fn reset_VIsual();
}
extern "C" {
    pub fn find_ident_under_cursor(
        string: *mut *mut char_u,
        find_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_ident_at_pos(
        wp: *mut win_T,
        lnum: linenr_T,
        startcol: colnr_T,
        string: *mut *mut char_u,
        find_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_showcmd();
}
extern "C" {
    pub fn add_to_showcmd(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_to_showcmd_c(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn push_showcmd();
}
extern "C" {
    pub fn pop_showcmd();
}
extern "C" {
    pub fn do_check_scrollbind(check: ::std::os::raw::c_int);
}
extern "C" {
    pub fn check_scrollbind(topline_diff: linenr_T, leftcol_diff: ::std::os::raw::c_long);
}
extern "C" {
    pub fn find_decl(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        locally: ::std::os::raw::c_int,
        thisblock: ::std::os::raw::c_int,
        flags_arg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll_redraw(up: ::std::os::raw::c_int, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn handle_tabmenu();
}
extern "C" {
    pub fn do_nv_ident(c1: ::std::os::raw::c_int, c2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_visual_text(
        cap: *mut cmdarg_T,
        pp: *mut *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_selection();
}
extern "C" {
    pub fn may_start_select(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn state_change_initialize(oap: *mut oparg_T) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_change_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_change_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_op_type(
        char1: ::std::os::raw::c_int,
        char2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_on_lines(op: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_is_change(op: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_op_char(optype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_extra_op_char(optype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_shift(
        oap: *mut oparg_T,
        curs_top: ::std::os::raw::c_int,
        amount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn shift_line(
        left: ::std::os::raw::c_int,
        round: ::std::os::raw::c_int,
        amount: ::std::os::raw::c_int,
        call_changed_bytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn op_reindent(
        oap: *mut oparg_T,
        how: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
extern "C" {
    pub fn get_expr_register() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_expr_line(new_line: *mut char_u);
}
extern "C" {
    pub fn get_expr_line() -> *mut char_u;
}
extern "C" {
    pub fn get_expr_line_src() -> *mut char_u;
}
extern "C" {
    pub fn valid_yank_reg(
        regname: ::std::os::raw::c_int,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_yank_register_value(
        regname: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
    );
}
extern "C" {
    pub fn get_yank_register(
        regname: ::std::os::raw::c_int,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_get_selection(regname: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_register(
        name: ::std::os::raw::c_int,
        copy: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn put_register(name: ::std::os::raw::c_int, reg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free_register(reg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn yank_register_mline(regname: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_record(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_execreg(
        regname: ::std::os::raw::c_int,
        colon: ::std::os::raw::c_int,
        addcr: ::std::os::raw::c_int,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insert_reg(
        regname: ::std::os::raw::c_int,
        literally_arg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_spec_reg(
        regname: ::std::os::raw::c_int,
        argp: *mut *mut char_u,
        allocated: *mut ::std::os::raw::c_int,
        errmsg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_paste_reg(
        regname: ::std::os::raw::c_int,
        literally_arg: ::std::os::raw::c_int,
        remcr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjust_clip_reg(rp: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn shift_delete_registers();
}
extern "C" {
    pub fn op_delete(oap: *mut oparg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_replace(oap: *mut oparg_T, c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_tilde(oap: *mut oparg_T);
}
extern "C" {
    pub fn swapchar(op_type: ::std::os::raw::c_int, pos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_insert(oap: *mut oparg_T, count1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn init_yank();
}
extern "C" {
    pub fn clear_registers();
}
extern "C" {
    pub fn op_yank(
        oap: *mut oparg_T,
        deleting: ::std::os::raw::c_int,
        mess: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_put(
        regname: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn adjust_cursor_eol();
}
extern "C" {
    pub fn preprocs_left() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_register_name(num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_display(eap: *mut exarg_T);
}
extern "C" {
    pub fn skip_comment(
        line: *mut char_u,
        process: ::std::os::raw::c_int,
        include_space: ::std::os::raw::c_int,
        is_comment: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn do_join(
        count: ::std::os::raw::c_long,
        insert_space: ::std::os::raw::c_int,
        save_undo: ::std::os::raw::c_int,
        use_formatoptions: ::std::os::raw::c_int,
        setmark: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_format(oap: *mut oparg_T, keep_cursor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn op_formatexpr(oap: *mut oparg_T);
}
extern "C" {
    pub fn fex_format(
        lnum: linenr_T,
        count: ::std::os::raw::c_long,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn format_lines(line_count: linenr_T, avoid_fex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn paragraph_start(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_addsub(oap: *mut oparg_T, Prenum1: linenr_T, g_cmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prepare_viminfo_registers();
}
extern "C" {
    pub fn finish_viminfo_registers();
}
extern "C" {
    pub fn read_viminfo_register(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_viminfo_register(values: *mut garray_T, force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn write_viminfo_registers(fp: *mut FILE);
}
extern "C" {
    pub fn x11_export_final_selection();
}
extern "C" {
    pub fn clip_free_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_get_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_yank_selection(
        type_: ::std::os::raw::c_int,
        str_: *mut char_u,
        len: ::std::os::raw::c_long,
        cbd: *mut VimClipboard,
    );
}
extern "C" {
    pub fn clip_convert_selection(
        str_: *mut *mut char_u,
        len: *mut long_u,
        cbd: *mut VimClipboard,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dnd_yank_drag_data(str_: *mut char_u, len: ::std::os::raw::c_long);
}
extern "C" {
    pub fn get_reg_type(
        regname: ::std::os::raw::c_int,
        reglen: *mut ::std::os::raw::c_long,
    ) -> char_u;
}
extern "C" {
    pub fn get_reg_contents(
        regname: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn write_reg_contents(
        name: ::std::os::raw::c_int,
        str_: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        must_append: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn write_reg_contents_lst(
        name: ::std::os::raw::c_int,
        strings: *mut *mut char_u,
        maxlen: ::std::os::raw::c_int,
        must_append: ::std::os::raw::c_int,
        yank_type: ::std::os::raw::c_int,
        block_len: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn write_reg_contents_ex(
        name: ::std::os::raw::c_int,
        str_: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        must_append: ::std::os::raw::c_int,
        yank_type: ::std::os::raw::c_int,
        block_len: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn clear_oparg(oap: *mut oparg_T);
}
extern "C" {
    pub fn cursor_pos_info(dict: *mut dict_T);
}
extern "C" {
    pub fn set_init_1(clean_arg: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_string_default(name: *mut ::std::os::raw::c_char, val: *mut char_u);
}
extern "C" {
    pub fn set_number_default(name: *mut ::std::os::raw::c_char, val: ::std::os::raw::c_long);
}
extern "C" {
    pub fn set_local_options_default(wp: *mut win_T);
}
extern "C" {
    pub fn free_all_options();
}
extern "C" {
    pub fn set_init_2();
}
extern "C" {
    pub fn set_init_3();
}
extern "C" {
    pub fn set_helplang_default(lang: *mut char_u);
}
extern "C" {
    pub fn init_gui_options();
}
extern "C" {
    pub fn set_title_defaults();
}
extern "C" {
    pub fn do_set(arg: *mut char_u, opt_flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_to_key(
        arg: *mut char_u,
        multi_byte: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_options_bin(
        oldval: ::std::os::raw::c_int,
        newval: ::std::os::raw::c_int,
        opt_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_viminfo_parameter(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_viminfo_parameter(type_: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn check_options();
}
extern "C" {
    pub fn check_buf_options(buf: *mut buf_T);
}
extern "C" {
    pub fn free_string_option(p: *mut char_u);
}
extern "C" {
    pub fn clear_string_option(pp: *mut *mut char_u);
}
extern "C" {
    pub fn get_term_opt_idx(p: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term_option_alloced(p: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn was_set_insecurely(
        opt: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_string_option_direct(
        name: *mut char_u,
        opt_idx: ::std::os::raw::c_int,
        val: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
        set_sid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_string_option_direct_in_win(
        wp: *mut win_T,
        name: *mut char_u,
        opt_idx: ::std::os::raw::c_int,
        val: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
        set_sid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_string_option_direct_in_buf(
        buf: *mut buf_T,
        name: *mut char_u,
        opt_idx: ::std::os::raw::c_int,
        val: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
        set_sid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn valid_spellang(val: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_colorcolumn(wp: *mut win_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_stl_option(s: *mut char_u) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_term_option_sctx_idx(
        name: *mut ::std::os::raw::c_char,
        opt_idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_option_value(
        name: *mut char_u,
        numval: *mut ::std::os::raw::c_long,
        stringval: *mut *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_option_value_strict(
        name: *mut char_u,
        numval: *mut ::std::os::raw::c_long,
        stringval: *mut *mut char_u,
        opt_type: ::std::os::raw::c_int,
        from: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn option_iter_next(
        option: *mut *mut ::std::os::raw::c_void,
        opt_type: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn set_option_value(
        name: *mut char_u,
        number: ::std::os::raw::c_long,
        string: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_term_code(tname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_highlight_default() -> *mut char_u;
}
extern "C" {
    pub fn get_encoding_default() -> *mut char_u;
}
extern "C" {
    pub fn makeset(
        fd: *mut FILE,
        opt_flags: ::std::os::raw::c_int,
        local_only: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn makefoldset(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_termoptions();
}
extern "C" {
    pub fn free_termoptions();
}
extern "C" {
    pub fn free_one_termoption(var: *mut char_u);
}
extern "C" {
    pub fn set_term_defaults();
}
extern "C" {
    pub fn comp_col();
}
extern "C" {
    pub fn unset_global_local_option(name: *mut char_u, from: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_equalprg() -> *mut char_u;
}
extern "C" {
    pub fn win_copy_options(wp_from: *mut win_T, wp_to: *mut win_T);
}
extern "C" {
    pub fn copy_winopt(from: *mut winopt_T, to: *mut winopt_T);
}
extern "C" {
    pub fn check_win_options(win: *mut win_T);
}
extern "C" {
    pub fn clear_winopt(wop: *mut winopt_T);
}
extern "C" {
    pub fn buf_copy_options(buf: *mut buf_T, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reset_modifiable();
}
extern "C" {
    pub fn set_iminsert_global();
}
extern "C" {
    pub fn set_imsearch_global();
}
extern "C" {
    pub fn set_context_in_set_cmd(
        xp: *mut expand_T,
        arg: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ExpandSettings(
        xp: *mut expand_T,
        regmatch: *mut regmatch_T,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ExpandOldSetting(
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn langmap_adjust_mb(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_format_option(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shortmess(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimrc_found(fname: *mut char_u, envname: *mut char_u);
}
extern "C" {
    pub fn change_compatible(on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn option_was_set(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_option_was_set(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_bs(what: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn save_file_ff(buf: *mut buf_T);
}
extern "C" {
    pub fn file_ff_differs(
        buf: *mut buf_T,
        ignore_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_ff_value(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_set(
        var: *mut char_u,
        array: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_padding(
        col: colnr_T,
        ts_arg: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_at(
        col: colnr_T,
        ts: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_start(
        col: colnr_T,
        ts: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
    ) -> colnr_T;
}
extern "C" {
    pub fn tabstop_fromto(
        start_col: colnr_T,
        end_col: colnr_T,
        ts_arg: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
        ntabs: *mut ::std::os::raw::c_int,
        nspcs: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tabstop_eq(
        ts1: *mut ::std::os::raw::c_int,
        ts2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_copy(oldts: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_count(ts: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_first(ts: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_sw_value(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sw_value_indent(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sw_value_pos(buf: *mut buf_T, pos: *mut pos_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sw_value_col(buf: *mut buf_T, col: colnr_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sts_value() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_scrolloff_value() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sidescrolloff_value() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn find_mps_values(
        initc: *mut ::std::os::raw::c_int,
        findc: *mut ::std::os::raw::c_int,
        backwards: *mut ::std::os::raw::c_int,
        switchit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_bkc_value(buf: *mut buf_T) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn signcolumn_on(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_winbuf_options(bufopt: ::std::os::raw::c_int) -> *mut dict_T;
}
extern "C" {
    pub fn qf_init(
        wp: *mut win_T,
        efile: *mut char_u,
        errorformat: *mut char_u,
        newlist: ::std::os::raw::c_int,
        qf_title: *mut char_u,
        enc: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_stack_get_bufnr() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_free_all(wp: *mut win_T);
}
extern "C" {
    pub fn check_quickfix_busy();
}
extern "C" {
    pub fn copy_loclist_stack(from: *mut win_T, to: *mut win_T);
}
extern "C" {
    pub fn qf_jump(
        qi: *mut qf_info_T,
        dir: ::std::os::raw::c_int,
        errornr: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qf_jump_newwin(
        qi: *mut qf_info_T,
        dir: ::std::os::raw::c_int,
        errornr: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        newwin: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qf_list(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_age(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_history(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_mark_adjust(
        wp: *mut win_T,
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn qf_view_result(split: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_cwindow(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cclose(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_copen(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cbottom(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_current_entry(wp: *mut win_T) -> linenr_T;
}
extern "C" {
    pub fn grep_internal(cmdidx: cmdidx_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_make(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_get_size(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_valid_size(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_cur_idx(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_cur_valid_idx(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_cc(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cnext(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cbelow(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cfile(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_vimgrep(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_errorlist(
        qi_arg: *mut qf_info_T,
        wp: *mut win_T,
        qf_idx: ::std::os::raw::c_int,
        list: *mut list_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_properties(
        wp: *mut win_T,
        what: *mut dict_T,
        retdict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_errorlist(
        wp: *mut win_T,
        list: *mut list_T,
        action: ::std::os::raw::c_int,
        title: *mut char_u,
        what: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_quickfix(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_cbuffer(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cexpr(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_helpgrep(eap: *mut exarg_T);
}
extern "C" {
    pub fn re_multiline(prog: *mut regprog_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skip_regexp(
        startp: *mut char_u,
        dirc: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        newp: *mut *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_regcomp_had_eol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_regexp_stuff();
}
extern "C" {
    pub fn ref_extmatch(em: *mut reg_extmatch_T) -> *mut reg_extmatch_T;
}
extern "C" {
    pub fn unref_extmatch(em: *mut reg_extmatch_T);
}
extern "C" {
    pub fn regtilde(source: *mut char_u, magic: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_regsub(
        rmp: *mut regmatch_T,
        source: *mut char_u,
        expr: *mut typval_T,
        dest: *mut char_u,
        copy: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        backslash: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regsub_multi(
        rmp: *mut regmmatch_T,
        lnum: linenr_T,
        source: *mut char_u,
        dest: *mut char_u,
        copy: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        backslash: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reg_submatch(no: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn reg_submatch_list(no: ::std::os::raw::c_int) -> *mut list_T;
}
extern "C" {
    pub fn vim_regcomp(expr_arg: *mut char_u, re_flags: ::std::os::raw::c_int) -> *mut regprog_T;
}
extern "C" {
    pub fn vim_regfree(prog: *mut regprog_T);
}
extern "C" {
    pub fn regprog_in_use(prog: *mut regprog_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec_prog(
        prog: *mut *mut regprog_T,
        ignore_case: ::std::os::raw::c_int,
        line: *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec(
        rmp: *mut regmatch_T,
        line: *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec_nl(
        rmp: *mut regmatch_T,
        line: *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec_multi(
        rmp: *mut regmmatch_T,
        win: *mut win_T,
        buf: *mut buf_T,
        lnum: linenr_T,
        col: colnr_T,
        tm: *mut proftime_T,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn redraw_later(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_win_later(wp: *mut win_T, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_later_clear();
}
extern "C" {
    pub fn redraw_all_later(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_curbuf_later(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_buf_later(buf: *mut buf_T, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_buf_line_later(buf: *mut buf_T, lnum: linenr_T);
}
extern "C" {
    pub fn redraw_buf_and_status_later(buf: *mut buf_T, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_asap(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redraw_after_callback(call_update_screen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redrawWinline(wp: *mut win_T, lnum: linenr_T);
}
extern "C" {
    pub fn after_updating_screen(may_resize_shell: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_curbuf(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_screen(type_arg: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn conceal_cursor_line(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn conceal_check_cursor_line();
}
extern "C" {
    pub fn update_debug_sign(buf: *mut buf_T, lnum: linenr_T);
}
extern "C" {
    pub fn updateWindow(wp: *mut win_T);
}
extern "C" {
    pub fn screen_get_current_line_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_line(
        row: ::std::os::raw::c_int,
        coloff: ::std::os::raw::c_int,
        endcol: ::std::os::raw::c_int,
        clear_width: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rl_mirror(str_: *mut char_u);
}
extern "C" {
    pub fn status_redraw_all();
}
extern "C" {
    pub fn status_redraw_curbuf();
}
extern "C" {
    pub fn redraw_statuslines();
}
extern "C" {
    pub fn win_redraw_last_status(frp: *mut frame_T);
}
extern "C" {
    pub fn win_redr_status_matches(
        xp: *mut expand_T,
        num_matches: ::std::os::raw::c_int,
        matches: *mut *mut char_u,
        match_: ::std::os::raw::c_int,
        showtail: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stl_connected(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_keymap_str(
        wp: *mut win_T,
        fmt: *mut char_u,
        buf: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_putchar(
        c: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_getbytes(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        bytes: *mut char_u,
        attrp: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_puts(
        text: *mut char_u,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_puts_len(
        text: *mut char_u,
        textlen: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_stop_highlight();
}
extern "C" {
    pub fn reset_cterm_colors();
}
extern "C" {
    pub fn screen_draw_rectangle(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        invert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn check_for_delay(check_msg_scroll: ::std::os::raw::c_int);
}
extern "C" {
    pub fn screen_valid(doclear: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screenalloc(doclear: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_screenlines();
}
extern "C" {
    pub fn screenclear();
}
extern "C" {
    pub fn can_clear(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_start();
}
extern "C" {
    pub fn windgoto(row: ::std::os::raw::c_int, col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setcursor();
}
extern "C" {
    pub fn setcursor_mayforce(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_ins_lines(
        wp: *mut win_T,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        invalid: ::std::os::raw::c_int,
        mayclear: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_del_lines(
        wp: *mut win_T,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        invalid: ::std::os::raw::c_int,
        mayclear: ::std::os::raw::c_int,
        clear_attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_ins_lines(
        off: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        clear_attr: ::std::os::raw::c_int,
        wp: *mut win_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_del_lines(
        off: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
        clear_attr: ::std::os::raw::c_int,
        wp: *mut win_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skip_showmode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshowmode(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clearmode();
}
extern "C" {
    pub fn draw_tabline();
}
extern "C" {
    pub fn get_trans_bufname(buf: *mut buf_T);
}
extern "C" {
    pub fn redrawing() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn messaging() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn showruler(always: ::std::os::raw::c_int);
}
extern "C" {
    pub fn number_width(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_screencol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_screenrow() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha256_start(ctx: *mut context_sha256_T);
}
extern "C" {
    pub fn sha256_update(ctx: *mut context_sha256_T, input: *mut char_u, length: UINT32_T);
}
extern "C" {
    pub fn sha256_finish(ctx: *mut context_sha256_T, digest: *mut char_u);
}
extern "C" {
    pub fn search_regcomp(
        pat: *mut char_u,
        pat_save: ::std::os::raw::c_int,
        pat_use: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        regmatch: *mut regmmatch_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_search_pat() -> *mut char_u;
}
extern "C" {
    pub fn reverse_text(s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn save_re_pat(idx: ::std::os::raw::c_int, pat: *mut char_u, magic: ::std::os::raw::c_int);
}
extern "C" {
    pub fn save_search_patterns();
}
extern "C" {
    pub fn restore_search_patterns();
}
extern "C" {
    pub fn free_search_patterns();
}
extern "C" {
    pub fn save_last_search_pattern();
}
extern "C" {
    pub fn restore_last_search_pattern();
}
extern "C" {
    pub fn last_search_pattern() -> *mut char_u;
}
extern "C" {
    pub fn ignorecase(pat: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ignorecase_opt(
        pat: *mut char_u,
        ic_in: ::std::os::raw::c_int,
        scs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pat_has_uppercase(pat: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn last_csearch() -> *mut char_u;
}
extern "C" {
    pub fn last_csearch_forward() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn last_csearch_until() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_last_csearch(c: ::std::os::raw::c_int, s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_csearch_direction(cdir: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_csearch_until(t_cmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn last_search_pat() -> *mut char_u;
}
extern "C" {
    pub fn reset_search_dir();
}
extern "C" {
    pub fn set_last_search_pat(
        s: *mut char_u,
        idx: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        setlast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn last_pat_prog(regmatch: *mut regmmatch_T);
}
extern "C" {
    pub fn searchit(
        win: *mut win_T,
        buf: *mut buf_T,
        pos: *mut pos_T,
        end_pos: *mut pos_T,
        dir: ::std::os::raw::c_int,
        pat: *mut char_u,
        count: ::std::os::raw::c_long,
        options: ::std::os::raw::c_int,
        pat_use: ::std::os::raw::c_int,
        stop_lnum: linenr_T,
        tm: *mut proftime_T,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_search_direction(cdir: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_search(
        oap: *mut oparg_T,
        dirc: ::std::os::raw::c_int,
        pat: *mut char_u,
        count: ::std::os::raw::c_long,
        options: ::std::os::raw::c_int,
        tm: *mut proftime_T,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn search_for_exact_line(
        buf: *mut buf_T,
        pos: *mut pos_T,
        dir: ::std::os::raw::c_int,
        pat: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchc(cap: *mut cmdarg_T, t_cmd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findmatch(oap: *mut oparg_T, initc: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn findmatchlimit(
        oap: *mut oparg_T,
        initc: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        maxtravel: ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn showmatch(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn findsent(
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findpar(
        pincl: *mut ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        what: ::std::os::raw::c_int,
        both: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn startPS(
        lnum: linenr_T,
        para: ::std::os::raw::c_int,
        both: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwd_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        eol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bck_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        stop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn end_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        stop: ::std::os::raw::c_int,
        empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bckend_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        eol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_word(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        bigword: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_sent(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_block(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        other: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_tagblock(
        oap: *mut oparg_T,
        count_arg: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_par(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_quote(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        quotechar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_search(
        count: ::std::os::raw::c_long,
        forward: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linewhite(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pattern_in_path(
        ptr: *mut char_u,
        dir: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        whole: ::std::os::raw::c_int,
        skip_comments: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        action: ::std::os::raw::c_int,
        start_lnum: linenr_T,
        end_lnum: linenr_T,
    );
}
extern "C" {
    pub fn read_viminfo_search_pattern(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_search_pattern(fp: *mut FILE);
}
extern "C" {
    pub fn init_signs();
}
extern "C" {
    pub fn buf_getsigntype(
        buf: *mut buf_T,
        lnum: linenr_T,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_delsign(
        buf: *mut buf_T,
        atlnum: linenr_T,
        id: ::std::os::raw::c_int,
        group: *mut char_u,
    ) -> linenr_T;
}
extern "C" {
    pub fn buf_findsign(
        buf: *mut buf_T,
        id: ::std::os::raw::c_int,
        group: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_findsign_id(
        buf: *mut buf_T,
        lnum: linenr_T,
        groupname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_findsigntype_id(
        buf: *mut buf_T,
        lnum: linenr_T,
        typenr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_signcount(buf: *mut buf_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_delete_signs(buf: *mut buf_T, group: *mut char_u);
}
extern "C" {
    pub fn sign_mark_adjust(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn sign_define_by_name(
        name: *mut char_u,
        icon: *mut char_u,
        linehl: *mut char_u,
        text: *mut char_u,
        texthl: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_undefine_by_name(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_place(
        sign_id: *mut ::std::os::raw::c_int,
        sign_group: *mut char_u,
        sign_name: *mut char_u,
        buf: *mut buf_T,
        lnum: linenr_T,
        prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_unplace(
        sign_id: ::std::os::raw::c_int,
        sign_group: *mut char_u,
        buf: *mut buf_T,
        atlnum: linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_jump(
        sign_id: ::std::os::raw::c_int,
        sign_group: *mut char_u,
        buf: *mut buf_T,
    ) -> linenr_T;
}
extern "C" {
    pub fn ex_sign(eap: *mut exarg_T);
}
extern "C" {
    pub fn sign_getlist(name: *mut char_u, retlist: *mut list_T);
}
extern "C" {
    pub fn get_buffer_signs(buf: *mut buf_T, l: *mut list_T);
}
extern "C" {
    pub fn sign_get_placed(
        buf: *mut buf_T,
        lnum: linenr_T,
        sign_id: ::std::os::raw::c_int,
        sign_group: *mut char_u,
        retlist: *mut list_T,
    );
}
extern "C" {
    pub fn sign_gui_started();
}
extern "C" {
    pub fn sign_get_attr(
        typenr: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_get_text(typenr: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn sign_get_image(typenr: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free_signs();
}
extern "C" {
    pub fn get_sign_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_sign_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn state_insert_literal_initialize(
        ret: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_insert_literal_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_insert_literal_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sm_push(
        mode: ::std::os::raw::c_int,
        subMode: subMode_T,
        context: *mut ::std::os::raw::c_void,
        executeFn: state_execute,
        pendingOperatorFn: state_pending_operator,
        cleanupFn: state_cleanup,
    );
}
extern "C" {
    pub fn sm_push_insert(
        cmdchar: ::std::os::raw::c_int,
        startln: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn sm_push_insert_literal(ret: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn sm_push_normal();
}
extern "C" {
    pub fn sm_push_change(oap: *mut oparg_T);
}
extern "C" {
    pub fn sm_push_cmdline(
        cmdchar: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        indent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sm_execute_normal(cmd: *mut char_u, preserveState: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sm_execute(key: *mut char_u);
}
extern "C" {
    pub fn sm_get_current_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm_get_current_sub_mode() -> subMode_T;
}
extern "C" {
    pub fn sm_get_pending_operator(pendingOp: *mut pendingOp_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm_get_current() -> *mut sm_T;
}
extern "C" {
    pub fn syn_set_timeout(tm: *mut proftime_T);
}
extern "C" {
    pub fn syntax_start(wp: *mut win_T, lnum: linenr_T);
}
extern "C" {
    pub fn syn_stack_free_all(block: *mut synblock_T);
}
extern "C" {
    pub fn syn_stack_apply_changes(buf: *mut buf_T);
}
extern "C" {
    pub fn syntax_end_parsing(lnum: linenr_T);
}
extern "C" {
    pub fn syntax_check_changed(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_syntax_attr(
        col: colnr_T,
        can_spell: *mut ::std::os::raw::c_int,
        keep_state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syntax_clear(block: *mut synblock_T);
}
extern "C" {
    pub fn reset_synblock(wp: *mut win_T);
}
extern "C" {
    pub fn ex_syntax(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_ownsyntax(eap: *mut exarg_T);
}
extern "C" {
    pub fn syntax_present(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_expand_highlight();
}
extern "C" {
    pub fn set_context_in_echohl_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn set_context_in_syntax_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn get_syntax_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn syn_get_id(
        wp: *mut win_T,
        lnum: ::std::os::raw::c_long,
        col: colnr_T,
        trans: ::std::os::raw::c_int,
        spellp: *mut ::std::os::raw::c_int,
        keep_state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_syntax_info(seqnrp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_get_sub_char() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_get_stack_item(i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_get_foldlevel(wp: *mut win_T, lnum: ::std::os::raw::c_long)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_syntime(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_syntime_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn init_highlight(both: ::std::os::raw::c_int, reset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn load_colors(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lookup_color(
        idx: ::std::os::raw::c_int,
        foreground: ::std::os::raw::c_int,
        boldp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_highlight(
        line: *mut char_u,
        forceit: ::std::os::raw::c_int,
        init: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn free_highlight();
}
extern "C" {
    pub fn restore_cterm_colors();
}
extern "C" {
    pub fn set_normal_colors();
}
extern "C" {
    pub fn hl_get_font_name() -> *mut char_u;
}
extern "C" {
    pub fn hl_set_font_name(font_name: *mut char_u);
}
extern "C" {
    pub fn hl_set_bg_color_name(name: *mut char_u);
}
extern "C" {
    pub fn hl_set_fg_color_name(name: *mut char_u);
}
extern "C" {
    pub fn color_name2handle(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_cterm_attr_idx(
        attr: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_int,
        bg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tgc_attr_idx(
        attr: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_long,
        bg: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_gui_attr_idx(
        attr: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_long,
        bg: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_hl_tables();
}
extern "C" {
    pub fn hl_combine_attr(
        char_attr: ::std::os::raw::c_int,
        prim_attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_gui_attr2entry(attr: ::std::os::raw::c_int) -> *mut attrentry_T;
}
extern "C" {
    pub fn syn_attr2attr(attr: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_term_attr2entry(attr: ::std::os::raw::c_int) -> *mut attrentry_T;
}
extern "C" {
    pub fn syn_cterm_attr2entry(attr: ::std::os::raw::c_int) -> *mut attrentry_T;
}
extern "C" {
    pub fn highlight_has_attr(
        id: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
        modec: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn highlight_color(
        id: ::std::os::raw::c_int,
        what: *mut char_u,
        modec: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn highlight_gui_color_rgb(id: ::std::os::raw::c_int, fg: ::std::os::raw::c_int) -> long_u;
}
extern "C" {
    pub fn syn_name2id(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_name2attr(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn highlight_exists(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2name(id: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn syn_namen2id(linep: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_check_group(pp: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2attr(hl_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2colors(
        hl_id: ::std::os::raw::c_int,
        fgp: *mut ::std::os::raw::c_long,
        bgp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2cterm_bg(
        hl_id: ::std::os::raw::c_int,
        fgp: *mut ::std::os::raw::c_int,
        bgp: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn syn_get_final_id(hl_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn highlight_gui_started();
}
extern "C" {
    pub fn highlight_changed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_context_in_highlight_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn get_highlight_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_highlight_name_ext(
        xp: *mut expand_T,
        idx: ::std::os::raw::c_int,
        skip_cleared: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn free_highlight_fonts();
}
extern "C" {
    pub fn do_tag(
        tag: *mut char_u,
        type_: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tag_freematch();
}
extern "C" {
    pub fn do_tags(eap: *mut exarg_T);
}
extern "C" {
    pub fn find_tags(
        pat: *mut char_u,
        num_matches: *mut ::std::os::raw::c_int,
        matchesp: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
        mincount: ::std::os::raw::c_int,
        buf_ffname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_tag_stuff();
}
extern "C" {
    pub fn get_tagfname(
        tnp: *mut tagname_T,
        first: ::std::os::raw::c_int,
        buf: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tagname_free(tnp: *mut tagname_T);
}
extern "C" {
    pub fn expand_tags(
        tagnames: ::std::os::raw::c_int,
        pat: *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tags(
        list: *mut list_T,
        pat: *mut char_u,
        buf_fname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tagstack(wp: *mut win_T, retdict: *mut dict_T);
}
extern "C" {
    pub fn set_tagstack(
        wp: *mut win_T,
        d: *mut dict_T,
        action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termgui_mch_get_color(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn termgui_get_color(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn termgui_mch_get_rgb(color: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn set_termname(term: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_mouse_termcode(n: ::std::os::raw::c_int, s: *mut char_u);
}
extern "C" {
    pub fn del_mouse_termcode(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getlinecol(cp: *mut ::std::os::raw::c_long, rp: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn add_termcap_entry(
        name: *mut char_u,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_is_8bit(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_is_gui(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tltoa(i: ::std::os::raw::c_ulong) -> *mut char_u;
}
extern "C" {
    pub fn termcapinit(name: *mut char_u);
}
extern "C" {
    pub fn out_trash();
}
extern "C" {
    pub fn out_str_nf(s: *mut char_u);
}
extern "C" {
    pub fn out_str_cf(s: *mut char_u);
}
extern "C" {
    pub fn out_str(s: *mut char_u);
}
extern "C" {
    pub fn term_windgoto(row: ::std::os::raw::c_int, col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_cursor_right(i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_append_lines(line_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_delete_lines(line_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_set_winpos(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_get_winpos(
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        timeout: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_set_winsize(height: ::std::os::raw::c_int, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_fg_color(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_bg_color(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_fg_rgb_color(rgb: ::std::os::raw::c_long);
}
extern "C" {
    pub fn term_bg_rgb_color(rgb: ::std::os::raw::c_long);
}
extern "C" {
    pub fn term_settitle(title: *mut char_u);
}
extern "C" {
    pub fn term_push_title(which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_pop_title(which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ttest(pairs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_long_to_buf(val: long_u, dst: *mut char_u);
}
extern "C" {
    pub fn check_shellsize();
}
extern "C" {
    pub fn limit_screen_size();
}
extern "C" {
    pub fn win_new_shellsize();
}
extern "C" {
    pub fn shell_resized();
}
extern "C" {
    pub fn shell_resized_check();
}
extern "C" {
    pub fn set_shellsize(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        mustset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn settmode(tmode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn starttermcap();
}
extern "C" {
    pub fn stoptermcap();
}
extern "C" {
    pub fn may_req_termresponse();
}
extern "C" {
    pub fn may_req_ambiguous_char_width();
}
extern "C" {
    pub fn may_req_bg_color();
}
extern "C" {
    pub fn swapping_screen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmouse();
}
extern "C" {
    pub fn mouse_has(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mouse_model_popup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll_start();
}
extern "C" {
    pub fn cursor_on_force();
}
extern "C" {
    pub fn cursor_on();
}
extern "C" {
    pub fn cursor_off();
}
extern "C" {
    pub fn term_cursor_mode(forced: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_cursor_color(color: *mut char_u);
}
extern "C" {
    pub fn blink_state_is_inverted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_cursor_shape(shape: ::std::os::raw::c_int, blink: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_region_set(wp: *mut win_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_region_reset();
}
extern "C" {
    pub fn clear_termcodes();
}
extern "C" {
    pub fn add_termcode(name: *mut char_u, string: *mut char_u, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn find_termcode(name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_termcode(i: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn del_termcode(name: *mut char_u);
}
extern "C" {
    pub fn set_mouse_topline(wp: *mut win_T);
}
extern "C" {
    pub fn check_termcode(
        max_offset: ::std::os::raw::c_int,
        buf: *mut char_u,
        bufsize: ::std::os::raw::c_int,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_get_fg_color(r: *mut char_u, g: *mut char_u, b: *mut char_u);
}
extern "C" {
    pub fn term_get_bg_color(r: *mut char_u, g: *mut char_u, b: *mut char_u);
}
extern "C" {
    pub fn replace_termcodes(
        from: *mut char_u,
        bufp: *mut *mut char_u,
        from_part: ::std::os::raw::c_int,
        do_lt: ::std::os::raw::c_int,
        special: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn find_term_bykeys(src: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_termcodes();
}
extern "C" {
    pub fn show_one_termcode(
        name: *mut char_u,
        code: *mut char_u,
        printit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn translate_mapping(str_: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn update_tcap(attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn swap_tcap();
}
extern "C" {
    pub fn gui_get_color_cmn(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn gui_get_rgb_color_cmn(
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cterm_color2rgb(
        nr: ::std::os::raw::c_int,
        r: *mut char_u,
        g: *mut char_u,
        b: *mut char_u,
        ansi_idx: *mut char_u,
    );
}
extern "C" {
    pub fn ui_inchar_undo(s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_inchar(
        buf: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        wtime: ::std::os::raw::c_long,
        tb_change_cnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_wait_for_chars_or_timer(
        wtime: ::std::os::raw::c_long,
        wait_func: ::std::option::Option<
            unsafe extern "C" fn(
                wtime: ::std::os::raw::c_long,
                interrupted: *mut ::std::os::raw::c_int,
                ignore_input: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        interrupted: *mut ::std::os::raw::c_int,
        ignore_input: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_char_avail() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_delay(msec: ::std::os::raw::c_long, ignoreinput: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_suspend();
}
extern "C" {
    pub fn suspend_shell();
}
extern "C" {
    pub fn ui_get_shellsize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_set_shellsize(mustset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_new_shellsize();
}
extern "C" {
    pub fn ui_get_winpos(
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        timeout: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_breakcheck();
}
extern "C" {
    pub fn ui_breakcheck_force(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_init(can_use: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_update_selection(clip: *mut VimClipboard);
}
extern "C" {
    pub fn clip_own_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_lose_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn start_global_changes();
}
extern "C" {
    pub fn is_clipboard_needs_update() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn end_global_changes();
}
extern "C" {
    pub fn clip_auto_select();
}
extern "C" {
    pub fn clip_isautosel_star() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_isautosel_plus() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_modeless(
        button: ::std::os::raw::c_int,
        is_click: ::std::os::raw::c_int,
        is_drag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip_start_selection(
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        repeated_click: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip_process_selection(
        button: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        repeated_click: int_u,
    );
}
extern "C" {
    pub fn clip_may_redraw_selection(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip_clear_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_may_clear_selection(row1: ::std::os::raw::c_int, row2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_scroll_selection(rows: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_copy_modeless_selection(both: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_gen_own_selection(cbd: *mut VimClipboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_gen_lose_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_gen_set_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_gen_request_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_gen_owner_exists(cbd: *mut VimClipboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_input_buf_full() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_input_buf_empty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_free_in_input_buf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_used_in_input_buf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_input_buf() -> *mut char_u;
}
extern "C" {
    pub fn set_input_buf(p: *mut char_u);
}
extern "C" {
    pub fn add_to_input_buf(s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_to_input_buf_csi(str_: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn trash_input_buf();
}
extern "C" {
    pub fn read_from_input_buf(
        buf: *mut char_u,
        maxlen: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fill_input_buf(exit_on_error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_error_exit();
}
extern "C" {
    pub fn ui_cursor_shape_forced(forced: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_cursor_shape();
}
extern "C" {
    pub fn check_col(col: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_row(row: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_app_context();
}
extern "C" {
    pub fn jump_to_mouse(
        flags: ::std::os::raw::c_int,
        inclusive: *mut ::std::os::raw::c_int,
        which_button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mouse_comp_pos(
        win: *mut win_T,
        rowp: *mut ::std::os::raw::c_int,
        colp: *mut ::std::os::raw::c_int,
        lnump: *mut linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mouse_find_win(
        rowp: *mut ::std::os::raw::c_int,
        colp: *mut ::std::os::raw::c_int,
    ) -> *mut win_T;
}
extern "C" {
    pub fn get_fpos_of_mouse(mpos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vcol2col(
        wp: *mut win_T,
        lnum: linenr_T,
        vcol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_focus_change(in_focus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn u_save_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_save(top: linenr_T, bot: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_savesub(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_inssub(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_savedel(lnum: linenr_T, nlines: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undo_allowed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_savecommon(
        top: linenr_T,
        bot: linenr_T,
        newbot: linenr_T,
        reload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_compute_hash(hash: *mut char_u);
}
extern "C" {
    pub fn u_get_undo_file_name(
        buf_ffname: *mut char_u,
        reading: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn u_write_undo(
        name: *mut char_u,
        forceit: ::std::os::raw::c_int,
        buf: *mut buf_T,
        hash: *mut char_u,
    );
}
extern "C" {
    pub fn u_read_undo(name: *mut char_u, hash: *mut char_u, orig_name: *mut char_u);
}
extern "C" {
    pub fn u_undo(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn u_redo(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn undo_time(
        step: ::std::os::raw::c_long,
        sec: ::std::os::raw::c_int,
        file: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn u_sync(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_undolist(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_undojoin(eap: *mut exarg_T);
}
extern "C" {
    pub fn u_unchanged(buf: *mut buf_T);
}
extern "C" {
    pub fn u_find_first_changed();
}
extern "C" {
    pub fn u_update_save_nr(buf: *mut buf_T);
}
extern "C" {
    pub fn u_clearall(buf: *mut buf_T);
}
extern "C" {
    pub fn u_saveline(lnum: linenr_T);
}
extern "C" {
    pub fn u_clearline();
}
extern "C" {
    pub fn u_undoline();
}
extern "C" {
    pub fn u_blockfree(buf: *mut buf_T);
}
extern "C" {
    pub fn bufIsChanged(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn anyBufIsChanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufIsChangedNotTerm(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curbufIsChanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_eval_tree(first_uhp: *mut u_header_T, list: *mut list_T);
}
extern "C" {
    pub fn find_ucmd(
        eap: *mut exarg_T,
        p: *mut char_u,
        full: *mut ::std::os::raw::c_int,
        xp: *mut expand_T,
        complp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_user_cmd(xp: *mut expand_T, arg_in: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_user_command_name(idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_commands(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_addr_type(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_flags(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_nargs(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_complete(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn cmdcomplete_str_to_type(complete_str: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uc_fun_cmd() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn parse_compl_arg(
        value: *mut char_u,
        vallen: ::std::os::raw::c_int,
        complp: *mut ::std::os::raw::c_int,
        argt: *mut ::std::os::raw::c_long,
        compl_arg: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_command(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_comclear(eap: *mut exarg_T);
}
extern "C" {
    pub fn uc_clear(gap: *mut garray_T);
}
extern "C" {
    pub fn ex_delcommand(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_ucmd(eap: *mut exarg_T);
}
extern "C" {
    pub fn func_init();
}
extern "C" {
    pub fn get_lambda_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deref_func_name(
        name: *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
        partialp: *mut *mut partial_T,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_func_tv(
        name: *mut char_u,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        arg: *mut *mut char_u,
        firstline: linenr_T,
        lastline: linenr_T,
        doesrange: *mut ::std::os::raw::c_int,
        evaluate: ::std::os::raw::c_int,
        partial: *mut partial_T,
        selfdict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_func(name: *mut char_u) -> *mut ufunc_T;
}
extern "C" {
    pub fn save_funccal(entry: *mut funccal_entry_T);
}
extern "C" {
    pub fn restore_funccal();
}
extern "C" {
    pub fn free_all_functions();
}
extern "C" {
    pub fn func_call(
        name: *mut char_u,
        args: *mut typval_T,
        partial: *mut partial_T,
        selfdict: *mut dict_T,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_callback(
        callback: *mut callback_T,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        argcount: ::std::os::raw::c_int,
        argvars: *mut typval_T,
        argv_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut typval_T,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        firstline: linenr_T,
        lastline: linenr_T,
        doesrange: *mut ::std::os::raw::c_int,
        evaluate: ::std::os::raw::c_int,
        selfdict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_func(
        funcname: *mut char_u,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        argcount_in: ::std::os::raw::c_int,
        argvars_in: *mut typval_T,
        argv_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut typval_T,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        firstline: linenr_T,
        lastline: linenr_T,
        doesrange: *mut ::std::os::raw::c_int,
        evaluate: ::std::os::raw::c_int,
        partial: *mut partial_T,
        selfdict_in: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trans_function_name(
        pp: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        fdp: *mut funcdict_T,
        partial: *mut *mut partial_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ex_function(eap: *mut exarg_T);
}
extern "C" {
    pub fn eval_fname_script(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn translated_function_exists(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn function_exists(
        name: *mut char_u,
        no_deref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_expanded_name(name: *mut char_u, check: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn func_dump_profile(fd: *mut FILE);
}
extern "C" {
    pub fn prof_child_enter(tm: *mut proftime_T);
}
extern "C" {
    pub fn prof_child_exit(tm: *mut proftime_T);
}
extern "C" {
    pub fn get_user_func_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn ex_delfunction(eap: *mut exarg_T);
}
extern "C" {
    pub fn func_unref(name: *mut char_u);
}
extern "C" {
    pub fn func_ptr_unref(fp: *mut ufunc_T);
}
extern "C" {
    pub fn func_ref(name: *mut char_u);
}
extern "C" {
    pub fn func_ptr_ref(fp: *mut ufunc_T);
}
extern "C" {
    pub fn ex_return(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_call(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_return(
        eap: *mut exarg_T,
        reanimate: ::std::os::raw::c_int,
        is_cmd: ::std::os::raw::c_int,
        rettv: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn discard_pending_return(rettv: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_return_cmd(rettv: *mut ::std::os::raw::c_void) -> *mut char_u;
}
extern "C" {
    pub fn get_func_line(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn func_line_start(cookie: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn func_line_exec(cookie: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn func_line_end(cookie: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn func_has_ended(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn func_has_abort(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_partial(selfdict_in: *mut dict_T, rettv: *mut typval_T) -> *mut dict_T;
}
extern "C" {
    pub fn func_name(cookie: *mut ::std::os::raw::c_void) -> *mut char_u;
}
extern "C" {
    pub fn func_breakpoint(cookie: *mut ::std::os::raw::c_void) -> *mut linenr_T;
}
extern "C" {
    pub fn func_dbg_tick(cookie: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn func_level(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_func_returned() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unref_funccal(
        copyID: ::std::os::raw::c_int,
        testing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_funccal_local_ht() -> *mut hashtab_T;
}
extern "C" {
    pub fn get_funccal_local_var() -> *mut dictitem_T;
}
extern "C" {
    pub fn get_funccal_args_ht() -> *mut hashtab_T;
}
extern "C" {
    pub fn get_funccal_args_var() -> *mut dictitem_T;
}
extern "C" {
    pub fn list_func_vars(first: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_current_funccal_dict(ht: *mut hashtab_T) -> *mut dict_T;
}
extern "C" {
    pub fn find_hi_in_scoped_ht(name: *mut char_u, pht: *mut *mut hashtab_T) -> *mut hashitem_T;
}
extern "C" {
    pub fn find_var_in_scoped_ht(
        name: *mut char_u,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn set_ref_in_previous_funccal(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_call_stack(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_functions(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_func_args(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_func(
        name: *mut char_u,
        fp_in: *mut ufunc_T,
        copyID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_longVersion();
}
extern "C" {
    pub fn highest_patch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_patch(n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_version(eap: *mut exarg_T);
}
extern "C" {
    pub fn list_in_columns(
        items: *mut *mut char_u,
        size: ::std::os::raw::c_int,
        current: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn list_version();
}
extern "C" {
    pub fn maybe_intro_message();
}
extern "C" {
    pub fn intro_message(colon: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_intro(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_window(
        nchar: ::std::os::raw::c_int,
        Prenum: ::std::os::raw::c_long,
        xchar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_wincmd_addr_type(arg: *mut char_u, eap: *mut exarg_T);
}
extern "C" {
    pub fn win_split(
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_split_ins(
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        new_wp: *mut win_T,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_valid(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_valid_any_tab(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_windows(
        count: ::std::os::raw::c_int,
        vertical: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_move_after(win1: *mut win_T, win2: *mut win_T);
}
extern "C" {
    pub fn win_equal(
        next_curwin: *mut win_T,
        current: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn close_windows(buf: *mut buf_T, keep_curwin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn one_window() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_close(win: *mut win_T, free_buf: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_close_othertab(win: *mut win_T, free_buf: ::std::os::raw::c_int, tp: *mut tabpage_T);
}
extern "C" {
    pub fn win_free_all();
}
extern "C" {
    pub fn winframe_remove(
        win: *mut win_T,
        dirp: *mut ::std::os::raw::c_int,
        tp: *mut tabpage_T,
    ) -> *mut win_T;
}
extern "C" {
    pub fn close_others(message: ::std::os::raw::c_int, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn curwin_init();
}
extern "C" {
    pub fn win_init_empty(wp: *mut win_T);
}
extern "C" {
    pub fn win_alloc_first() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_alloc_popup_win() -> *mut win_T;
}
extern "C" {
    pub fn win_init_popup_win(wp: *mut win_T, buf: *mut buf_T);
}
extern "C" {
    pub fn win_init_size();
}
extern "C" {
    pub fn free_tabpage(tp: *mut tabpage_T);
}
extern "C" {
    pub fn win_new_tabpage(after: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_open_tabpage() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_tabpages(maxcount: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valid_tabpage(tpc: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valid_tabpage_win(tpc: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close_tabpage(tab: *mut tabpage_T);
}
extern "C" {
    pub fn find_tabpage(n: ::std::os::raw::c_int) -> *mut tabpage_T;
}
extern "C" {
    pub fn tabpage_index(ftp: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goto_tabpage(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn goto_tabpage_tp(
        tp: *mut tabpage_T,
        trigger_enter_autocmds: ::std::os::raw::c_int,
        trigger_leave_autocmds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn goto_tabpage_win(tp: *mut tabpage_T, wp: *mut win_T);
}
extern "C" {
    pub fn tabpage_move(nr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_goto(wp: *mut win_T);
}
extern "C" {
    pub fn win_find_nr(winnr: ::std::os::raw::c_int) -> *mut win_T;
}
extern "C" {
    pub fn win_find_tabpage(win: *mut win_T) -> *mut tabpage_T;
}
extern "C" {
    pub fn win_vert_neighbor(
        tp: *mut tabpage_T,
        wp: *mut win_T,
        up: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> *mut win_T;
}
extern "C" {
    pub fn win_horz_neighbor(
        tp: *mut tabpage_T,
        wp: *mut win_T,
        left: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> *mut win_T;
}
extern "C" {
    pub fn win_enter(wp: *mut win_T, undo_sync: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buf_jump_open_win(buf: *mut buf_T) -> *mut win_T;
}
extern "C" {
    pub fn buf_jump_open_tab(buf: *mut buf_T) -> *mut win_T;
}
extern "C" {
    pub fn win_unlisted(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_free_popup(win: *mut win_T);
}
extern "C" {
    pub fn win_append(after: *mut win_T, wp: *mut win_T);
}
extern "C" {
    pub fn win_remove(wp: *mut win_T, tp: *mut tabpage_T);
}
extern "C" {
    pub fn win_alloc_lines(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_free_lsize(wp: *mut win_T);
}
extern "C" {
    pub fn shell_new_rows();
}
extern "C" {
    pub fn shell_new_columns();
}
extern "C" {
    pub fn win_size_save(gap: *mut garray_T);
}
extern "C" {
    pub fn win_size_restore(gap: *mut garray_T);
}
extern "C" {
    pub fn win_comp_pos() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_setheight(height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_setheight_win(height: ::std::os::raw::c_int, win: *mut win_T);
}
extern "C" {
    pub fn win_setwidth(width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_setwidth_win(width: ::std::os::raw::c_int, wp: *mut win_T);
}
extern "C" {
    pub fn win_setminheight();
}
extern "C" {
    pub fn win_setminwidth();
}
extern "C" {
    pub fn win_drag_status_line(dragwin: *mut win_T, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_drag_vsep_line(dragwin: *mut win_T, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_fraction(wp: *mut win_T);
}
extern "C" {
    pub fn win_new_height(wp: *mut win_T, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_to_fraction(wp: *mut win_T, prev_height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_new_width(wp: *mut win_T, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_comp_scroll(wp: *mut win_T);
}
extern "C" {
    pub fn command_height();
}
extern "C" {
    pub fn last_status(morewin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tabline_height() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn min_rows() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn only_one_window() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_lnums(do_curwin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reset_lnums();
}
extern "C" {
    pub fn make_snapshot(idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn restore_snapshot(idx: ::std::os::raw::c_int, close_curwin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_win(
        save_curwin: *mut *mut win_T,
        save_curtab: *mut *mut tabpage_T,
        win: *mut win_T,
        tp: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_win_noblock(
        save_curwin: *mut *mut win_T,
        save_curtab: *mut *mut tabpage_T,
        win: *mut win_T,
        tp: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_win(
        save_curwin: *mut win_T,
        save_curtab: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn restore_win_noblock(
        save_curwin: *mut win_T,
        save_curtab: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_buffer(save_curbuf: *mut bufref_T, buf: *mut buf_T);
}
extern "C" {
    pub fn restore_buffer(save_curbuf: *mut bufref_T);
}
extern "C" {
    pub fn win_hasvertsplit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_add(
        wp: *mut win_T,
        grp: *mut char_u,
        pat: *mut char_u,
        prio: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
        pos_list: *mut list_T,
        conceal_char: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_delete(
        wp: *mut win_T,
        id: ::std::os::raw::c_int,
        perr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_matches(wp: *mut win_T);
}
extern "C" {
    pub fn get_match(wp: *mut win_T, id: ::std::os::raw::c_int) -> *mut matchitem_T;
}
extern "C" {
    pub fn get_win_number(wp: *mut win_T, first_win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tab_number(tp: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_getid(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_gotoid(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_id2tabwin(argvars: *mut typval_T, list: *mut list_T);
}
extern "C" {
    pub fn win_id2wp(id: ::std::os::raw::c_int) -> *mut win_T;
}
extern "C" {
    pub fn win_id2win(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_findbuf(argvars: *mut typval_T, list: *mut list_T);
}
extern "C" {
    pub fn get_framelayout(fr: *mut frame_T, l: *mut list_T, outer: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ch_logfile(fname: *mut char_u, opt: *mut char_u);
}
extern "C" {
    pub fn ch_log_active() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_channel() -> *mut channel_T;
}
extern "C" {
    pub fn has_any_channel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_unref(channel: *mut channel_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unused_channels_contents(
        copyID: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unused_channels(copyID: ::std::os::raw::c_int, mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_gui_register_all();
}
extern "C" {
    pub fn channel_open(
        hostname: *mut ::std::os::raw::c_char,
        port_in: ::std::os::raw::c_int,
        waittime: ::std::os::raw::c_int,
        nb_close_cb: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> *mut channel_T;
}
extern "C" {
    pub fn channel_open_func(argvars: *mut typval_T) -> *mut channel_T;
}
extern "C" {
    pub fn channel_set_pipes(channel: *mut channel_T, in_: sock_T, out: sock_T, err: sock_T);
}
extern "C" {
    pub fn channel_set_job(channel: *mut channel_T, job: *mut job_T, options: *mut jobopt_T);
}
extern "C" {
    pub fn channel_set_options(channel: *mut channel_T, opt: *mut jobopt_T);
}
extern "C" {
    pub fn channel_set_req_callback(
        channel: *mut channel_T,
        part: ch_part_T,
        callback: *mut callback_T,
        id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn channel_buffer_free(buf: *mut buf_T);
}
extern "C" {
    pub fn channel_write_any_lines();
}
extern "C" {
    pub fn channel_write_new_lines(buf: *mut buf_T);
}
extern "C" {
    pub fn channel_peek(channel: *mut channel_T, part: ch_part_T) -> *mut readq_T;
}
extern "C" {
    pub fn channel_first_nl(node: *mut readq_T) -> *mut char_u;
}
extern "C" {
    pub fn channel_get(
        channel: *mut channel_T,
        part: ch_part_T,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn channel_consume(channel: *mut channel_T, part: ch_part_T, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_collapse(
        channel: *mut channel_T,
        part: ch_part_T,
        want_nl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_can_write_to(channel: *mut channel_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_is_open(channel: *mut channel_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_has_readahead(channel: *mut channel_T, part: ch_part_T)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_status(
        channel: *mut channel_T,
        req_part: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn channel_info(channel: *mut channel_T, dict: *mut dict_T);
}
extern "C" {
    pub fn channel_close(channel: *mut channel_T, invoke_close_cb: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_close_in(channel: *mut channel_T);
}
extern "C" {
    pub fn channel_clear(channel: *mut channel_T);
}
extern "C" {
    pub fn channel_free_all();
}
extern "C" {
    pub fn common_channel_read(
        argvars: *mut typval_T,
        rettv: *mut typval_T,
        raw: ::std::os::raw::c_int,
        blob: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn channel_fd2channel(fd: sock_T, partp: *mut ch_part_T) -> *mut channel_T;
}
extern "C" {
    pub fn channel_handle_events(only_keep_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_any_keep_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_set_nonblock(channel: *mut channel_T, part: ch_part_T);
}
extern "C" {
    pub fn channel_send(
        channel: *mut channel_T,
        part: ch_part_T,
        buf_arg: *mut char_u,
        len_arg: ::std::os::raw::c_int,
        fun: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ch_expr_common(
        argvars: *mut typval_T,
        rettv: *mut typval_T,
        eval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ch_raw_common(argvars: *mut typval_T, rettv: *mut typval_T, eval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_poll_setup(
        nfd_in: ::std::os::raw::c_int,
        fds_in: *mut ::std::os::raw::c_void,
        towait: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_poll_check(
        ret_in: ::std::os::raw::c_int,
        fds_in: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_select_setup(
        maxfd_in: ::std::os::raw::c_int,
        rfds_in: *mut ::std::os::raw::c_void,
        wfds_in: *mut ::std::os::raw::c_void,
        tv: *mut timeval,
        tvp: *mut *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_select_check(
        ret_in: ::std::os::raw::c_int,
        rfds_in: *mut ::std::os::raw::c_void,
        wfds_in: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_parse_messages() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_any_readahead() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_channel(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_part_send(channel: *mut channel_T) -> ch_part_T;
}
extern "C" {
    pub fn channel_part_read(channel: *mut channel_T) -> ch_part_T;
}
extern "C" {
    pub fn channel_get_mode(channel: *mut channel_T, part: ch_part_T) -> ch_mode_T;
}
extern "C" {
    pub fn channel_get_timeout(channel: *mut channel_T, part: ch_part_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_job_options(opt: *mut jobopt_T);
}
extern "C" {
    pub fn free_job_options(opt: *mut jobopt_T);
}
extern "C" {
    pub fn get_job_options(
        tv: *mut typval_T,
        opt: *mut jobopt_T,
        supported: ::std::os::raw::c_int,
        supported2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_channel_arg(
        tv: *mut typval_T,
        check_open: ::std::os::raw::c_int,
        reading: ::std::os::raw::c_int,
        part: ch_part_T,
    ) -> *mut channel_T;
}
extern "C" {
    pub fn job_free_all();
}
extern "C" {
    pub fn job_any_running() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win32_build_cmd(l: *mut list_T, gap: *mut garray_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_cleanup(job: *mut job_T);
}
extern "C" {
    pub fn set_ref_in_job(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_unref(job: *mut job_T);
}
extern "C" {
    pub fn free_unused_jobs_contents(
        copyID: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unused_jobs(copyID: ::std::os::raw::c_int, mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn job_alloc() -> *mut job_T;
}
extern "C" {
    pub fn job_set_options(job: *mut job_T, opt: *mut jobopt_T);
}
extern "C" {
    pub fn job_stop_on_exit();
}
extern "C" {
    pub fn has_pending_job() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_check_ended() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_start(
        argvars: *mut typval_T,
        argv_arg: *mut *mut ::std::os::raw::c_char,
        opt_arg: *mut jobopt_T,
        is_terminal: ::std::os::raw::c_int,
    ) -> *mut job_T;
}
extern "C" {
    pub fn job_status(job: *mut job_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn job_info(job: *mut job_T, dict: *mut dict_T);
}
extern "C" {
    pub fn job_info_all(l: *mut list_T);
}
extern "C" {
    pub fn job_stop(
        job: *mut job_T,
        argvars: *mut typval_T,
        type_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn invoke_prompt_callback();
}
extern "C" {
    pub fn invoke_prompt_interrupt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ch_log(ch: *mut channel_T, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn setup_slavepty(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_openpty(ttyn: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_isatty(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut Rows: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut Columns: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut ScreenLines: *mut schar_T;
}
extern "C" {
    pub static mut ScreenAttrs: *mut sattr_T;
}
extern "C" {
    pub static mut LineOffset: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut LineWraps: *mut char_u;
}
extern "C" {
    pub static mut autoCommandCallback: AutoCommandCallback;
}
extern "C" {
    pub static mut bufferUpdateCallback: BufferUpdateCallback;
}
extern "C" {
    pub static mut clearCallback: ClearCallback;
}
extern "C" {
    pub static mut clipboardGetCallback: ClipboardGetCallback;
}
extern "C" {
    pub static mut cursorAddCallback: CursorAddCallback;
}
extern "C" {
    pub static mut customCommandCallback: CustomCommandCallback;
}
extern "C" {
    pub static mut fileWriteFailureCallback: FileWriteFailureCallback;
}
extern "C" {
    pub static mut directoryChangedCallback: DirectoryChangedCallback;
}
extern "C" {
    pub static mut formatCallback: FormatCallback;
}
extern "C" {
    pub static mut gotoCallback: GotoCallback;
}
extern "C" {
    pub static mut tabPageCallback: TabPageCallback;
}
extern "C" {
    pub static mut displayIntroCallback: VoidCallback;
}
extern "C" {
    pub static mut displayVersionCallback: VoidCallback;
}
extern "C" {
    pub static mut autoIndentCallback: AutoIndentCallback;
}
extern "C" {
    pub static mut colorSchemeChangedCallback: ColorSchemeChangedCallback;
}
extern "C" {
    pub static mut colorSchemeCompletionCallback: ColorSchemeCompletionCallback;
}
extern "C" {
    pub static mut cursorMoveScreenLineCallback: CursorMoveScreenLineCallback;
}
extern "C" {
    pub static mut cursorMoveScreenPositionCallback: CursorMoveScreenPositionCallback;
}
extern "C" {
    pub static mut functionGetCharCallback: FunctionGetCharCallback;
}
extern "C" {
    pub static mut inputMapCallback: InputMapCallback;
}
extern "C" {
    pub static mut inputUnmapCallback: InputUnmapCallback;
}
extern "C" {
    pub static mut messageCallback: MessageCallback;
}
extern "C" {
    pub static mut outputCallback: OutputCallback;
}
extern "C" {
    pub static mut macroStartRecordCallback: MacroStartRecordCallback;
}
extern "C" {
    pub static mut macroStopRecordCallback: MacroStopRecordCallback;
}
extern "C" {
    pub static mut optionSetCallback: OptionSetCallback;
}
extern "C" {
    pub static mut quitCallback: QuitCallback;
}
extern "C" {
    pub static mut scrollCallback: ScrollCallback;
}
extern "C" {
    pub static mut terminalCallback: TerminalCallback;
}
extern "C" {
    pub static mut toggleCommentsCallback: ToggleCommentsCallback;
}
extern "C" {
    pub static mut stopSearchHighlightCallback: VoidCallback;
}
extern "C" {
    pub static mut unhandledEscapeCallback: VoidCallback;
}
extern "C" {
    pub static mut windowSplitCallback: WindowSplitCallback;
}
extern "C" {
    pub static mut windowMovementCallback: WindowMovementCallback;
}
extern "C" {
    pub static mut yankCallback: YankCallback;
}
extern "C" {
    pub static mut state_current: *mut sm_T;
}
extern "C" {
    pub static mut ScreenLinesUC: *mut u8char_T;
}
extern "C" {
    pub static mut ScreenLinesC: [*mut u8char_T; 6usize];
}
extern "C" {
    pub static mut Screen_mco: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ScreenLines2: *mut schar_T;
}
extern "C" {
    pub static mut TabPageIdxs: *mut ::std::os::raw::c_short;
}
extern "C" {
    pub static mut screen_Rows: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut screen_Columns: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mod_mask: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdline_row: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redraw_cmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redraw_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clear_cmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mode_displayed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_win_do_lines_ins: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdline_star: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ccline: cmdline_info;
}
extern "C" {
    pub static mut exec_from_reg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut screen_cleared: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut dollar_vcol: colnr_T;
}
extern "C" {
    pub static mut cmdmsg_rl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_row: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scrolled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scrolled_ign: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_msg: *mut char_u;
}
extern "C" {
    pub static mut keep_msg_attr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_msg_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_fileinfo: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scroll: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_didout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_didany: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_nowait: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut info_message: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_hist_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_clr_eos: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_skip: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_severe: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_endif: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vimvardict: dict_T;
}
extern "C" {
    pub static mut globvardict: dict_T;
}
extern "C" {
    pub static mut did_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut called_vim_beep: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_uncaught_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_emsg_syntax: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut called_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_exitval: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_on_display: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut rc_did_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut quit_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut newline_on_exit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut intr_char: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_keep_indent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vgetc_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut didset_vim: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut didset_vimruntime: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lines_left: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_no_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sourcing_name: *mut char_u;
}
extern "C" {
    pub static mut sourcing_lnum: linenr_T;
}
extern "C" {
    pub static mut ex_nesting_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_break_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_did_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_tick: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_backtrace_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut do_profiling: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut current_exception: *mut except_T;
}
extern "C" {
    pub static mut did_throw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_rethrow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut check_cstack: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut trylevel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut force_abort: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_list: *mut *mut msglist;
}
extern "C" {
    pub static mut suppress_errthrow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut caught_stack: *mut except_T;
}
extern "C" {
    pub static mut may_garbage_collect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut want_garbage_collect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut garbage_collect_at_exit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut current_sctx: sctx_T;
}
extern "C" {
    pub static mut did_source_packages: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut hash_removed: char_u;
}
extern "C" {
    pub static mut scroll_region: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut t_colors: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut highlight_match: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut search_match_lines: linenr_T;
}
extern "C" {
    pub static mut search_match_endcol: colnr_T;
}
extern "C" {
    pub static mut search_first_line: linenr_T;
}
extern "C" {
    pub static mut search_last_line: linenr_T;
}
extern "C" {
    pub static mut no_smartcase: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut highlight_attr: [::std::os::raw::c_int; 46usize];
}
extern "C" {
    pub static mut cterm_normal_fg_color: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cterm_normal_fg_bold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cterm_normal_bg_color: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_no_enter: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_no_leave: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut modified_was_set: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut au_did_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut au_new_curbuf: bufref_T;
}
extern "C" {
    pub static mut au_pending_free_buf: *mut buf_T;
}
extern "C" {
    pub static mut au_pending_free_win: *mut win_T;
}
extern "C" {
    pub static mut diff_context: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut diff_foldcolumn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut diff_need_scrollbind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut updating_screen: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clip_unnamed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clip_unnamed_saved: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut firstwin: *mut win_T;
}
extern "C" {
    pub static mut lastwin: *mut win_T;
}
extern "C" {
    pub static mut prevwin: *mut win_T;
}
extern "C" {
    pub static mut curwin: *mut win_T;
}
extern "C" {
    pub static mut aucmd_win: *mut win_T;
}
extern "C" {
    pub static mut aucmd_win_used: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut topframe: *mut frame_T;
}
extern "C" {
    pub static mut first_tabpage: *mut tabpage_T;
}
extern "C" {
    pub static mut curtab: *mut tabpage_T;
}
extern "C" {
    pub static mut redraw_tabline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut firstbuf: *mut buf_T;
}
extern "C" {
    pub static mut lastbuf: *mut buf_T;
}
extern "C" {
    pub static mut curbuf: *mut buf_T;
}
extern "C" {
    pub static mut mf_dont_release: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut global_alist: alist_T;
}
extern "C" {
    pub static mut max_alist_id: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut arg_had_last: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ru_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sc_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vim_tempdir: *mut char_u;
}
extern "C" {
    pub static mut starting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut really_exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut v_dying: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut stdout_isatty: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut test_autochdir: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut full_screen: sig_atomic_t;
}
extern "C" {
    pub static mut restricted: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut secure: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut textlock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curbuf_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut allbuf_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sandbox: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut silent_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual: pos_T;
}
extern "C" {
    pub static mut VIsual_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_select: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_reselect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redo_VIsual_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_ai: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ai_col: colnr_T;
}
extern "C" {
    pub static mut end_comment_pending: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_syncbind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut saved_cursor: pos_T;
}
extern "C" {
    pub static mut Insstart: pos_T;
}
extern "C" {
    pub static mut Insstart_orig: pos_T;
}
extern "C" {
    pub static mut orig_line_count: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vr_lines_changed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_dbcs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_unicode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_utf8: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_latin1like: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut has_mbyte: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mb_bytelen_tab: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static mut input_conv: vimconv_T;
}
extern "C" {
    pub static mut output_conv: vimconv_T;
}
extern "C" {
    pub static mut mb_ptr2len:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_ptr2len_len: ::std::option::Option<
        unsafe extern "C" fn(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2len: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2bytes: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_ptr2cells:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_ptr2cells_len: ::std::option::Option<
        unsafe extern "C" fn(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2cells: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_off2cells: ::std::option::Option<
        unsafe extern "C" fn(
            off: ::std::os::raw::c_uint,
            max_off: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_ptr2char:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_head_off: ::std::option::Option<
        unsafe extern "C" fn(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut State: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut finish_op: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opcount: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut motion_force: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exmode_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_no_reprint: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut reg_recording: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut reg_executing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_mapping: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_zero_mapping: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut allow_keys: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_u_sync: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut u_sync_once: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut restart_edit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut arrow_used: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ins_at_eol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_abbr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mapped_ctrl_c: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ctrl_c_interrupts: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdmod: cmdmod_T;
}
extern "C" {
    pub static mut msg_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_noredir: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmd_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut swap_exists_action: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut swap_exists_did_quit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut IObuff: *mut char_u;
}
extern "C" {
    pub static mut NameBuff: *mut char_u;
}
extern "C" {
    pub static mut msg_buf: [::std::os::raw::c_char; 480usize];
}
extern "C" {
    pub static mut RedrawingDisabled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut readonlymode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut recoverymode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut typebuf: typebuf_T;
}
extern "C" {
    pub static mut ex_normal_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_normal_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_script: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut stop_insert_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut KeyTyped: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut KeyStuffed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut maptick: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut must_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut skip_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut do_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_highlight_changed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut scriptin: [*mut FILE; 15usize];
}
extern "C" {
    pub static mut curscript: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut scriptout: *mut FILE;
}
extern "C" {
    pub static mut read_cmd_fd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut got_int: sig_atomic_t;
}
extern "C" {
    pub static mut termcap_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cur_tmode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut bangredo: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut searchcmdlen: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_outofmem_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_swapwrite_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut undo_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut global_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut listcmd_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_start_insertmode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut last_cmdline: *mut char_u;
}
extern "C" {
    pub static mut repeat_cmdline: *mut char_u;
}
extern "C" {
    pub static mut new_last_cmdline: *mut char_u;
}
extern "C" {
    pub static mut autocmd_fname: *mut char_u;
}
extern "C" {
    pub static mut autocmd_fname_full: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_bufnr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_match: *mut char_u;
}
extern "C" {
    pub static mut did_cursorhold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut last_cursormoved: pos_T;
}
extern "C" {
    pub static mut postponed_split: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut postponed_split_flags: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut postponed_split_tab: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut g_do_tagpreview: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut g_tag_at_cursor: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut replace_offset: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut escape_chars: *mut char_u;
}
extern "C" {
    pub static mut keep_help_flag: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut empty_option: *mut char_u;
}
extern "C" {
    pub static mut redir_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_fd: *mut FILE;
}
extern "C" {
    pub static mut redir_reg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_vname: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_execute: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut langmap_mapchar: [char_u; 256usize];
}
extern "C" {
    pub static mut breakat_flags: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static mut Version: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut longVersion: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut default_vim_dir: *mut char_u;
}
extern "C" {
    pub static mut default_vimruntime_dir: *mut char_u;
}
extern "C" {
    pub static mut all_cflags: *mut char_u;
}
extern "C" {
    pub static mut all_lflags: *mut char_u;
}
extern "C" {
    pub static mut compiled_user: *mut char_u;
}
extern "C" {
    pub static mut compiled_sys: *mut char_u;
}
extern "C" {
    pub static mut globaldir: *mut char_u;
}
extern "C" {
    pub static mut lcs_eol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_ext: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_prec: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_nbsp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_space: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab1: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab2: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab3: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_trail: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_stl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_stlnc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_vert: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_fold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_diff: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_fold_update: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut km_stopsel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut km_startsel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_lines_msg: [char_u; 0usize];
}
extern "C" {
    pub static mut sub_nsubs: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut sub_nlines: linenr_T;
}
extern "C" {
    pub static mut wim_flags: [char_u; 4usize];
}
extern "C" {
    pub static mut no_hlsearch: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut typebuf_was_filled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut term_is_xterm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut virtual_op: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut e_abort: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_argreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_backslash: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_curdir: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endif: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endtry: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endwhile: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endfor: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_while: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_for: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_exists: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_failed: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_internal: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_intern2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_interr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invaddr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invarg2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_duparg2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invargval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invargNval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invexpr2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invrange: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invcmd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_isadir2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_libcall: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_fsync: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_markinval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_marknotset: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_modifiable: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nesting: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noalt: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noabbr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nobang: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nogvim: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nofarsi: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nogroup: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noinstext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nolastcmd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomap: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomatch: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomatch2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noname: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nopresub: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noprev: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noprevre: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_norange: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noroom: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notcreate: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notmp: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notopen: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notread: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_null: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_number_exp: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_openerrf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_outofmem: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_patnotf2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_positive: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_prev_dir: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_quickfix: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_loclist: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_re_damg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_re_corr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonly: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonlyvar: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonlysbx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_emptykey: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dictreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listidx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_blobidx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalblob: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomanyarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dictkey: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listblobreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listdictarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listdictblobarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readerrf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_sandbox: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_secure: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_screenmode: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_scroll: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_shellempty: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_swapclose: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_tagstack: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toocompl: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_longname: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomsbra: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomany: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_trailing: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_umark: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_wildexpand: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_winheight: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_winwidth: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_write: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_zerocount: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_usingsid: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_maxmempat: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_emptybuf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nobufnr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalpat: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_bufloaded: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalidreg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dirnotf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_au_recursive: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut top_bot_msg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut bot_top_msg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut starttime: time_T;
}
extern "C" {
    pub static mut time_fd: *mut FILE;
}
extern "C" {
    pub static mut vim_ignored: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vim_ignoredp: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut alloc_fail_id: alloc_id_T;
}
extern "C" {
    pub static mut alloc_fail_countdown: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut alloc_fail_repeat: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_char_avail_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_redraw_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_redraw_flag_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut nfa_fail_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_query_mouse_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut in_free_unref_items: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_add_timer: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timer_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut time_for_testing: time_T;
}
extern "C" {
    pub static mut did_echo_string_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut eval_lavars_used: *mut ::std::os::raw::c_int;
}
pub type elapsed_T = timeval;
extern "C" {
    pub fn elapsed(start_tv: *mut timeval) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vimInit(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Buffer Methods"]
    pub fn vimBufferOpen(
        ffname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferLoad(
        ffname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferNew(flags: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferCheckIfChanged(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetById(id: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferGetCurrent() -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferSetCurrent(buf: *mut buf_T);
}
extern "C" {
    pub fn vimBufferGetFilename(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetFiletype(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetId(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetLastChangedTick(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vimBufferGetLine(buf: *mut buf_T, lnum: linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetLineCount(buf: *mut buf_T) -> usize;
}
extern "C" {
    pub fn vimBufferSetLines(
        buf: *mut buf_T,
        start: linenr_T,
        end: linenr_T,
        lines: *mut *mut char_u,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vimBufferGetModified(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetModifiable(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetModifiable(buf: *mut buf_T, modifiable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimBufferGetFileFormat(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetFileFormat(buf: *mut buf_T, fileformat: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimBufferGetReadOnly(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetReadOnly(buf: *mut buf_T, modifiable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimSetBufferUpdateCallback(bufferUpdate: BufferUpdateCallback);
}
extern "C" {
    #[doc = " Autocommands"]
    pub fn vimSetAutoCommandCallback(autoCommandDispatch: AutoCommandCallback);
}
extern "C" {
    #[doc = " Commandline"]
    pub fn vimCommandLineGetType() -> char_u;
}
extern "C" {
    pub fn vimCommandLineGetText() -> *mut char_u;
}
extern "C" {
    pub fn vimCommandLineGetPosition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimCommandLineGetCompletions(
        completions: *mut *mut *mut char_u,
        count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vimSetCustomCommandHandler(customCommandHandler: CustomCommandCallback);
}
extern "C" {
    #[doc = " vimEval\n\n Evaluate a string as vim script, and return the result as string.\n Callee is responsible for freeing the command as well as the result."]
    pub fn vimEval(str_: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vimSetFunctionGetCharCallback(callback: FunctionGetCharCallback);
}
extern "C" {
    #[doc = " Cursor Methods"]
    pub fn vimCursorGetColumn() -> colnr_T;
}
extern "C" {
    pub fn vimCursorGetColumnWant() -> colnr_T;
}
extern "C" {
    pub fn vimCursorSetColumnWant(curswant: colnr_T);
}
extern "C" {
    pub fn vimCursorGetLine() -> linenr_T;
}
extern "C" {
    pub fn vimCursorGetPosition() -> pos_T;
}
extern "C" {
    pub fn vimCursorSetPosition(pos: pos_T);
}
extern "C" {
    pub fn vimSetCursorAddCallback(cursorAddCallback: CursorAddCallback);
}
extern "C" {
    #[doc = " vimCursorGetDesiredColumn\n\n Get the column that we'd like to be at - used to stay in the same\n column for up/down cursor motions."]
    pub fn vimCursorGetDesiredColumn() -> colnr_T;
}
extern "C" {
    #[doc = " vimSetCursorMoveScreenLineCallback\n\n Callback when the cursor will be moved via screen lines (H, M, L).\n Because the libvim-consumer is responsible for managing the view,\n libvim needs information about the view to correctly handle these motions."]
    pub fn vimSetCursorMoveScreenLineCallback(
        cursorMoveScreenLineCallback: CursorMoveScreenLineCallback,
    );
}
extern "C" {
    #[doc = " vimSetCursorMoveScreenLineCallback\n\n Callback when the cursor will be moved via screen position (gj, gk).\n Because the libvim-consumer is responsible for managing the view,\n libvim needs information about the view to correctly handle these motions."]
    pub fn vimSetCursorMoveScreenPositionCallback(
        cursorMoveScreenPositionCallback: CursorMoveScreenPositionCallback,
    );
}
extern "C" {
    #[doc = " File I/O"]
    pub fn vimSetFileWriteFailureCallback(fileWriteFailureCallback: FileWriteFailureCallback);
}
extern "C" {
    #[doc = " vimInput\n\n vimInput(input) passes the string, verbatim, to vim to be processed,\n without replacing term-codes. This means strings like \"<LEFT>\" are\n handled literally. This function handles Unicode text correctly."]
    pub fn vimInput(input: *mut char_u);
}
extern "C" {
    #[doc = " vimKey\n\n vimKey(input) passes a string and escapes termcodes - so a\n a string like \"<LEFT>\" will first be replaced with the appropriate\n term-code, and handled."]
    pub fn vimKey(key: *mut char_u);
}
extern "C" {
    #[doc = " vimExecute\n\n vimExecute(cmd) executes a command as if it was typed at the command-line.\n\n Example: vimExecute(\"echo 'hello!');"]
    pub fn vimExecute(cmd: *mut char_u);
}
extern "C" {
    pub fn vimExecuteLines(lines: *mut *mut char_u, lineCount: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Auto-indent"]
    pub fn vimSetAutoIndentCallback(callback: AutoIndentCallback) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Colorschemes"]
    pub fn vimColorSchemeSetChangedCallback(callback: ColorSchemeChangedCallback);
}
extern "C" {
    pub fn vimColorSchemeSetCompletionCallback(callback: ColorSchemeCompletionCallback);
}
extern "C" {
    #[doc = " Mapping"]
    pub fn vimSetInputMapCallback(mapCallback: InputMapCallback);
}
extern "C" {
    pub fn vimSetInputUnmapCallback(unmapCallback: InputUnmapCallback);
}
extern "C" {
    #[doc = " Messages"]
    pub fn vimSetMessageCallback(messageCallback: MessageCallback);
}
extern "C" {
    #[doc = " Misc"]
    pub fn vimSetClearCallback(clearCallback: ClearCallback);
}
extern "C" {
    pub fn vimSetOutputCallback(outputCallback: OutputCallback);
}
extern "C" {
    pub fn vimSetFormatCallback(formatCallback: FormatCallback);
}
extern "C" {
    pub fn vimSetGotoCallback(gotoCallback: GotoCallback);
}
extern "C" {
    pub fn vimSetTabPageCallback(tabPageCallback: TabPageCallback);
}
extern "C" {
    pub fn vimSetDirectoryChangedCallback(callback: DirectoryChangedCallback);
}
extern "C" {
    pub fn vimSetOptionSetCallback(callback: OptionSetCallback);
}
extern "C" {
    #[doc = " Operators"]
    pub fn vimSetToggleCommentsCallback(callback: ToggleCommentsCallback);
}
extern "C" {
    pub fn vimSetQuitCallback(callback: QuitCallback);
}
extern "C" {
    pub fn vimSetScrollCallback(callback: ScrollCallback);
}
extern "C" {
    pub fn vimSetUnhandledEscapeCallback(callback: VoidCallback);
}
extern "C" {
    #[doc = " Macros"]
    pub fn vimMacroSetStartRecordCallback(callback: MacroStartRecordCallback);
}
extern "C" {
    pub fn vimMacroSetStopRecordCallback(callback: MacroStopRecordCallback);
}
extern "C" {
    #[doc = " Options"]
    pub fn vimOptionSetTabSize(tabSize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimOptionSetInsertSpaces(insertSpaces: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimOptionGetInsertSpaces() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimOptionGetTabSize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Registers"]
    pub fn vimRegisterGet(
        reg_name: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
    );
}
extern "C" {
    #[doc = " Undo"]
    pub fn vimUndoSaveCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimUndoSaveRegion(start_lnum: linenr_T, end_lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimUndoSync(force: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Visual Mode"]
    pub fn vimVisualGetType() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimVisualSetType(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimVisualIsActive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimSelectIsActive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimVisualGetRange(startPos: *mut pos_T, endPos: *mut pos_T);
}
extern "C" {
    pub fn vimVisualSetStart(startPos: pos_T);
}
extern "C" {
    #[doc = " Search"]
    pub fn vimSearchGetMatchingPair(initc: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn vimSearchGetHighlights(
        buf: *mut buf_T,
        start_lnum: linenr_T,
        end_lnum: linenr_T,
        num_highlights: *mut ::std::os::raw::c_int,
        highlights: *mut *mut searchHighlight_T,
    );
}
extern "C" {
    pub fn vimSearchGetPattern() -> *mut char_u;
}
extern "C" {
    pub fn vimSetStopSearchHighlightCallback(callback: VoidCallback);
}
extern "C" {
    #[doc = " Terminal"]
    pub fn vimSetTerminalCallback(callback: TerminalCallback);
}
extern "C" {
    #[doc = " Window"]
    pub fn vimWindowGetWidth() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetHeight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetTopLine() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetLeftColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowSetWidth(width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimWindowSetHeight(height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimWindowSetTopLeft(top: ::std::os::raw::c_int, left: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimSetWindowSplitCallback(callback: WindowSplitCallback);
}
extern "C" {
    pub fn vimSetWindowMovementCallback(callback: WindowMovementCallback);
}
extern "C" {
    #[doc = " Misc"]
    pub fn vimSetClipboardGetCallback(callback: ClipboardGetCallback);
}
extern "C" {
    pub fn vimGetMode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimGetSubMode() -> subMode_T;
}
extern "C" {
    pub fn vimGetPendingOperator(pendingOp: *mut pendingOp_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimSetYankCallback(callback: YankCallback);
}
extern "C" {
    pub fn vimSetDisplayIntroCallback(callback: VoidCallback);
}
extern "C" {
    pub fn vimSetDisplayVersionCallback(callback: VoidCallback);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
